// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.subway.client.proto;

/**
 * <pre>
 * Realtime update of the progress of a vehicle along a trip.
 * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
 * - A trip that proceeds along the schedule.
 * - A trip that proceeds along a route but has no fixed schedule.
 * - A trip that have been added or removed with regard to schedule.
 * The updates can be for future, predicted arrival/departure events, or for
 * past events that already occurred.
 * Normally, updates should get more precise and more certain (see
 * uncertainty below) as the events gets closer to current time.
 * Even if that is not possible, the information for past events should be
 * precise and certain. In particular, if an update points to time in the past
 * but its update's uncertainty is not 0, the client should conclude that the
 * update is a (wrong) prediction and that the trip has not completed yet.
 * Note that the update can describe a trip that is already completed.
 * To this end, it is enough to provide an update for the last stop of the trip.
 * If the time of that is in the past, the client will conclude from that that
 * the whole trip is in the past (it is possible, although inconsequential, to
 * also provide updates for preceding stops).
 * This option is most relevant for a trip that has completed ahead of schedule,
 * but according to the schedule, the trip is still proceeding at the current
 * time. Removing the updates for this trip could make the client assume
 * that the trip is still proceeding.
 * Note that the feed provider is allowed, but not required, to purge past
 * updates - this is one case where this would be practically useful.
 * </pre>
 *
 * Protobuf type {@code transit_realtime.TripUpdate}
 */
public  final class TripUpdate extends
    com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
      TripUpdate> implements
    // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate)
    TripUpdateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TripUpdate.newBuilder() to construct.
  private TripUpdate(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<sen.khyber.subway.client.proto.TripUpdate, ?> builder) {
    super(builder);
  }
  private TripUpdate() {
    stopTimeUpdate_ = java.util.Collections.emptyList();
    timestamp_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TripUpdate(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            sen.khyber.subway.client.proto.TripDescriptor.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = trip_.toBuilder();
            }
            trip_ = input.readMessage(sen.khyber.subway.client.proto.TripDescriptor.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(trip_);
              trip_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              stopTimeUpdate_ = new java.util.ArrayList<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate>();
              mutable_bitField0_ |= 0x00000004;
            }
            stopTimeUpdate_.add(
                input.readMessage(sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.PARSER, extensionRegistry));
            break;
          }
          case 26: {
            sen.khyber.subway.client.proto.VehicleDescriptor.Builder subBuilder = null;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              subBuilder = vehicle_.toBuilder();
            }
            vehicle_ = input.readMessage(sen.khyber.subway.client.proto.VehicleDescriptor.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(vehicle_);
              vehicle_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000002;
            break;
          }
          case 32: {
            bitField0_ |= 0x00000004;
            timestamp_ = input.readUInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        stopTimeUpdate_ = java.util.Collections.unmodifiableList(stopTimeUpdate_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            sen.khyber.subway.client.proto.TripUpdate.class, sen.khyber.subway.client.proto.TripUpdate.Builder.class);
  }

  public interface StopTimeEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeEvent)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<StopTimeEvent> {

    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     */
    boolean hasDelay();
    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     */
    int getDelay();

    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     */
    boolean hasTime();
    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     */
    long getTime();

    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     */
    boolean hasUncertainty();
    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     */
    int getUncertainty();
  }
  /**
   * <pre>
   * Timing information for a single predicted event (either arrival or
   * departure).
   * Timing consists of delay and/or estimated time, and uncertainty.
   * - delay should be used when the prediction is given relative to some
   *   existing schedule in GTFS.
   * - time should be given whether there is a predicted schedule or not. If
   *   both time and delay are specified, time will take precedence
   *   (although normally, time, if given for a scheduled trip, should be
   *   equal to scheduled time in GTFS + delay).
   * Uncertainty applies equally to both time and delay.
   * The uncertainty roughly specifies the expected error in true delay (but
   * note, we don't yet define its precise statistical meaning). It's possible
   * for the uncertainty to be 0, for example for trains that are driven under
   * computer timing control.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
   */
  public  static final class StopTimeEvent extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        StopTimeEvent> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.StopTimeEvent)
      StopTimeEventOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StopTimeEvent.newBuilder() to construct.
    private StopTimeEvent(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, ?> builder) {
      super(builder);
    }
    private StopTimeEvent() {
      delay_ = 0;
      time_ = 0L;
      uncertainty_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StopTimeEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              delay_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              time_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              uncertainty_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.class, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder.class);
    }

    private int bitField0_;
    public static final int DELAY_FIELD_NUMBER = 1;
    private int delay_;
    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     */
    public boolean hasDelay() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Delay (in seconds) can be positive (meaning that the vehicle is late) or
     * negative (meaning that the vehicle is ahead of schedule). Delay of 0
     * means that the vehicle is exactly on time.
     * </pre>
     *
     * <code>optional int32 delay = 1;</code>
     */
    public int getDelay() {
      return delay_;
    }

    public static final int TIME_FIELD_NUMBER = 2;
    private long time_;
    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Event as absolute time.
     * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
     * UTC).
     * </pre>
     *
     * <code>optional int64 time = 2;</code>
     */
    public long getTime() {
      return time_;
    }

    public static final int UNCERTAINTY_FIELD_NUMBER = 3;
    private int uncertainty_;
    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     */
    public boolean hasUncertainty() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * If uncertainty is omitted, it is interpreted as unknown.
     * If the prediction is unknown or too uncertain, the delay (or time) field
     * should be empty. In such case, the uncertainty field is ignored.
     * To specify a completely certain prediction, set its uncertainty to 0.
     * </pre>
     *
     * <code>optional int32 uncertainty = 3;</code>
     */
    public int getUncertainty() {
      return uncertainty_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, delay_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, time_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, uncertainty_);
      }
      extensionWriter.writeUntil(2000, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, delay_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, time_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, uncertainty_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent)) {
        return super.equals(obj);
      }
      sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent other = (sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent) obj;

      boolean result = true;
      result = result && (hasDelay() == other.hasDelay());
      if (hasDelay()) {
        result = result && (getDelay()
            == other.getDelay());
      }
      result = result && (hasTime() == other.hasTime());
      if (hasTime()) {
        result = result && (getTime()
            == other.getTime());
      }
      result = result && (hasUncertainty() == other.hasUncertainty());
      if (hasUncertainty()) {
        result = result && (getUncertainty()
            == other.getUncertainty());
      }
      result = result && unknownFields.equals(other.unknownFields);
      result = result &&
          getExtensionFields().equals(other.getExtensionFields());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDelay()) {
        hash = (37 * hash) + DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getDelay();
      }
      if (hasTime()) {
        hash = (37 * hash) + TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTime());
      }
      if (hasUncertainty()) {
        hash = (37 * hash) + UNCERTAINTY_FIELD_NUMBER;
        hash = (53 * hash) + getUncertainty();
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Timing information for a single predicted event (either arrival or
     * departure).
     * Timing consists of delay and/or estimated time, and uncertainty.
     * - delay should be used when the prediction is given relative to some
     *   existing schedule in GTFS.
     * - time should be given whether there is a predicted schedule or not. If
     *   both time and delay are specified, time will take precedence
     *   (although normally, time, if given for a scheduled trip, should be
     *   equal to scheduled time in GTFS + delay).
     * Uncertainty applies equally to both time and delay.
     * The uncertainty roughly specifies the expected error in true delay (but
     * note, we don't yet define its precise statistical meaning). It's possible
     * for the uncertainty to be 0, for example for trains that are driven under
     * computer timing control.
     * </pre>
     *
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.StopTimeEvent)
        sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.class, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder.class);
      }

      // Construct using sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        delay_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        uncertainty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
      }

      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getDefaultInstanceForType() {
        return sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance();
      }

      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent build() {
        sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent buildPartial() {
        sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent result = new sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.delay_ = delay_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.uncertainty_ = uncertainty_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, Type> extension,
          Type value) {
        return (Builder) super.setExtension(extension, value);
      }
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, java.util.List<Type>> extension,
          int index, Type value) {
        return (Builder) super.setExtension(extension, index, value);
      }
      public <Type> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, java.util.List<Type>> extension,
          Type value) {
        return (Builder) super.addExtension(extension, value);
      }
      public <Type> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, ?> extension) {
        return (Builder) super.clearExtension(extension);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent) {
          return mergeFrom((sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent other) {
        if (other == sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance()) return this;
        if (other.hasDelay()) {
          setDelay(other.getDelay());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasUncertainty()) {
          setUncertainty(other.getUncertainty());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int delay_ ;
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       */
      public int getDelay() {
        return delay_;
      }
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       */
      public Builder setDelay(int value) {
        bitField0_ |= 0x00000001;
        delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delay (in seconds) can be positive (meaning that the vehicle is late) or
       * negative (meaning that the vehicle is ahead of schedule). Delay of 0
       * means that the vehicle is exactly on time.
       * </pre>
       *
       * <code>optional int32 delay = 1;</code>
       */
      public Builder clearDelay() {
        bitField0_ = (bitField0_ & ~0x00000001);
        delay_ = 0;
        onChanged();
        return this;
      }

      private long time_ ;
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       */
      public long getTime() {
        return time_;
      }
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       */
      public Builder setTime(long value) {
        bitField0_ |= 0x00000002;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Event as absolute time.
       * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
       * UTC).
       * </pre>
       *
       * <code>optional int64 time = 2;</code>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0L;
        onChanged();
        return this;
      }

      private int uncertainty_ ;
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       */
      public boolean hasUncertainty() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       */
      public int getUncertainty() {
        return uncertainty_;
      }
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       */
      public Builder setUncertainty(int value) {
        bitField0_ |= 0x00000004;
        uncertainty_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If uncertainty is omitted, it is interpreted as unknown.
       * If the prediction is unknown or too uncertain, the delay (or time) field
       * should be empty. In such case, the uncertainty field is ignored.
       * To specify a completely certain prediction, set its uncertainty to 0.
       * </pre>
       *
       * <code>optional int32 uncertainty = 3;</code>
       */
      public Builder clearUncertainty() {
        bitField0_ = (bitField0_ & ~0x00000004);
        uncertainty_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeEvent)
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeEvent)
    private static final sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent();
    }

    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StopTimeEvent>
        PARSER = new com.google.protobuf.AbstractParser<StopTimeEvent>() {
      public StopTimeEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StopTimeEvent(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StopTimeEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StopTimeEvent> getParserForType() {
      return PARSER;
    }

    public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StopTimeUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeUpdate)
      com.google.protobuf.GeneratedMessageV3.
          ExtendableMessageOrBuilder<StopTimeUpdate> {

    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     */
    boolean hasStopSequence();
    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     */
    int getStopSequence();

    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     */
    boolean hasStopId();
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     */
    java.lang.String getStopId();
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     */
    com.google.protobuf.ByteString
        getStopIdBytes();

    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    boolean hasArrival();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getArrival();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder();

    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    boolean hasDeparture();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getDeparture();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder();

    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     */
    boolean hasScheduleRelationship();
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     */
    sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship();
  }
  /**
   * <pre>
   * Realtime update for arrival and/or departure events for a given stop on a
   * trip. Updates can be supplied for both past and future events.
   * The producer is allowed, although not required, to drop past events.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
   */
  public  static final class StopTimeUpdate extends
      com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
        StopTimeUpdate> implements
      // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate.StopTimeUpdate)
      StopTimeUpdateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StopTimeUpdate.newBuilder() to construct.
    private StopTimeUpdate(com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, ?> builder) {
      super(builder);
    }
    private StopTimeUpdate() {
      stopSequence_ = 0;
      stopId_ = "";
      scheduleRelationship_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StopTimeUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              stopSequence_ = input.readUInt32();
              break;
            }
            case 18: {
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = arrival_.toBuilder();
              }
              arrival_ = input.readMessage(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(arrival_);
                arrival_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 26: {
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = departure_.toBuilder();
              }
              departure_ = input.readMessage(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(departure_);
                departure_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              stopId_ = bs;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship value = sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                scheduleRelationship_ = rawValue;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.class, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder.class);
    }

    /**
     * <pre>
     * The relation between this StopTime and the static schedule.
     * </pre>
     *
     * Protobuf enum {@code transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship}
     */
    public enum ScheduleRelationship
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * The vehicle is proceeding in accordance with its static schedule of
       * stops, although not necessarily according to the times of the schedule.
       * At least one of arrival and departure must be provided. If the schedule
       * for this stop contains both arrival and departure times then so must
       * this update.
       * </pre>
       *
       * <code>SCHEDULED = 0;</code>
       */
      SCHEDULED(0),
      /**
       * <pre>
       * The stop is skipped, i.e., the vehicle will not stop at this stop.
       * Arrival and departure are optional.
       * </pre>
       *
       * <code>SKIPPED = 1;</code>
       */
      SKIPPED(1),
      /**
       * <pre>
       * No data is given for this stop. The main intention for this value is to
       * give the predictions only for part of a trip, i.e., if the last update
       * for a trip has a NO_DATA specifier, then StopTimes for the rest of the
       * stops in the trip are considered to be unspecified as well.
       * Neither arrival nor departure should be supplied.
       * </pre>
       *
       * <code>NO_DATA = 2;</code>
       */
      NO_DATA(2),
      ;

      /**
       * <pre>
       * The vehicle is proceeding in accordance with its static schedule of
       * stops, although not necessarily according to the times of the schedule.
       * At least one of arrival and departure must be provided. If the schedule
       * for this stop contains both arrival and departure times then so must
       * this update.
       * </pre>
       *
       * <code>SCHEDULED = 0;</code>
       */
      public static final int SCHEDULED_VALUE = 0;
      /**
       * <pre>
       * The stop is skipped, i.e., the vehicle will not stop at this stop.
       * Arrival and departure are optional.
       * </pre>
       *
       * <code>SKIPPED = 1;</code>
       */
      public static final int SKIPPED_VALUE = 1;
      /**
       * <pre>
       * No data is given for this stop. The main intention for this value is to
       * give the predictions only for part of a trip, i.e., if the last update
       * for a trip has a NO_DATA specifier, then StopTimes for the rest of the
       * stops in the trip are considered to be unspecified as well.
       * Neither arrival nor departure should be supplied.
       * </pre>
       *
       * <code>NO_DATA = 2;</code>
       */
      public static final int NO_DATA_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScheduleRelationship valueOf(int value) {
        return forNumber(value);
      }

      public static ScheduleRelationship forNumber(int value) {
        switch (value) {
          case 0: return SCHEDULED;
          case 1: return SKIPPED;
          case 2: return NO_DATA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ScheduleRelationship> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>() {
              public ScheduleRelationship findValueByNumber(int number) {
                return ScheduleRelationship.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.getDescriptor().getEnumTypes().get(0);
      }

      private static final ScheduleRelationship[] VALUES = values();

      public static ScheduleRelationship valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ScheduleRelationship(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship)
    }

    private int bitField0_;
    public static final int STOP_SEQUENCE_FIELD_NUMBER = 1;
    private int stopSequence_;
    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     */
    public boolean hasStopSequence() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Must be the same as in stop_times.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional uint32 stop_sequence = 1;</code>
     */
    public int getStopSequence() {
      return stopSequence_;
    }

    public static final int STOP_ID_FIELD_NUMBER = 4;
    private volatile java.lang.Object stopId_;
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     */
    public boolean hasStopId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     */
    public java.lang.String getStopId() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stopId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Must be the same as in stops.txt in the corresponding GTFS feed.
     * </pre>
     *
     * <code>optional string stop_id = 4;</code>
     */
    public com.google.protobuf.ByteString
        getStopIdBytes() {
      java.lang.Object ref = stopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARRIVAL_FIELD_NUMBER = 2;
    private sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent arrival_;
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    public boolean hasArrival() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getArrival() {
      return arrival_ == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder() {
      return arrival_ == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
    }

    public static final int DEPARTURE_FIELD_NUMBER = 3;
    private sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent departure_;
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    public boolean hasDeparture() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getDeparture() {
      return departure_ == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder() {
      return departure_ == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
    }

    public static final int SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 5;
    private int scheduleRelationship_;
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     */
    public boolean hasScheduleRelationship() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship() {
      sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship result = sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship.valueOf(scheduleRelationship_);
      return result == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasArrival()) {
        if (!getArrival().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDeparture()) {
        if (!getDeparture().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .ExtendableMessage<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate>.ExtensionWriter
          extensionWriter = newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, stopSequence_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(2, getArrival());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(3, getDeparture());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, stopId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, scheduleRelationship_);
      }
      extensionWriter.writeUntil(2000, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stopSequence_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getArrival());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDeparture());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, stopId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, scheduleRelationship_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate)) {
        return super.equals(obj);
      }
      sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate other = (sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate) obj;

      boolean result = true;
      result = result && (hasStopSequence() == other.hasStopSequence());
      if (hasStopSequence()) {
        result = result && (getStopSequence()
            == other.getStopSequence());
      }
      result = result && (hasStopId() == other.hasStopId());
      if (hasStopId()) {
        result = result && getStopId()
            .equals(other.getStopId());
      }
      result = result && (hasArrival() == other.hasArrival());
      if (hasArrival()) {
        result = result && getArrival()
            .equals(other.getArrival());
      }
      result = result && (hasDeparture() == other.hasDeparture());
      if (hasDeparture()) {
        result = result && getDeparture()
            .equals(other.getDeparture());
      }
      result = result && (hasScheduleRelationship() == other.hasScheduleRelationship());
      if (hasScheduleRelationship()) {
        result = result && scheduleRelationship_ == other.scheduleRelationship_;
      }
      result = result && unknownFields.equals(other.unknownFields);
      result = result &&
          getExtensionFields().equals(other.getExtensionFields());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStopSequence()) {
        hash = (37 * hash) + STOP_SEQUENCE_FIELD_NUMBER;
        hash = (53 * hash) + getStopSequence();
      }
      if (hasStopId()) {
        hash = (37 * hash) + STOP_ID_FIELD_NUMBER;
        hash = (53 * hash) + getStopId().hashCode();
      }
      if (hasArrival()) {
        hash = (37 * hash) + ARRIVAL_FIELD_NUMBER;
        hash = (53 * hash) + getArrival().hashCode();
      }
      if (hasDeparture()) {
        hash = (37 * hash) + DEPARTURE_FIELD_NUMBER;
        hash = (53 * hash) + getDeparture().hashCode();
      }
      if (hasScheduleRelationship()) {
        hash = (37 * hash) + SCHEDULE_RELATIONSHIP_FIELD_NUMBER;
        hash = (53 * hash) + scheduleRelationship_;
      }
      hash = hashFields(hash, getExtensionFields());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Realtime update for arrival and/or departure events for a given stop on a
     * trip. Updates can be supplied for both past and future events.
     * The producer is allowed, although not required, to drop past events.
     * </pre>
     *
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
          sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate.StopTimeUpdate)
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.class, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder.class);
      }

      // Construct using sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArrivalFieldBuilder();
          getDepartureFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        stopSequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        stopId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (arrivalBuilder_ == null) {
          arrival_ = null;
        } else {
          arrivalBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (departureBuilder_ == null) {
          departure_ = null;
        } else {
          departureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        scheduleRelationship_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
      }

      public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate getDefaultInstanceForType() {
        return sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.getDefaultInstance();
      }

      public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate build() {
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate buildPartial() {
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate result = new sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stopSequence_ = stopSequence_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stopId_ = stopId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (arrivalBuilder_ == null) {
          result.arrival_ = arrival_;
        } else {
          result.arrival_ = arrivalBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (departureBuilder_ == null) {
          result.departure_ = departure_;
        } else {
          result.departure_ = departureBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.scheduleRelationship_ = scheduleRelationship_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, Type> extension,
          Type value) {
        return (Builder) super.setExtension(extension, value);
      }
      public <Type> Builder setExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, java.util.List<Type>> extension,
          int index, Type value) {
        return (Builder) super.setExtension(extension, index, value);
      }
      public <Type> Builder addExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, java.util.List<Type>> extension,
          Type value) {
        return (Builder) super.addExtension(extension, value);
      }
      public <Type> Builder clearExtension(
          com.google.protobuf.GeneratedMessage.GeneratedExtension<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, ?> extension) {
        return (Builder) super.clearExtension(extension);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate) {
          return mergeFrom((sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate other) {
        if (other == sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.getDefaultInstance()) return this;
        if (other.hasStopSequence()) {
          setStopSequence(other.getStopSequence());
        }
        if (other.hasStopId()) {
          bitField0_ |= 0x00000002;
          stopId_ = other.stopId_;
          onChanged();
        }
        if (other.hasArrival()) {
          mergeArrival(other.getArrival());
        }
        if (other.hasDeparture()) {
          mergeDeparture(other.getDeparture());
        }
        if (other.hasScheduleRelationship()) {
          setScheduleRelationship(other.getScheduleRelationship());
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (hasArrival()) {
          if (!getArrival().isInitialized()) {
            return false;
          }
        }
        if (hasDeparture()) {
          if (!getDeparture().isInitialized()) {
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stopSequence_ ;
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       */
      public boolean hasStopSequence() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       */
      public int getStopSequence() {
        return stopSequence_;
      }
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       */
      public Builder setStopSequence(int value) {
        bitField0_ |= 0x00000001;
        stopSequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must be the same as in stop_times.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional uint32 stop_sequence = 1;</code>
       */
      public Builder clearStopSequence() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stopSequence_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object stopId_ = "";
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       */
      public boolean hasStopId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       */
      public java.lang.String getStopId() {
        java.lang.Object ref = stopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stopId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       */
      public com.google.protobuf.ByteString
          getStopIdBytes() {
        java.lang.Object ref = stopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       */
      public Builder setStopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        stopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       */
      public Builder clearStopId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        stopId_ = getDefaultInstance().getStopId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must be the same as in stops.txt in the corresponding GTFS feed.
       * </pre>
       *
       * <code>optional string stop_id = 4;</code>
       */
      public Builder setStopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        stopId_ = value;
        onChanged();
        return this;
      }

      private sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent arrival_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder> arrivalBuilder_;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public boolean hasArrival() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getArrival() {
        if (arrivalBuilder_ == null) {
          return arrival_ == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
        } else {
          return arrivalBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder setArrival(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent value) {
        if (arrivalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          arrival_ = value;
          onChanged();
        } else {
          arrivalBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder setArrival(
          sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder builderForValue) {
        if (arrivalBuilder_ == null) {
          arrival_ = builderForValue.build();
          onChanged();
        } else {
          arrivalBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder mergeArrival(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent value) {
        if (arrivalBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              arrival_ != null &&
              arrival_ != sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance()) {
            arrival_ =
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.newBuilder(arrival_).mergeFrom(value).buildPartial();
          } else {
            arrival_ = value;
          }
          onChanged();
        } else {
          arrivalBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public Builder clearArrival() {
        if (arrivalBuilder_ == null) {
          arrival_ = null;
          onChanged();
        } else {
          arrivalBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder getArrivalBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getArrivalFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder getArrivalOrBuilder() {
        if (arrivalBuilder_ != null) {
          return arrivalBuilder_.getMessageOrBuilder();
        } else {
          return arrival_ == null ?
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : arrival_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder> 
          getArrivalFieldBuilder() {
        if (arrivalBuilder_ == null) {
          arrivalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder>(
                  getArrival(),
                  getParentForChildren(),
                  isClean());
          arrival_ = null;
        }
        return arrivalBuilder_;
      }

      private sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent departure_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder> departureBuilder_;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public boolean hasDeparture() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent getDeparture() {
        if (departureBuilder_ == null) {
          return departure_ == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
        } else {
          return departureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder setDeparture(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent value) {
        if (departureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          departure_ = value;
          onChanged();
        } else {
          departureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder setDeparture(
          sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder builderForValue) {
        if (departureBuilder_ == null) {
          departure_ = builderForValue.build();
          onChanged();
        } else {
          departureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder mergeDeparture(sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent value) {
        if (departureBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              departure_ != null &&
              departure_ != sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance()) {
            departure_ =
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.newBuilder(departure_).mergeFrom(value).buildPartial();
          } else {
            departure_ = value;
          }
          onChanged();
        } else {
          departureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public Builder clearDeparture() {
        if (departureBuilder_ == null) {
          departure_ = null;
          onChanged();
        } else {
          departureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder getDepartureBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getDepartureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      public sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder getDepartureOrBuilder() {
        if (departureBuilder_ != null) {
          return departureBuilder_.getMessageOrBuilder();
        } else {
          return departure_ == null ?
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.getDefaultInstance() : departure_;
        }
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder> 
          getDepartureFieldBuilder() {
        if (departureBuilder_ == null) {
          departureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent, sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeEventOrBuilder>(
                  getDeparture(),
                  getParentForChildren(),
                  isClean());
          departure_ = null;
        }
        return departureBuilder_;
      }

      private int scheduleRelationship_ = 0;
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      public boolean hasScheduleRelationship() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship getScheduleRelationship() {
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship result = sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship.valueOf(scheduleRelationship_);
        return result == null ? sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED : result;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      public Builder setScheduleRelationship(sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        scheduleRelationship_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];</code>
       */
      public Builder clearScheduleRelationship() {
        bitField0_ = (bitField0_ & ~0x00000010);
        scheduleRelationship_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeUpdate)
    }

    // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate)
    private static final sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate();
    }

    public static sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<StopTimeUpdate>
        PARSER = new com.google.protobuf.AbstractParser<StopTimeUpdate>() {
      public StopTimeUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new StopTimeUpdate(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StopTimeUpdate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StopTimeUpdate> getParserForType() {
      return PARSER;
    }

    public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int TRIP_FIELD_NUMBER = 1;
  private sen.khyber.subway.client.proto.TripDescriptor trip_;
  /**
   * <pre>
   * The Trip that this message applies to. There can be at most one
   * TripUpdate entity for each actual trip instance.
   * If there is none, that means there is no prediction information available.
   * It does *not* mean that the trip is progressing according to schedule.
   * </pre>
   *
   * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
   */
  public boolean hasTrip() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The Trip that this message applies to. There can be at most one
   * TripUpdate entity for each actual trip instance.
   * If there is none, that means there is no prediction information available.
   * It does *not* mean that the trip is progressing according to schedule.
   * </pre>
   *
   * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
   */
  public sen.khyber.subway.client.proto.TripDescriptor getTrip() {
    return trip_ == null ? sen.khyber.subway.client.proto.TripDescriptor.getDefaultInstance() : trip_;
  }
  /**
   * <pre>
   * The Trip that this message applies to. There can be at most one
   * TripUpdate entity for each actual trip instance.
   * If there is none, that means there is no prediction information available.
   * It does *not* mean that the trip is progressing according to schedule.
   * </pre>
   *
   * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
   */
  public sen.khyber.subway.client.proto.TripDescriptorOrBuilder getTripOrBuilder() {
    return trip_ == null ? sen.khyber.subway.client.proto.TripDescriptor.getDefaultInstance() : trip_;
  }

  public static final int VEHICLE_FIELD_NUMBER = 3;
  private sen.khyber.subway.client.proto.VehicleDescriptor vehicle_;
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
   */
  public boolean hasVehicle() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
   */
  public sen.khyber.subway.client.proto.VehicleDescriptor getVehicle() {
    return vehicle_ == null ? sen.khyber.subway.client.proto.VehicleDescriptor.getDefaultInstance() : vehicle_;
  }
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
   */
  public sen.khyber.subway.client.proto.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
    return vehicle_ == null ? sen.khyber.subway.client.proto.VehicleDescriptor.getDefaultInstance() : vehicle_;
  }

  public static final int STOP_TIME_UPDATE_FIELD_NUMBER = 2;
  private java.util.List<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate> stopTimeUpdate_;
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  public java.util.List<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate> getStopTimeUpdateList() {
    return stopTimeUpdate_;
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  public java.util.List<? extends sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder> 
      getStopTimeUpdateOrBuilderList() {
    return stopTimeUpdate_;
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  public int getStopTimeUpdateCount() {
    return stopTimeUpdate_.size();
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate getStopTimeUpdate(int index) {
    return stopTimeUpdate_.get(index);
  }
  /**
   * <pre>
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   * </pre>
   *
   * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
   */
  public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(
      int index) {
    return stopTimeUpdate_.get(index);
  }

  public static final int TIMESTAMP_FIELD_NUMBER = 4;
  private long timestamp_;
  /**
   * <pre>
   * Moment at which the vehicle's real-time progress was measured. In POSIX
   * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 4;</code>
   */
  public boolean hasTimestamp() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Moment at which the vehicle's real-time progress was measured. In POSIX
   * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 4;</code>
   */
  public long getTimestamp() {
    return timestamp_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasTrip()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!getTrip().isInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasVehicle()) {
      if (!getVehicle().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    for (int i = 0; i < getStopTimeUpdateCount(); i++) {
      if (!getStopTimeUpdate(i).isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    if (!extensionsAreInitialized()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .ExtendableMessage<sen.khyber.subway.client.proto.TripUpdate>.ExtensionWriter
        extensionWriter = newExtensionWriter();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, getTrip());
    }
    for (int i = 0; i < stopTimeUpdate_.size(); i++) {
      output.writeMessage(2, stopTimeUpdate_.get(i));
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(3, getVehicle());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeUInt64(4, timestamp_);
    }
    extensionWriter.writeUntil(2000, output);
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTrip());
    }
    for (int i = 0; i < stopTimeUpdate_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, stopTimeUpdate_.get(i));
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getVehicle());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, timestamp_);
    }
    size += extensionsSerializedSize();
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof sen.khyber.subway.client.proto.TripUpdate)) {
      return super.equals(obj);
    }
    sen.khyber.subway.client.proto.TripUpdate other = (sen.khyber.subway.client.proto.TripUpdate) obj;

    boolean result = true;
    result = result && (hasTrip() == other.hasTrip());
    if (hasTrip()) {
      result = result && getTrip()
          .equals(other.getTrip());
    }
    result = result && (hasVehicle() == other.hasVehicle());
    if (hasVehicle()) {
      result = result && getVehicle()
          .equals(other.getVehicle());
    }
    result = result && getStopTimeUpdateList()
        .equals(other.getStopTimeUpdateList());
    result = result && (hasTimestamp() == other.hasTimestamp());
    if (hasTimestamp()) {
      result = result && (getTimestamp()
          == other.getTimestamp());
    }
    result = result && unknownFields.equals(other.unknownFields);
    result = result &&
        getExtensionFields().equals(other.getExtensionFields());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTrip()) {
      hash = (37 * hash) + TRIP_FIELD_NUMBER;
      hash = (53 * hash) + getTrip().hashCode();
    }
    if (hasVehicle()) {
      hash = (37 * hash) + VEHICLE_FIELD_NUMBER;
      hash = (53 * hash) + getVehicle().hashCode();
    }
    if (getStopTimeUpdateCount() > 0) {
      hash = (37 * hash) + STOP_TIME_UPDATE_FIELD_NUMBER;
      hash = (53 * hash) + getStopTimeUpdateList().hashCode();
    }
    if (hasTimestamp()) {
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
    }
    hash = hashFields(hash, getExtensionFields());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.TripUpdate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(sen.khyber.subway.client.proto.TripUpdate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Realtime update of the progress of a vehicle along a trip.
   * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
   * - A trip that proceeds along the schedule.
   * - A trip that proceeds along a route but has no fixed schedule.
   * - A trip that have been added or removed with regard to schedule.
   * The updates can be for future, predicted arrival/departure events, or for
   * past events that already occurred.
   * Normally, updates should get more precise and more certain (see
   * uncertainty below) as the events gets closer to current time.
   * Even if that is not possible, the information for past events should be
   * precise and certain. In particular, if an update points to time in the past
   * but its update's uncertainty is not 0, the client should conclude that the
   * update is a (wrong) prediction and that the trip has not completed yet.
   * Note that the update can describe a trip that is already completed.
   * To this end, it is enough to provide an update for the last stop of the trip.
   * If the time of that is in the past, the client will conclude from that that
   * the whole trip is in the past (it is possible, although inconsequential, to
   * also provide updates for preceding stops).
   * This option is most relevant for a trip that has completed ahead of schedule,
   * but according to the schedule, the trip is still proceeding at the current
   * time. Removing the updates for this trip could make the client assume
   * that the trip is still proceeding.
   * Note that the feed provider is allowed, but not required, to purge past
   * updates - this is one case where this would be practically useful.
   * </pre>
   *
   * Protobuf type {@code transit_realtime.TripUpdate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
        sen.khyber.subway.client.proto.TripUpdate, Builder> implements
      // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate)
      sen.khyber.subway.client.proto.TripUpdateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              sen.khyber.subway.client.proto.TripUpdate.class, sen.khyber.subway.client.proto.TripUpdate.Builder.class);
    }

    // Construct using sen.khyber.subway.client.proto.TripUpdate.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTripFieldBuilder();
        getVehicleFieldBuilder();
        getStopTimeUpdateFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (tripBuilder_ == null) {
        trip_ = null;
      } else {
        tripBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (vehicleBuilder_ == null) {
        vehicle_ = null;
      } else {
        vehicleBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (stopTimeUpdateBuilder_ == null) {
        stopTimeUpdate_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        stopTimeUpdateBuilder_.clear();
      }
      timestamp_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return sen.khyber.subway.client.proto.GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
    }

    public sen.khyber.subway.client.proto.TripUpdate getDefaultInstanceForType() {
      return sen.khyber.subway.client.proto.TripUpdate.getDefaultInstance();
    }

    public sen.khyber.subway.client.proto.TripUpdate build() {
      sen.khyber.subway.client.proto.TripUpdate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public sen.khyber.subway.client.proto.TripUpdate buildPartial() {
      sen.khyber.subway.client.proto.TripUpdate result = new sen.khyber.subway.client.proto.TripUpdate(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      if (tripBuilder_ == null) {
        result.trip_ = trip_;
      } else {
        result.trip_ = tripBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      if (vehicleBuilder_ == null) {
        result.vehicle_ = vehicle_;
      } else {
        result.vehicle_ = vehicleBuilder_.build();
      }
      if (stopTimeUpdateBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          stopTimeUpdate_ = java.util.Collections.unmodifiableList(stopTimeUpdate_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.stopTimeUpdate_ = stopTimeUpdate_;
      } else {
        result.stopTimeUpdate_ = stopTimeUpdateBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000004;
      }
      result.timestamp_ = timestamp_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            sen.khyber.subway.client.proto.TripUpdate, Type> extension,
        Type value) {
      return (Builder) super.setExtension(extension, value);
    }
    public <Type> Builder setExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            sen.khyber.subway.client.proto.TripUpdate, java.util.List<Type>> extension,
        int index, Type value) {
      return (Builder) super.setExtension(extension, index, value);
    }
    public <Type> Builder addExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            sen.khyber.subway.client.proto.TripUpdate, java.util.List<Type>> extension,
        Type value) {
      return (Builder) super.addExtension(extension, value);
    }
    public <Type> Builder clearExtension(
        com.google.protobuf.GeneratedMessage.GeneratedExtension<
            sen.khyber.subway.client.proto.TripUpdate, ?> extension) {
      return (Builder) super.clearExtension(extension);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof sen.khyber.subway.client.proto.TripUpdate) {
        return mergeFrom((sen.khyber.subway.client.proto.TripUpdate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(sen.khyber.subway.client.proto.TripUpdate other) {
      if (other == sen.khyber.subway.client.proto.TripUpdate.getDefaultInstance()) return this;
      if (other.hasTrip()) {
        mergeTrip(other.getTrip());
      }
      if (other.hasVehicle()) {
        mergeVehicle(other.getVehicle());
      }
      if (stopTimeUpdateBuilder_ == null) {
        if (!other.stopTimeUpdate_.isEmpty()) {
          if (stopTimeUpdate_.isEmpty()) {
            stopTimeUpdate_ = other.stopTimeUpdate_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStopTimeUpdateIsMutable();
            stopTimeUpdate_.addAll(other.stopTimeUpdate_);
          }
          onChanged();
        }
      } else {
        if (!other.stopTimeUpdate_.isEmpty()) {
          if (stopTimeUpdateBuilder_.isEmpty()) {
            stopTimeUpdateBuilder_.dispose();
            stopTimeUpdateBuilder_ = null;
            stopTimeUpdate_ = other.stopTimeUpdate_;
            bitField0_ = (bitField0_ & ~0x00000004);
            stopTimeUpdateBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getStopTimeUpdateFieldBuilder() : null;
          } else {
            stopTimeUpdateBuilder_.addAllMessages(other.stopTimeUpdate_);
          }
        }
      }
      if (other.hasTimestamp()) {
        setTimestamp(other.getTimestamp());
      }
      this.mergeExtensionFields(other);
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      if (!hasTrip()) {
        return false;
      }
      if (!getTrip().isInitialized()) {
        return false;
      }
      if (hasVehicle()) {
        if (!getVehicle().isInitialized()) {
          return false;
        }
      }
      for (int i = 0; i < getStopTimeUpdateCount(); i++) {
        if (!getStopTimeUpdate(i).isInitialized()) {
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      sen.khyber.subway.client.proto.TripUpdate parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (sen.khyber.subway.client.proto.TripUpdate) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private sen.khyber.subway.client.proto.TripDescriptor trip_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        sen.khyber.subway.client.proto.TripDescriptor, sen.khyber.subway.client.proto.TripDescriptor.Builder, sen.khyber.subway.client.proto.TripDescriptorOrBuilder> tripBuilder_;
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public boolean hasTrip() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public sen.khyber.subway.client.proto.TripDescriptor getTrip() {
      if (tripBuilder_ == null) {
        return trip_ == null ? sen.khyber.subway.client.proto.TripDescriptor.getDefaultInstance() : trip_;
      } else {
        return tripBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder setTrip(sen.khyber.subway.client.proto.TripDescriptor value) {
      if (tripBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        trip_ = value;
        onChanged();
      } else {
        tripBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder setTrip(
        sen.khyber.subway.client.proto.TripDescriptor.Builder builderForValue) {
      if (tripBuilder_ == null) {
        trip_ = builderForValue.build();
        onChanged();
      } else {
        tripBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder mergeTrip(sen.khyber.subway.client.proto.TripDescriptor value) {
      if (tripBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            trip_ != null &&
            trip_ != sen.khyber.subway.client.proto.TripDescriptor.getDefaultInstance()) {
          trip_ =
            sen.khyber.subway.client.proto.TripDescriptor.newBuilder(trip_).mergeFrom(value).buildPartial();
        } else {
          trip_ = value;
        }
        onChanged();
      } else {
        tripBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public Builder clearTrip() {
      if (tripBuilder_ == null) {
        trip_ = null;
        onChanged();
      } else {
        tripBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public sen.khyber.subway.client.proto.TripDescriptor.Builder getTripBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getTripFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    public sen.khyber.subway.client.proto.TripDescriptorOrBuilder getTripOrBuilder() {
      if (tripBuilder_ != null) {
        return tripBuilder_.getMessageOrBuilder();
      } else {
        return trip_ == null ?
            sen.khyber.subway.client.proto.TripDescriptor.getDefaultInstance() : trip_;
      }
    }
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     *
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        sen.khyber.subway.client.proto.TripDescriptor, sen.khyber.subway.client.proto.TripDescriptor.Builder, sen.khyber.subway.client.proto.TripDescriptorOrBuilder> 
        getTripFieldBuilder() {
      if (tripBuilder_ == null) {
        tripBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            sen.khyber.subway.client.proto.TripDescriptor, sen.khyber.subway.client.proto.TripDescriptor.Builder, sen.khyber.subway.client.proto.TripDescriptorOrBuilder>(
                getTrip(),
                getParentForChildren(),
                isClean());
        trip_ = null;
      }
      return tripBuilder_;
    }

    private sen.khyber.subway.client.proto.VehicleDescriptor vehicle_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        sen.khyber.subway.client.proto.VehicleDescriptor, sen.khyber.subway.client.proto.VehicleDescriptor.Builder, sen.khyber.subway.client.proto.VehicleDescriptorOrBuilder> vehicleBuilder_;
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public boolean hasVehicle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public sen.khyber.subway.client.proto.VehicleDescriptor getVehicle() {
      if (vehicleBuilder_ == null) {
        return vehicle_ == null ? sen.khyber.subway.client.proto.VehicleDescriptor.getDefaultInstance() : vehicle_;
      } else {
        return vehicleBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder setVehicle(sen.khyber.subway.client.proto.VehicleDescriptor value) {
      if (vehicleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vehicle_ = value;
        onChanged();
      } else {
        vehicleBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder setVehicle(
        sen.khyber.subway.client.proto.VehicleDescriptor.Builder builderForValue) {
      if (vehicleBuilder_ == null) {
        vehicle_ = builderForValue.build();
        onChanged();
      } else {
        vehicleBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder mergeVehicle(sen.khyber.subway.client.proto.VehicleDescriptor value) {
      if (vehicleBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            vehicle_ != null &&
            vehicle_ != sen.khyber.subway.client.proto.VehicleDescriptor.getDefaultInstance()) {
          vehicle_ =
            sen.khyber.subway.client.proto.VehicleDescriptor.newBuilder(vehicle_).mergeFrom(value).buildPartial();
        } else {
          vehicle_ = value;
        }
        onChanged();
      } else {
        vehicleBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public Builder clearVehicle() {
      if (vehicleBuilder_ == null) {
        vehicle_ = null;
        onChanged();
      } else {
        vehicleBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public sen.khyber.subway.client.proto.VehicleDescriptor.Builder getVehicleBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getVehicleFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    public sen.khyber.subway.client.proto.VehicleDescriptorOrBuilder getVehicleOrBuilder() {
      if (vehicleBuilder_ != null) {
        return vehicleBuilder_.getMessageOrBuilder();
      } else {
        return vehicle_ == null ?
            sen.khyber.subway.client.proto.VehicleDescriptor.getDefaultInstance() : vehicle_;
      }
    }
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     *
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        sen.khyber.subway.client.proto.VehicleDescriptor, sen.khyber.subway.client.proto.VehicleDescriptor.Builder, sen.khyber.subway.client.proto.VehicleDescriptorOrBuilder> 
        getVehicleFieldBuilder() {
      if (vehicleBuilder_ == null) {
        vehicleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            sen.khyber.subway.client.proto.VehicleDescriptor, sen.khyber.subway.client.proto.VehicleDescriptor.Builder, sen.khyber.subway.client.proto.VehicleDescriptorOrBuilder>(
                getVehicle(),
                getParentForChildren(),
                isClean());
        vehicle_ = null;
      }
      return vehicleBuilder_;
    }

    private java.util.List<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate> stopTimeUpdate_ =
      java.util.Collections.emptyList();
    private void ensureStopTimeUpdateIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        stopTimeUpdate_ = new java.util.ArrayList<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate>(stopTimeUpdate_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder> stopTimeUpdateBuilder_;

    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public java.util.List<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate> getStopTimeUpdateList() {
      if (stopTimeUpdateBuilder_ == null) {
        return java.util.Collections.unmodifiableList(stopTimeUpdate_);
      } else {
        return stopTimeUpdateBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public int getStopTimeUpdateCount() {
      if (stopTimeUpdateBuilder_ == null) {
        return stopTimeUpdate_.size();
      } else {
        return stopTimeUpdateBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate getStopTimeUpdate(int index) {
      if (stopTimeUpdateBuilder_ == null) {
        return stopTimeUpdate_.get(index);
      } else {
        return stopTimeUpdateBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder setStopTimeUpdate(
        int index, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate value) {
      if (stopTimeUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.set(index, value);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder setStopTimeUpdate(
        int index, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder builderForValue) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.set(index, builderForValue.build());
        onChanged();
      } else {
        stopTimeUpdateBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate value) {
      if (stopTimeUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(value);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(
        int index, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate value) {
      if (stopTimeUpdateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(index, value);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder builderForValue) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(builderForValue.build());
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addStopTimeUpdate(
        int index, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder builderForValue) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.add(index, builderForValue.build());
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder addAllStopTimeUpdate(
        java.lang.Iterable<? extends sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate> values) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stopTimeUpdate_);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder clearStopTimeUpdate() {
      if (stopTimeUpdateBuilder_ == null) {
        stopTimeUpdate_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public Builder removeStopTimeUpdate(int index) {
      if (stopTimeUpdateBuilder_ == null) {
        ensureStopTimeUpdateIsMutable();
        stopTimeUpdate_.remove(index);
        onChanged();
      } else {
        stopTimeUpdateBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder getStopTimeUpdateBuilder(
        int index) {
      return getStopTimeUpdateFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(
        int index) {
      if (stopTimeUpdateBuilder_ == null) {
        return stopTimeUpdate_.get(index);  } else {
        return stopTimeUpdateBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public java.util.List<? extends sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder> 
         getStopTimeUpdateOrBuilderList() {
      if (stopTimeUpdateBuilder_ != null) {
        return stopTimeUpdateBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(stopTimeUpdate_);
      }
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder addStopTimeUpdateBuilder() {
      return getStopTimeUpdateFieldBuilder().addBuilder(
          sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.getDefaultInstance());
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder addStopTimeUpdateBuilder(
        int index) {
      return getStopTimeUpdateFieldBuilder().addBuilder(
          index, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.getDefaultInstance());
    }
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     *
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    public java.util.List<sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder> 
         getStopTimeUpdateBuilderList() {
      return getStopTimeUpdateFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder> 
        getStopTimeUpdateFieldBuilder() {
      if (stopTimeUpdateBuilder_ == null) {
        stopTimeUpdateBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.Builder, sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdateOrBuilder>(
                stopTimeUpdate_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        stopTimeUpdate_ = null;
      }
      return stopTimeUpdateBuilder_;
    }

    private long timestamp_ ;
    /**
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     */
    public Builder setTimestamp(long value) {
      bitField0_ |= 0x00000008;
      timestamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     *
     * <code>optional uint64 timestamp = 4;</code>
     */
    public Builder clearTimestamp() {
      bitField0_ = (bitField0_ & ~0x00000008);
      timestamp_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate)
  }

  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate)
  private static final sen.khyber.subway.client.proto.TripUpdate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new sen.khyber.subway.client.proto.TripUpdate();
  }

  public static sen.khyber.subway.client.proto.TripUpdate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<TripUpdate>
      PARSER = new com.google.protobuf.AbstractParser<TripUpdate>() {
    public TripUpdate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new TripUpdate(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TripUpdate> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TripUpdate> getParserForType() {
    return PARSER;
  }

  public sen.khyber.subway.client.proto.TripUpdate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

