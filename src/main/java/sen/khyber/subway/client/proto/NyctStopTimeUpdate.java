// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

package sen.khyber.subway.client.proto;

/**
 * <pre>
 * NYCT Subway extensions for the stop time update
 * </pre>
 *
 * Protobuf type {@code NyctStopTimeUpdate}
 */
public  final class NyctStopTimeUpdate extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:NyctStopTimeUpdate)
    NyctStopTimeUpdateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NyctStopTimeUpdate.newBuilder() to construct.
  private NyctStopTimeUpdate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NyctStopTimeUpdate() {
    scheduledTrack_ = "";
    actualTrack_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NyctStopTimeUpdate(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000001;
            scheduledTrack_ = bs;
            break;
          }
          case 18: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000002;
            actualTrack_ = bs;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctStopTimeUpdate_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctStopTimeUpdate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            sen.khyber.subway.client.proto.NyctStopTimeUpdate.class, sen.khyber.subway.client.proto.NyctStopTimeUpdate.Builder.class);
  }

  private int bitField0_;
  public static final int SCHEDULED_TRACK_FIELD_NUMBER = 1;
  private volatile java.lang.Object scheduledTrack_;
  /**
   * <pre>
   * Provides the planned station arrival track. The following is the Manhattan
   * track configurations:
   * 1: southbound local
   * 2: southbound express
   * 3: northbound express
   * 4: northbound local
   * In the Bronx (except Dyre Ave line)
   * M: bi-directional express (in the AM express to Manhattan, in the PM
   * express away).
   * The Dyre Ave line is configured:
   * 1: southbound
   * 2: northbound
   * 3: bi-directional
   * </pre>
   *
   * <code>optional string scheduled_track = 1;</code>
   */
  public boolean hasScheduledTrack() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Provides the planned station arrival track. The following is the Manhattan
   * track configurations:
   * 1: southbound local
   * 2: southbound express
   * 3: northbound express
   * 4: northbound local
   * In the Bronx (except Dyre Ave line)
   * M: bi-directional express (in the AM express to Manhattan, in the PM
   * express away).
   * The Dyre Ave line is configured:
   * 1: southbound
   * 2: northbound
   * 3: bi-directional
   * </pre>
   *
   * <code>optional string scheduled_track = 1;</code>
   */
  public java.lang.String getScheduledTrack() {
    java.lang.Object ref = scheduledTrack_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        scheduledTrack_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Provides the planned station arrival track. The following is the Manhattan
   * track configurations:
   * 1: southbound local
   * 2: southbound express
   * 3: northbound express
   * 4: northbound local
   * In the Bronx (except Dyre Ave line)
   * M: bi-directional express (in the AM express to Manhattan, in the PM
   * express away).
   * The Dyre Ave line is configured:
   * 1: southbound
   * 2: northbound
   * 3: bi-directional
   * </pre>
   *
   * <code>optional string scheduled_track = 1;</code>
   */
  public com.google.protobuf.ByteString
      getScheduledTrackBytes() {
    java.lang.Object ref = scheduledTrack_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      scheduledTrack_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ACTUAL_TRACK_FIELD_NUMBER = 2;
  private volatile java.lang.Object actualTrack_;
  /**
   * <pre>
   * This is the actual track that the train is operating on and can be used to
   * determine if a train is operating according to its current schedule
   * (plan).
   * The actual track is known only shortly before the train reaches a station,
   * typically not before it leaves the previous station. Therefore, the NYCT
   * feed sets this field only for the first station of the remaining trip.
   * Different actual and scheduled track is the result of manually rerouting a
   * train off it scheduled path.  When this occurs, prediction data may become
   * unreliable since the train is no longer operating in accordance to its
   * schedule.  The rules engine for the 'countdown' clocks will remove this
   * train from all schedule stations.
   * </pre>
   *
   * <code>optional string actual_track = 2;</code>
   */
  public boolean hasActualTrack() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * This is the actual track that the train is operating on and can be used to
   * determine if a train is operating according to its current schedule
   * (plan).
   * The actual track is known only shortly before the train reaches a station,
   * typically not before it leaves the previous station. Therefore, the NYCT
   * feed sets this field only for the first station of the remaining trip.
   * Different actual and scheduled track is the result of manually rerouting a
   * train off it scheduled path.  When this occurs, prediction data may become
   * unreliable since the train is no longer operating in accordance to its
   * schedule.  The rules engine for the 'countdown' clocks will remove this
   * train from all schedule stations.
   * </pre>
   *
   * <code>optional string actual_track = 2;</code>
   */
  public java.lang.String getActualTrack() {
    java.lang.Object ref = actualTrack_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        actualTrack_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * This is the actual track that the train is operating on and can be used to
   * determine if a train is operating according to its current schedule
   * (plan).
   * The actual track is known only shortly before the train reaches a station,
   * typically not before it leaves the previous station. Therefore, the NYCT
   * feed sets this field only for the first station of the remaining trip.
   * Different actual and scheduled track is the result of manually rerouting a
   * train off it scheduled path.  When this occurs, prediction data may become
   * unreliable since the train is no longer operating in accordance to its
   * schedule.  The rules engine for the 'countdown' clocks will remove this
   * train from all schedule stations.
   * </pre>
   *
   * <code>optional string actual_track = 2;</code>
   */
  public com.google.protobuf.ByteString
      getActualTrackBytes() {
    java.lang.Object ref = actualTrack_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      actualTrack_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, scheduledTrack_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, actualTrack_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, scheduledTrack_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, actualTrack_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof sen.khyber.subway.client.proto.NyctStopTimeUpdate)) {
      return super.equals(obj);
    }
    sen.khyber.subway.client.proto.NyctStopTimeUpdate other = (sen.khyber.subway.client.proto.NyctStopTimeUpdate) obj;

    boolean result = true;
    result = result && (hasScheduledTrack() == other.hasScheduledTrack());
    if (hasScheduledTrack()) {
      result = result && getScheduledTrack()
          .equals(other.getScheduledTrack());
    }
    result = result && (hasActualTrack() == other.hasActualTrack());
    if (hasActualTrack()) {
      result = result && getActualTrack()
          .equals(other.getActualTrack());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasScheduledTrack()) {
      hash = (37 * hash) + SCHEDULED_TRACK_FIELD_NUMBER;
      hash = (53 * hash) + getScheduledTrack().hashCode();
    }
    if (hasActualTrack()) {
      hash = (37 * hash) + ACTUAL_TRACK_FIELD_NUMBER;
      hash = (53 * hash) + getActualTrack().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(sen.khyber.subway.client.proto.NyctStopTimeUpdate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * NYCT Subway extensions for the stop time update
   * </pre>
   *
   * Protobuf type {@code NyctStopTimeUpdate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:NyctStopTimeUpdate)
      sen.khyber.subway.client.proto.NyctStopTimeUpdateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctStopTimeUpdate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctStopTimeUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              sen.khyber.subway.client.proto.NyctStopTimeUpdate.class, sen.khyber.subway.client.proto.NyctStopTimeUpdate.Builder.class);
    }

    // Construct using sen.khyber.subway.client.proto.NyctStopTimeUpdate.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      scheduledTrack_ = "";
      bitField0_ = (bitField0_ & ~0x00000001);
      actualTrack_ = "";
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctStopTimeUpdate_descriptor;
    }

    public sen.khyber.subway.client.proto.NyctStopTimeUpdate getDefaultInstanceForType() {
      return sen.khyber.subway.client.proto.NyctStopTimeUpdate.getDefaultInstance();
    }

    public sen.khyber.subway.client.proto.NyctStopTimeUpdate build() {
      sen.khyber.subway.client.proto.NyctStopTimeUpdate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public sen.khyber.subway.client.proto.NyctStopTimeUpdate buildPartial() {
      sen.khyber.subway.client.proto.NyctStopTimeUpdate result = new sen.khyber.subway.client.proto.NyctStopTimeUpdate(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.scheduledTrack_ = scheduledTrack_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.actualTrack_ = actualTrack_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof sen.khyber.subway.client.proto.NyctStopTimeUpdate) {
        return mergeFrom((sen.khyber.subway.client.proto.NyctStopTimeUpdate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(sen.khyber.subway.client.proto.NyctStopTimeUpdate other) {
      if (other == sen.khyber.subway.client.proto.NyctStopTimeUpdate.getDefaultInstance()) return this;
      if (other.hasScheduledTrack()) {
        bitField0_ |= 0x00000001;
        scheduledTrack_ = other.scheduledTrack_;
        onChanged();
      }
      if (other.hasActualTrack()) {
        bitField0_ |= 0x00000002;
        actualTrack_ = other.actualTrack_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      sen.khyber.subway.client.proto.NyctStopTimeUpdate parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (sen.khyber.subway.client.proto.NyctStopTimeUpdate) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object scheduledTrack_ = "";
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     *
     * <code>optional string scheduled_track = 1;</code>
     */
    public boolean hasScheduledTrack() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     *
     * <code>optional string scheduled_track = 1;</code>
     */
    public java.lang.String getScheduledTrack() {
      java.lang.Object ref = scheduledTrack_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          scheduledTrack_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     *
     * <code>optional string scheduled_track = 1;</code>
     */
    public com.google.protobuf.ByteString
        getScheduledTrackBytes() {
      java.lang.Object ref = scheduledTrack_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        scheduledTrack_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     *
     * <code>optional string scheduled_track = 1;</code>
     */
    public Builder setScheduledTrack(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      scheduledTrack_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     *
     * <code>optional string scheduled_track = 1;</code>
     */
    public Builder clearScheduledTrack() {
      bitField0_ = (bitField0_ & ~0x00000001);
      scheduledTrack_ = getDefaultInstance().getScheduledTrack();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     *
     * <code>optional string scheduled_track = 1;</code>
     */
    public Builder setScheduledTrackBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      scheduledTrack_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object actualTrack_ = "";
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     *
     * <code>optional string actual_track = 2;</code>
     */
    public boolean hasActualTrack() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     *
     * <code>optional string actual_track = 2;</code>
     */
    public java.lang.String getActualTrack() {
      java.lang.Object ref = actualTrack_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          actualTrack_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     *
     * <code>optional string actual_track = 2;</code>
     */
    public com.google.protobuf.ByteString
        getActualTrackBytes() {
      java.lang.Object ref = actualTrack_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        actualTrack_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     *
     * <code>optional string actual_track = 2;</code>
     */
    public Builder setActualTrack(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      actualTrack_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     *
     * <code>optional string actual_track = 2;</code>
     */
    public Builder clearActualTrack() {
      bitField0_ = (bitField0_ & ~0x00000002);
      actualTrack_ = getDefaultInstance().getActualTrack();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     *
     * <code>optional string actual_track = 2;</code>
     */
    public Builder setActualTrackBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      actualTrack_ = value;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:NyctStopTimeUpdate)
  }

  // @@protoc_insertion_point(class_scope:NyctStopTimeUpdate)
  private static final sen.khyber.subway.client.proto.NyctStopTimeUpdate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new sen.khyber.subway.client.proto.NyctStopTimeUpdate();
  }

  public static sen.khyber.subway.client.proto.NyctStopTimeUpdate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<NyctStopTimeUpdate>
      PARSER = new com.google.protobuf.AbstractParser<NyctStopTimeUpdate>() {
    public NyctStopTimeUpdate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new NyctStopTimeUpdate(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NyctStopTimeUpdate> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NyctStopTimeUpdate> getParserForType() {
    return PARSER;
  }

  public sen.khyber.subway.client.proto.NyctStopTimeUpdate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

