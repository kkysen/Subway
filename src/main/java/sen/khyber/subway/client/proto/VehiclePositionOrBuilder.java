// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.subway.client.proto;

public interface VehiclePositionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:transit_realtime.VehiclePosition)
    com.google.protobuf.GeneratedMessageV3.
        ExtendableMessageOrBuilder<VehiclePosition> {

  /**
   * <pre>
   * The Trip that this vehicle is serving.
   * Can be empty or partial if the vehicle can not be identified with a given
   * trip instance.
   * </pre>
   *
   * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
   */
  boolean hasTrip();
  /**
   * <pre>
   * The Trip that this vehicle is serving.
   * Can be empty or partial if the vehicle can not be identified with a given
   * trip instance.
   * </pre>
   *
   * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
   */
  sen.khyber.subway.client.proto.TripDescriptor getTrip();
  /**
   * <pre>
   * The Trip that this vehicle is serving.
   * Can be empty or partial if the vehicle can not be identified with a given
   * trip instance.
   * </pre>
   *
   * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
   */
  sen.khyber.subway.client.proto.TripDescriptorOrBuilder getTripOrBuilder();

  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
   */
  boolean hasVehicle();
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
   */
  sen.khyber.subway.client.proto.VehicleDescriptor getVehicle();
  /**
   * <pre>
   * Additional information on the vehicle that is serving this trip.
   * </pre>
   *
   * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
   */
  sen.khyber.subway.client.proto.VehicleDescriptorOrBuilder getVehicleOrBuilder();

  /**
   * <pre>
   * Current position of this vehicle.
   * </pre>
   *
   * <code>optional .transit_realtime.Position position = 2;</code>
   */
  boolean hasPosition();
  /**
   * <pre>
   * Current position of this vehicle.
   * </pre>
   *
   * <code>optional .transit_realtime.Position position = 2;</code>
   */
  sen.khyber.subway.client.proto.Position getPosition();
  /**
   * <pre>
   * Current position of this vehicle.
   * </pre>
   *
   * <code>optional .transit_realtime.Position position = 2;</code>
   */
  sen.khyber.subway.client.proto.PositionOrBuilder getPositionOrBuilder();

  /**
   * <pre>
   * The stop sequence index of the current stop. The meaning of
   * current_stop_sequence (i.e., the stop that it refers to) is determined by
   * current_status.
   * If current_status is missing IN_TRANSIT_TO is assumed.
   * </pre>
   *
   * <code>optional uint32 current_stop_sequence = 3;</code>
   */
  boolean hasCurrentStopSequence();
  /**
   * <pre>
   * The stop sequence index of the current stop. The meaning of
   * current_stop_sequence (i.e., the stop that it refers to) is determined by
   * current_status.
   * If current_status is missing IN_TRANSIT_TO is assumed.
   * </pre>
   *
   * <code>optional uint32 current_stop_sequence = 3;</code>
   */
  int getCurrentStopSequence();

  /**
   * <pre>
   * Identifies the current stop. The value must be the same as in stops.txt in
   * the corresponding GTFS feed.
   * </pre>
   *
   * <code>optional string stop_id = 7;</code>
   */
  boolean hasStopId();
  /**
   * <pre>
   * Identifies the current stop. The value must be the same as in stops.txt in
   * the corresponding GTFS feed.
   * </pre>
   *
   * <code>optional string stop_id = 7;</code>
   */
  java.lang.String getStopId();
  /**
   * <pre>
   * Identifies the current stop. The value must be the same as in stops.txt in
   * the corresponding GTFS feed.
   * </pre>
   *
   * <code>optional string stop_id = 7;</code>
   */
  com.google.protobuf.ByteString
      getStopIdBytes();

  /**
   * <pre>
   * The exact status of the vehicle with respect to the current stop.
   * Ignored if current_stop_sequence is missing.
   * </pre>
   *
   * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
   */
  boolean hasCurrentStatus();
  /**
   * <pre>
   * The exact status of the vehicle with respect to the current stop.
   * Ignored if current_stop_sequence is missing.
   * </pre>
   *
   * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];</code>
   */
  sen.khyber.subway.client.proto.VehiclePosition.VehicleStopStatus getCurrentStatus();

  /**
   * <pre>
   * Moment at which the vehicle's position was measured. In POSIX time
   * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 5;</code>
   */
  boolean hasTimestamp();
  /**
   * <pre>
   * Moment at which the vehicle's position was measured. In POSIX time
   * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
   * </pre>
   *
   * <code>optional uint64 timestamp = 5;</code>
   */
  long getTimestamp();

  /**
   * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
   */
  boolean hasCongestionLevel();
  /**
   * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
   */
  sen.khyber.subway.client.proto.VehiclePosition.CongestionLevel getCongestionLevel();
}
