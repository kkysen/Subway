// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

package sen.khyber.subway.client.proto;

/**
 * <pre>
 * NYCT Subway extensions for the feed header
 * </pre>
 *
 * Protobuf type {@code NyctFeedHeader}
 */
public  final class NyctFeedHeader extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:NyctFeedHeader)
    NyctFeedHeaderOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NyctFeedHeader.newBuilder() to construct.
  private NyctFeedHeader(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NyctFeedHeader() {
    nyctSubwayVersion_ = "";
    tripReplacementPeriod_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NyctFeedHeader(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000001;
            nyctSubwayVersion_ = bs;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              tripReplacementPeriod_ = new java.util.ArrayList<sen.khyber.subway.client.proto.TripReplacementPeriod>();
              mutable_bitField0_ |= 0x00000002;
            }
            tripReplacementPeriod_.add(
                input.readMessage(sen.khyber.subway.client.proto.TripReplacementPeriod.PARSER, extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        tripReplacementPeriod_ = java.util.Collections.unmodifiableList(tripReplacementPeriod_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctFeedHeader_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctFeedHeader_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            sen.khyber.subway.client.proto.NyctFeedHeader.class, sen.khyber.subway.client.proto.NyctFeedHeader.Builder.class);
  }

  private int bitField0_;
  public static final int NYCT_SUBWAY_VERSION_FIELD_NUMBER = 1;
  private volatile java.lang.Object nyctSubwayVersion_;
  /**
   * <pre>
   * Version of the NYCT Subway extensions
   * The current version is 1.0
   * </pre>
   *
   * <code>required string nyct_subway_version = 1;</code>
   */
  public boolean hasNyctSubwayVersion() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Version of the NYCT Subway extensions
   * The current version is 1.0
   * </pre>
   *
   * <code>required string nyct_subway_version = 1;</code>
   */
  public java.lang.String getNyctSubwayVersion() {
    java.lang.Object ref = nyctSubwayVersion_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        nyctSubwayVersion_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Version of the NYCT Subway extensions
   * The current version is 1.0
   * </pre>
   *
   * <code>required string nyct_subway_version = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNyctSubwayVersionBytes() {
    java.lang.Object ref = nyctSubwayVersion_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      nyctSubwayVersion_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRIP_REPLACEMENT_PERIOD_FIELD_NUMBER = 2;
  private java.util.List<sen.khyber.subway.client.proto.TripReplacementPeriod> tripReplacementPeriod_;
  /**
   * <pre>
   * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
   * trip within the trip_replacement_period.
   * This feed is a full dataset, it contains all trips starting
   * in the trip_replacement_period. If a trip from the static GTFS is not
   * found in the GTFS-realtime feed, it should be considered as cancelled.
   * The replacement period can be different for each route, so here is
   * a list of the routes where the trips in the feed replace all
   * scheduled trips within the replacement period.
   * </pre>
   *
   * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
   */
  public java.util.List<sen.khyber.subway.client.proto.TripReplacementPeriod> getTripReplacementPeriodList() {
    return tripReplacementPeriod_;
  }
  /**
   * <pre>
   * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
   * trip within the trip_replacement_period.
   * This feed is a full dataset, it contains all trips starting
   * in the trip_replacement_period. If a trip from the static GTFS is not
   * found in the GTFS-realtime feed, it should be considered as cancelled.
   * The replacement period can be different for each route, so here is
   * a list of the routes where the trips in the feed replace all
   * scheduled trips within the replacement period.
   * </pre>
   *
   * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
   */
  public java.util.List<? extends sen.khyber.subway.client.proto.TripReplacementPeriodOrBuilder> 
      getTripReplacementPeriodOrBuilderList() {
    return tripReplacementPeriod_;
  }
  /**
   * <pre>
   * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
   * trip within the trip_replacement_period.
   * This feed is a full dataset, it contains all trips starting
   * in the trip_replacement_period. If a trip from the static GTFS is not
   * found in the GTFS-realtime feed, it should be considered as cancelled.
   * The replacement period can be different for each route, so here is
   * a list of the routes where the trips in the feed replace all
   * scheduled trips within the replacement period.
   * </pre>
   *
   * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
   */
  public int getTripReplacementPeriodCount() {
    return tripReplacementPeriod_.size();
  }
  /**
   * <pre>
   * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
   * trip within the trip_replacement_period.
   * This feed is a full dataset, it contains all trips starting
   * in the trip_replacement_period. If a trip from the static GTFS is not
   * found in the GTFS-realtime feed, it should be considered as cancelled.
   * The replacement period can be different for each route, so here is
   * a list of the routes where the trips in the feed replace all
   * scheduled trips within the replacement period.
   * </pre>
   *
   * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
   */
  public sen.khyber.subway.client.proto.TripReplacementPeriod getTripReplacementPeriod(int index) {
    return tripReplacementPeriod_.get(index);
  }
  /**
   * <pre>
   * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
   * trip within the trip_replacement_period.
   * This feed is a full dataset, it contains all trips starting
   * in the trip_replacement_period. If a trip from the static GTFS is not
   * found in the GTFS-realtime feed, it should be considered as cancelled.
   * The replacement period can be different for each route, so here is
   * a list of the routes where the trips in the feed replace all
   * scheduled trips within the replacement period.
   * </pre>
   *
   * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
   */
  public sen.khyber.subway.client.proto.TripReplacementPeriodOrBuilder getTripReplacementPeriodOrBuilder(
      int index) {
    return tripReplacementPeriod_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasNyctSubwayVersion()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nyctSubwayVersion_);
    }
    for (int i = 0; i < tripReplacementPeriod_.size(); i++) {
      output.writeMessage(2, tripReplacementPeriod_.get(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, nyctSubwayVersion_);
    }
    for (int i = 0; i < tripReplacementPeriod_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, tripReplacementPeriod_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof sen.khyber.subway.client.proto.NyctFeedHeader)) {
      return super.equals(obj);
    }
    sen.khyber.subway.client.proto.NyctFeedHeader other = (sen.khyber.subway.client.proto.NyctFeedHeader) obj;

    boolean result = true;
    result = result && (hasNyctSubwayVersion() == other.hasNyctSubwayVersion());
    if (hasNyctSubwayVersion()) {
      result = result && getNyctSubwayVersion()
          .equals(other.getNyctSubwayVersion());
    }
    result = result && getTripReplacementPeriodList()
        .equals(other.getTripReplacementPeriodList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNyctSubwayVersion()) {
      hash = (37 * hash) + NYCT_SUBWAY_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getNyctSubwayVersion().hashCode();
    }
    if (getTripReplacementPeriodCount() > 0) {
      hash = (37 * hash) + TRIP_REPLACEMENT_PERIOD_FIELD_NUMBER;
      hash = (53 * hash) + getTripReplacementPeriodList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctFeedHeader parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(sen.khyber.subway.client.proto.NyctFeedHeader prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * NYCT Subway extensions for the feed header
   * </pre>
   *
   * Protobuf type {@code NyctFeedHeader}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:NyctFeedHeader)
      sen.khyber.subway.client.proto.NyctFeedHeaderOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctFeedHeader_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctFeedHeader_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              sen.khyber.subway.client.proto.NyctFeedHeader.class, sen.khyber.subway.client.proto.NyctFeedHeader.Builder.class);
    }

    // Construct using sen.khyber.subway.client.proto.NyctFeedHeader.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTripReplacementPeriodFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      nyctSubwayVersion_ = "";
      bitField0_ = (bitField0_ & ~0x00000001);
      if (tripReplacementPeriodBuilder_ == null) {
        tripReplacementPeriod_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        tripReplacementPeriodBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctFeedHeader_descriptor;
    }

    public sen.khyber.subway.client.proto.NyctFeedHeader getDefaultInstanceForType() {
      return sen.khyber.subway.client.proto.NyctFeedHeader.getDefaultInstance();
    }

    public sen.khyber.subway.client.proto.NyctFeedHeader build() {
      sen.khyber.subway.client.proto.NyctFeedHeader result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public sen.khyber.subway.client.proto.NyctFeedHeader buildPartial() {
      sen.khyber.subway.client.proto.NyctFeedHeader result = new sen.khyber.subway.client.proto.NyctFeedHeader(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.nyctSubwayVersion_ = nyctSubwayVersion_;
      if (tripReplacementPeriodBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          tripReplacementPeriod_ = java.util.Collections.unmodifiableList(tripReplacementPeriod_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.tripReplacementPeriod_ = tripReplacementPeriod_;
      } else {
        result.tripReplacementPeriod_ = tripReplacementPeriodBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof sen.khyber.subway.client.proto.NyctFeedHeader) {
        return mergeFrom((sen.khyber.subway.client.proto.NyctFeedHeader)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(sen.khyber.subway.client.proto.NyctFeedHeader other) {
      if (other == sen.khyber.subway.client.proto.NyctFeedHeader.getDefaultInstance()) return this;
      if (other.hasNyctSubwayVersion()) {
        bitField0_ |= 0x00000001;
        nyctSubwayVersion_ = other.nyctSubwayVersion_;
        onChanged();
      }
      if (tripReplacementPeriodBuilder_ == null) {
        if (!other.tripReplacementPeriod_.isEmpty()) {
          if (tripReplacementPeriod_.isEmpty()) {
            tripReplacementPeriod_ = other.tripReplacementPeriod_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTripReplacementPeriodIsMutable();
            tripReplacementPeriod_.addAll(other.tripReplacementPeriod_);
          }
          onChanged();
        }
      } else {
        if (!other.tripReplacementPeriod_.isEmpty()) {
          if (tripReplacementPeriodBuilder_.isEmpty()) {
            tripReplacementPeriodBuilder_.dispose();
            tripReplacementPeriodBuilder_ = null;
            tripReplacementPeriod_ = other.tripReplacementPeriod_;
            bitField0_ = (bitField0_ & ~0x00000002);
            tripReplacementPeriodBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTripReplacementPeriodFieldBuilder() : null;
          } else {
            tripReplacementPeriodBuilder_.addAllMessages(other.tripReplacementPeriod_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      if (!hasNyctSubwayVersion()) {
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      sen.khyber.subway.client.proto.NyctFeedHeader parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (sen.khyber.subway.client.proto.NyctFeedHeader) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object nyctSubwayVersion_ = "";
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     *
     * <code>required string nyct_subway_version = 1;</code>
     */
    public boolean hasNyctSubwayVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     *
     * <code>required string nyct_subway_version = 1;</code>
     */
    public java.lang.String getNyctSubwayVersion() {
      java.lang.Object ref = nyctSubwayVersion_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          nyctSubwayVersion_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     *
     * <code>required string nyct_subway_version = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNyctSubwayVersionBytes() {
      java.lang.Object ref = nyctSubwayVersion_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nyctSubwayVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     *
     * <code>required string nyct_subway_version = 1;</code>
     */
    public Builder setNyctSubwayVersion(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      nyctSubwayVersion_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     *
     * <code>required string nyct_subway_version = 1;</code>
     */
    public Builder clearNyctSubwayVersion() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nyctSubwayVersion_ = getDefaultInstance().getNyctSubwayVersion();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     *
     * <code>required string nyct_subway_version = 1;</code>
     */
    public Builder setNyctSubwayVersionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      nyctSubwayVersion_ = value;
      onChanged();
      return this;
    }

    private java.util.List<sen.khyber.subway.client.proto.TripReplacementPeriod> tripReplacementPeriod_ =
      java.util.Collections.emptyList();
    private void ensureTripReplacementPeriodIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        tripReplacementPeriod_ = new java.util.ArrayList<sen.khyber.subway.client.proto.TripReplacementPeriod>(tripReplacementPeriod_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        sen.khyber.subway.client.proto.TripReplacementPeriod, sen.khyber.subway.client.proto.TripReplacementPeriod.Builder, sen.khyber.subway.client.proto.TripReplacementPeriodOrBuilder> tripReplacementPeriodBuilder_;

    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public java.util.List<sen.khyber.subway.client.proto.TripReplacementPeriod> getTripReplacementPeriodList() {
      if (tripReplacementPeriodBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tripReplacementPeriod_);
      } else {
        return tripReplacementPeriodBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public int getTripReplacementPeriodCount() {
      if (tripReplacementPeriodBuilder_ == null) {
        return tripReplacementPeriod_.size();
      } else {
        return tripReplacementPeriodBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripReplacementPeriod getTripReplacementPeriod(int index) {
      if (tripReplacementPeriodBuilder_ == null) {
        return tripReplacementPeriod_.get(index);
      } else {
        return tripReplacementPeriodBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder setTripReplacementPeriod(
        int index, sen.khyber.subway.client.proto.TripReplacementPeriod value) {
      if (tripReplacementPeriodBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTripReplacementPeriodIsMutable();
        tripReplacementPeriod_.set(index, value);
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder setTripReplacementPeriod(
        int index, sen.khyber.subway.client.proto.TripReplacementPeriod.Builder builderForValue) {
      if (tripReplacementPeriodBuilder_ == null) {
        ensureTripReplacementPeriodIsMutable();
        tripReplacementPeriod_.set(index, builderForValue.build());
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder addTripReplacementPeriod(sen.khyber.subway.client.proto.TripReplacementPeriod value) {
      if (tripReplacementPeriodBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTripReplacementPeriodIsMutable();
        tripReplacementPeriod_.add(value);
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder addTripReplacementPeriod(
        int index, sen.khyber.subway.client.proto.TripReplacementPeriod value) {
      if (tripReplacementPeriodBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTripReplacementPeriodIsMutable();
        tripReplacementPeriod_.add(index, value);
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder addTripReplacementPeriod(
        sen.khyber.subway.client.proto.TripReplacementPeriod.Builder builderForValue) {
      if (tripReplacementPeriodBuilder_ == null) {
        ensureTripReplacementPeriodIsMutable();
        tripReplacementPeriod_.add(builderForValue.build());
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder addTripReplacementPeriod(
        int index, sen.khyber.subway.client.proto.TripReplacementPeriod.Builder builderForValue) {
      if (tripReplacementPeriodBuilder_ == null) {
        ensureTripReplacementPeriodIsMutable();
        tripReplacementPeriod_.add(index, builderForValue.build());
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder addAllTripReplacementPeriod(
        java.lang.Iterable<? extends sen.khyber.subway.client.proto.TripReplacementPeriod> values) {
      if (tripReplacementPeriodBuilder_ == null) {
        ensureTripReplacementPeriodIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tripReplacementPeriod_);
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder clearTripReplacementPeriod() {
      if (tripReplacementPeriodBuilder_ == null) {
        tripReplacementPeriod_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public Builder removeTripReplacementPeriod(int index) {
      if (tripReplacementPeriodBuilder_ == null) {
        ensureTripReplacementPeriodIsMutable();
        tripReplacementPeriod_.remove(index);
        onChanged();
      } else {
        tripReplacementPeriodBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripReplacementPeriod.Builder getTripReplacementPeriodBuilder(
        int index) {
      return getTripReplacementPeriodFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripReplacementPeriodOrBuilder getTripReplacementPeriodOrBuilder(
        int index) {
      if (tripReplacementPeriodBuilder_ == null) {
        return tripReplacementPeriod_.get(index);  } else {
        return tripReplacementPeriodBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public java.util.List<? extends sen.khyber.subway.client.proto.TripReplacementPeriodOrBuilder> 
         getTripReplacementPeriodOrBuilderList() {
      if (tripReplacementPeriodBuilder_ != null) {
        return tripReplacementPeriodBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tripReplacementPeriod_);
      }
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripReplacementPeriod.Builder addTripReplacementPeriodBuilder() {
      return getTripReplacementPeriodFieldBuilder().addBuilder(
          sen.khyber.subway.client.proto.TripReplacementPeriod.getDefaultInstance());
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public sen.khyber.subway.client.proto.TripReplacementPeriod.Builder addTripReplacementPeriodBuilder(
        int index) {
      return getTripReplacementPeriodFieldBuilder().addBuilder(
          index, sen.khyber.subway.client.proto.TripReplacementPeriod.getDefaultInstance());
    }
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     *
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    public java.util.List<sen.khyber.subway.client.proto.TripReplacementPeriod.Builder> 
         getTripReplacementPeriodBuilderList() {
      return getTripReplacementPeriodFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        sen.khyber.subway.client.proto.TripReplacementPeriod, sen.khyber.subway.client.proto.TripReplacementPeriod.Builder, sen.khyber.subway.client.proto.TripReplacementPeriodOrBuilder> 
        getTripReplacementPeriodFieldBuilder() {
      if (tripReplacementPeriodBuilder_ == null) {
        tripReplacementPeriodBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            sen.khyber.subway.client.proto.TripReplacementPeriod, sen.khyber.subway.client.proto.TripReplacementPeriod.Builder, sen.khyber.subway.client.proto.TripReplacementPeriodOrBuilder>(
                tripReplacementPeriod_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        tripReplacementPeriod_ = null;
      }
      return tripReplacementPeriodBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:NyctFeedHeader)
  }

  // @@protoc_insertion_point(class_scope:NyctFeedHeader)
  private static final sen.khyber.subway.client.proto.NyctFeedHeader DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new sen.khyber.subway.client.proto.NyctFeedHeader();
  }

  public static sen.khyber.subway.client.proto.NyctFeedHeader getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<NyctFeedHeader>
      PARSER = new com.google.protobuf.AbstractParser<NyctFeedHeader>() {
    public NyctFeedHeader parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new NyctFeedHeader(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NyctFeedHeader> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NyctFeedHeader> getParserForType() {
    return PARSER;
  }

  public sen.khyber.subway.client.proto.NyctFeedHeader getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

