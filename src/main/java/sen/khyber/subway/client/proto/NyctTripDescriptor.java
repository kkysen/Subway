// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

package sen.khyber.subway.client.proto;

/**
 * <pre>
 * NYCT Subway extensions for the trip descriptor
 * </pre>
 *
 * Protobuf type {@code NyctTripDescriptor}
 */
public  final class NyctTripDescriptor extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:NyctTripDescriptor)
    NyctTripDescriptorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NyctTripDescriptor.newBuilder() to construct.
  private NyctTripDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NyctTripDescriptor() {
    trainId_ = "";
    isAssigned_ = false;
    direction_ = 1;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NyctTripDescriptor(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000001;
            trainId_ = bs;
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            isAssigned_ = input.readBool();
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            sen.khyber.subway.client.proto.NyctTripDescriptor.Direction value = sen.khyber.subway.client.proto.NyctTripDescriptor.Direction.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(3, rawValue);
            } else {
              bitField0_ |= 0x00000004;
              direction_ = rawValue;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctTripDescriptor_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctTripDescriptor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            sen.khyber.subway.client.proto.NyctTripDescriptor.class, sen.khyber.subway.client.proto.NyctTripDescriptor.Builder.class);
  }

  /**
   * <pre>
   * The direction the train is moving.
   * </pre>
   *
   * Protobuf enum {@code NyctTripDescriptor.Direction}
   */
  public enum Direction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORTH = 1;</code>
     */
    NORTH(1),
    /**
     * <code>EAST = 2;</code>
     */
    EAST(2),
    /**
     * <code>SOUTH = 3;</code>
     */
    SOUTH(3),
    /**
     * <code>WEST = 4;</code>
     */
    WEST(4),
    ;

    /**
     * <code>NORTH = 1;</code>
     */
    public static final int NORTH_VALUE = 1;
    /**
     * <code>EAST = 2;</code>
     */
    public static final int EAST_VALUE = 2;
    /**
     * <code>SOUTH = 3;</code>
     */
    public static final int SOUTH_VALUE = 3;
    /**
     * <code>WEST = 4;</code>
     */
    public static final int WEST_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Direction valueOf(int value) {
      return forNumber(value);
    }

    public static Direction forNumber(int value) {
      switch (value) {
        case 1: return NORTH;
        case 2: return EAST;
        case 3: return SOUTH;
        case 4: return WEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Direction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Direction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
            public Direction findValueByNumber(int number) {
              return Direction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return sen.khyber.subway.client.proto.NyctTripDescriptor.getDescriptor().getEnumTypes().get(0);
    }

    private static final Direction[] VALUES = values();

    public static Direction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Direction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NyctTripDescriptor.Direction)
  }

  private int bitField0_;
  public static final int TRAIN_ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object trainId_;
  /**
   * <pre>
   * The nyct_train_id is meant for internal use only. It provides an
   * easy way to associated GTFS-realtime trip identifiers with NYCT rail
   * operations identifier
   * The ATS office system assigns unique train identification (Train ID) to
   * each train operating within or ready to enter the mainline of the
   * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
   * as follows:
   * The first character represents the trip type designator. 0 identifies a
   * scheduled revenue trip. Other revenue trip values that are a result of a
   * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
   * train] also known as shortly lined service.
   * The second character 6 represents the trip line i.e. number 6 train The
   * third set of characters identify the decoded origin time. The last
   * character may be blank "on the whole minute" or + "30 seconds"
   * Note: Origin times will not change when there is a trip type change.  This
   * is followed by a three character "Origin Location" / "Destination
   * Location"
   * </pre>
   *
   * <code>optional string train_id = 1;</code>
   */
  public boolean hasTrainId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The nyct_train_id is meant for internal use only. It provides an
   * easy way to associated GTFS-realtime trip identifiers with NYCT rail
   * operations identifier
   * The ATS office system assigns unique train identification (Train ID) to
   * each train operating within or ready to enter the mainline of the
   * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
   * as follows:
   * The first character represents the trip type designator. 0 identifies a
   * scheduled revenue trip. Other revenue trip values that are a result of a
   * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
   * train] also known as shortly lined service.
   * The second character 6 represents the trip line i.e. number 6 train The
   * third set of characters identify the decoded origin time. The last
   * character may be blank "on the whole minute" or + "30 seconds"
   * Note: Origin times will not change when there is a trip type change.  This
   * is followed by a three character "Origin Location" / "Destination
   * Location"
   * </pre>
   *
   * <code>optional string train_id = 1;</code>
   */
  public java.lang.String getTrainId() {
    java.lang.Object ref = trainId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        trainId_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The nyct_train_id is meant for internal use only. It provides an
   * easy way to associated GTFS-realtime trip identifiers with NYCT rail
   * operations identifier
   * The ATS office system assigns unique train identification (Train ID) to
   * each train operating within or ready to enter the mainline of the
   * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
   * as follows:
   * The first character represents the trip type designator. 0 identifies a
   * scheduled revenue trip. Other revenue trip values that are a result of a
   * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
   * train] also known as shortly lined service.
   * The second character 6 represents the trip line i.e. number 6 train The
   * third set of characters identify the decoded origin time. The last
   * character may be blank "on the whole minute" or + "30 seconds"
   * Note: Origin times will not change when there is a trip type change.  This
   * is followed by a three character "Origin Location" / "Destination
   * Location"
   * </pre>
   *
   * <code>optional string train_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getTrainIdBytes() {
    java.lang.Object ref = trainId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      trainId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IS_ASSIGNED_FIELD_NUMBER = 2;
  private boolean isAssigned_;
  /**
   * <pre>
   * This trip has been assigned to a physical train. If true, this trip is
   * already underway or most likely will depart shortly.
   * Train Assignment is a function of the Automatic Train Supervision (ATS)
   * office system used by NYCT Rail Operations to monitor and track train
   * movements. ATS provides the ability to "assign" the nyct_train_id
   * attribute when a physical train is at its origin terminal. These assigned
   * trips have the is_assigned field set in the TripDescriptor.
   * When a train is at a terminal but has not been given a work program it is
   * declared unassigned and is tagged as such. Unassigned trains can be moved
   * to a storage location or assigned a nyct_train_id when a determination for
   * service is made.
   * </pre>
   *
   * <code>optional bool is_assigned = 2;</code>
   */
  public boolean hasIsAssigned() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * This trip has been assigned to a physical train. If true, this trip is
   * already underway or most likely will depart shortly.
   * Train Assignment is a function of the Automatic Train Supervision (ATS)
   * office system used by NYCT Rail Operations to monitor and track train
   * movements. ATS provides the ability to "assign" the nyct_train_id
   * attribute when a physical train is at its origin terminal. These assigned
   * trips have the is_assigned field set in the TripDescriptor.
   * When a train is at a terminal but has not been given a work program it is
   * declared unassigned and is tagged as such. Unassigned trains can be moved
   * to a storage location or assigned a nyct_train_id when a determination for
   * service is made.
   * </pre>
   *
   * <code>optional bool is_assigned = 2;</code>
   */
  public boolean getIsAssigned() {
    return isAssigned_;
  }

  public static final int DIRECTION_FIELD_NUMBER = 3;
  private int direction_;
  /**
   * <pre>
   * Uptown and Bronx-bound trains are moving NORTH.
   * Times Square Shuttle to Grand Central is also northbound.
   * Downtown and Brooklyn-bound trains are moving SOUTH.
   * Times Square Shuttle to Times Square is also southbound.
   * EAST and WEST are not used currently.
   * </pre>
   *
   * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
   */
  public boolean hasDirection() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Uptown and Bronx-bound trains are moving NORTH.
   * Times Square Shuttle to Grand Central is also northbound.
   * Downtown and Brooklyn-bound trains are moving SOUTH.
   * Times Square Shuttle to Times Square is also southbound.
   * EAST and WEST are not used currently.
   * </pre>
   *
   * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
   */
  public sen.khyber.subway.client.proto.NyctTripDescriptor.Direction getDirection() {
    sen.khyber.subway.client.proto.NyctTripDescriptor.Direction result = sen.khyber.subway.client.proto.NyctTripDescriptor.Direction.valueOf(direction_);
    return result == null ? sen.khyber.subway.client.proto.NyctTripDescriptor.Direction.NORTH : result;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, trainId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBool(2, isAssigned_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeEnum(3, direction_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, trainId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, isAssigned_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, direction_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof sen.khyber.subway.client.proto.NyctTripDescriptor)) {
      return super.equals(obj);
    }
    sen.khyber.subway.client.proto.NyctTripDescriptor other = (sen.khyber.subway.client.proto.NyctTripDescriptor) obj;

    boolean result = true;
    result = result && (hasTrainId() == other.hasTrainId());
    if (hasTrainId()) {
      result = result && getTrainId()
          .equals(other.getTrainId());
    }
    result = result && (hasIsAssigned() == other.hasIsAssigned());
    if (hasIsAssigned()) {
      result = result && (getIsAssigned()
          == other.getIsAssigned());
    }
    result = result && (hasDirection() == other.hasDirection());
    if (hasDirection()) {
      result = result && direction_ == other.direction_;
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTrainId()) {
      hash = (37 * hash) + TRAIN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTrainId().hashCode();
    }
    if (hasIsAssigned()) {
      hash = (37 * hash) + IS_ASSIGNED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsAssigned());
    }
    if (hasDirection()) {
      hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
      hash = (53 * hash) + direction_;
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static sen.khyber.subway.client.proto.NyctTripDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(sen.khyber.subway.client.proto.NyctTripDescriptor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * NYCT Subway extensions for the trip descriptor
   * </pre>
   *
   * Protobuf type {@code NyctTripDescriptor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:NyctTripDescriptor)
      sen.khyber.subway.client.proto.NyctTripDescriptorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctTripDescriptor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctTripDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              sen.khyber.subway.client.proto.NyctTripDescriptor.class, sen.khyber.subway.client.proto.NyctTripDescriptor.Builder.class);
    }

    // Construct using sen.khyber.subway.client.proto.NyctTripDescriptor.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      trainId_ = "";
      bitField0_ = (bitField0_ & ~0x00000001);
      isAssigned_ = false;
      bitField0_ = (bitField0_ & ~0x00000002);
      direction_ = 1;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return sen.khyber.subway.client.proto.NyctSubway.internal_static_NyctTripDescriptor_descriptor;
    }

    public sen.khyber.subway.client.proto.NyctTripDescriptor getDefaultInstanceForType() {
      return sen.khyber.subway.client.proto.NyctTripDescriptor.getDefaultInstance();
    }

    public sen.khyber.subway.client.proto.NyctTripDescriptor build() {
      sen.khyber.subway.client.proto.NyctTripDescriptor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public sen.khyber.subway.client.proto.NyctTripDescriptor buildPartial() {
      sen.khyber.subway.client.proto.NyctTripDescriptor result = new sen.khyber.subway.client.proto.NyctTripDescriptor(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.trainId_ = trainId_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.isAssigned_ = isAssigned_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.direction_ = direction_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof sen.khyber.subway.client.proto.NyctTripDescriptor) {
        return mergeFrom((sen.khyber.subway.client.proto.NyctTripDescriptor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(sen.khyber.subway.client.proto.NyctTripDescriptor other) {
      if (other == sen.khyber.subway.client.proto.NyctTripDescriptor.getDefaultInstance()) return this;
      if (other.hasTrainId()) {
        bitField0_ |= 0x00000001;
        trainId_ = other.trainId_;
        onChanged();
      }
      if (other.hasIsAssigned()) {
        setIsAssigned(other.getIsAssigned());
      }
      if (other.hasDirection()) {
        setDirection(other.getDirection());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      sen.khyber.subway.client.proto.NyctTripDescriptor parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (sen.khyber.subway.client.proto.NyctTripDescriptor) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object trainId_ = "";
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     *
     * <code>optional string train_id = 1;</code>
     */
    public boolean hasTrainId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     *
     * <code>optional string train_id = 1;</code>
     */
    public java.lang.String getTrainId() {
      java.lang.Object ref = trainId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          trainId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     *
     * <code>optional string train_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTrainIdBytes() {
      java.lang.Object ref = trainId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        trainId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     *
     * <code>optional string train_id = 1;</code>
     */
    public Builder setTrainId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      trainId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     *
     * <code>optional string train_id = 1;</code>
     */
    public Builder clearTrainId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      trainId_ = getDefaultInstance().getTrainId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     *
     * <code>optional string train_id = 1;</code>
     */
    public Builder setTrainIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      trainId_ = value;
      onChanged();
      return this;
    }

    private boolean isAssigned_ ;
    /**
     * <pre>
     * This trip has been assigned to a physical train. If true, this trip is
     * already underway or most likely will depart shortly.
     * Train Assignment is a function of the Automatic Train Supervision (ATS)
     * office system used by NYCT Rail Operations to monitor and track train
     * movements. ATS provides the ability to "assign" the nyct_train_id
     * attribute when a physical train is at its origin terminal. These assigned
     * trips have the is_assigned field set in the TripDescriptor.
     * When a train is at a terminal but has not been given a work program it is
     * declared unassigned and is tagged as such. Unassigned trains can be moved
     * to a storage location or assigned a nyct_train_id when a determination for
     * service is made.
     * </pre>
     *
     * <code>optional bool is_assigned = 2;</code>
     */
    public boolean hasIsAssigned() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * This trip has been assigned to a physical train. If true, this trip is
     * already underway or most likely will depart shortly.
     * Train Assignment is a function of the Automatic Train Supervision (ATS)
     * office system used by NYCT Rail Operations to monitor and track train
     * movements. ATS provides the ability to "assign" the nyct_train_id
     * attribute when a physical train is at its origin terminal. These assigned
     * trips have the is_assigned field set in the TripDescriptor.
     * When a train is at a terminal but has not been given a work program it is
     * declared unassigned and is tagged as such. Unassigned trains can be moved
     * to a storage location or assigned a nyct_train_id when a determination for
     * service is made.
     * </pre>
     *
     * <code>optional bool is_assigned = 2;</code>
     */
    public boolean getIsAssigned() {
      return isAssigned_;
    }
    /**
     * <pre>
     * This trip has been assigned to a physical train. If true, this trip is
     * already underway or most likely will depart shortly.
     * Train Assignment is a function of the Automatic Train Supervision (ATS)
     * office system used by NYCT Rail Operations to monitor and track train
     * movements. ATS provides the ability to "assign" the nyct_train_id
     * attribute when a physical train is at its origin terminal. These assigned
     * trips have the is_assigned field set in the TripDescriptor.
     * When a train is at a terminal but has not been given a work program it is
     * declared unassigned and is tagged as such. Unassigned trains can be moved
     * to a storage location or assigned a nyct_train_id when a determination for
     * service is made.
     * </pre>
     *
     * <code>optional bool is_assigned = 2;</code>
     */
    public Builder setIsAssigned(boolean value) {
      bitField0_ |= 0x00000002;
      isAssigned_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This trip has been assigned to a physical train. If true, this trip is
     * already underway or most likely will depart shortly.
     * Train Assignment is a function of the Automatic Train Supervision (ATS)
     * office system used by NYCT Rail Operations to monitor and track train
     * movements. ATS provides the ability to "assign" the nyct_train_id
     * attribute when a physical train is at its origin terminal. These assigned
     * trips have the is_assigned field set in the TripDescriptor.
     * When a train is at a terminal but has not been given a work program it is
     * declared unassigned and is tagged as such. Unassigned trains can be moved
     * to a storage location or assigned a nyct_train_id when a determination for
     * service is made.
     * </pre>
     *
     * <code>optional bool is_assigned = 2;</code>
     */
    public Builder clearIsAssigned() {
      bitField0_ = (bitField0_ & ~0x00000002);
      isAssigned_ = false;
      onChanged();
      return this;
    }

    private int direction_ = 1;
    /**
     * <pre>
     * Uptown and Bronx-bound trains are moving NORTH.
     * Times Square Shuttle to Grand Central is also northbound.
     * Downtown and Brooklyn-bound trains are moving SOUTH.
     * Times Square Shuttle to Times Square is also southbound.
     * EAST and WEST are not used currently.
     * </pre>
     *
     * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Uptown and Bronx-bound trains are moving NORTH.
     * Times Square Shuttle to Grand Central is also northbound.
     * Downtown and Brooklyn-bound trains are moving SOUTH.
     * Times Square Shuttle to Times Square is also southbound.
     * EAST and WEST are not used currently.
     * </pre>
     *
     * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
     */
    public sen.khyber.subway.client.proto.NyctTripDescriptor.Direction getDirection() {
      sen.khyber.subway.client.proto.NyctTripDescriptor.Direction result = sen.khyber.subway.client.proto.NyctTripDescriptor.Direction.valueOf(direction_);
      return result == null ? sen.khyber.subway.client.proto.NyctTripDescriptor.Direction.NORTH : result;
    }
    /**
     * <pre>
     * Uptown and Bronx-bound trains are moving NORTH.
     * Times Square Shuttle to Grand Central is also northbound.
     * Downtown and Brooklyn-bound trains are moving SOUTH.
     * Times Square Shuttle to Times Square is also southbound.
     * EAST and WEST are not used currently.
     * </pre>
     *
     * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
     */
    public Builder setDirection(sen.khyber.subway.client.proto.NyctTripDescriptor.Direction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      direction_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Uptown and Bronx-bound trains are moving NORTH.
     * Times Square Shuttle to Grand Central is also northbound.
     * Downtown and Brooklyn-bound trains are moving SOUTH.
     * Times Square Shuttle to Times Square is also southbound.
     * EAST and WEST are not used currently.
     * </pre>
     *
     * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
     */
    public Builder clearDirection() {
      bitField0_ = (bitField0_ & ~0x00000004);
      direction_ = 1;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:NyctTripDescriptor)
  }

  // @@protoc_insertion_point(class_scope:NyctTripDescriptor)
  private static final sen.khyber.subway.client.proto.NyctTripDescriptor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new sen.khyber.subway.client.proto.NyctTripDescriptor();
  }

  public static sen.khyber.subway.client.proto.NyctTripDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<NyctTripDescriptor>
      PARSER = new com.google.protobuf.AbstractParser<NyctTripDescriptor>() {
    public NyctTripDescriptor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new NyctTripDescriptor(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NyctTripDescriptor> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NyctTripDescriptor> getParserForType() {
    return PARSER;
  }

  public sen.khyber.subway.client.proto.NyctTripDescriptor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

