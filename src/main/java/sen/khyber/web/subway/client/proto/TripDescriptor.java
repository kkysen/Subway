// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

/**
 * <pre>
 * A descriptor that identifies an instance of a GTFS trip, or all instances of
 * a trip along a route.
 * - To specify a single trip instance, the trip_id (and if necessary,
 *   start_time) is set. If route_id is also set, then it should be same as one
 *   that the given trip corresponds to.
 * - To specify all the trips along a given route, only the route_id should be
 *   set. Note that if the trip_id is not known, then stop sequence ids in
 *   TripUpdate are not sufficient, and stop_ids must be provided as well. In
 *   addition, absolute arrival/departure times must be provided.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.TripDescriptor}
 */
public final class TripDescriptor extends
        com.google.protobuf.GeneratedMessageV3.ExtendableMessage<
                TripDescriptor> implements
        // @@protoc_insertion_point(message_implements:transit_realtime.TripDescriptor)
        TripDescriptorOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use TripDescriptor.newBuilder() to construct.
    private TripDescriptor(
            final com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<TripDescriptor, ?>
                    builder) {
        super(builder);
    }
    
    private TripDescriptor() {
        tripId_ = "";
        routeId_ = "";
        startTime_ = "";
        startDate_ = "";
        scheduleRelationship_ = 0;
    }
    
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return unknownFields;
    }
    
    private TripDescriptor(
            final com.google.protobuf.CodedInputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(
                                input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final com.google.protobuf.ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        tripId_ = bs;
                        break;
                    }
                    case 18: {
                        final com.google.protobuf.ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000004;
                        startTime_ = bs;
                        break;
                    }
                    case 26: {
                        final com.google.protobuf.ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000008;
                        startDate_ = bs;
                        break;
                    }
                    case 32: {
                        final int rawValue = input.readEnum();
                        final TripDescriptor.ScheduleRelationship value =
                                TripDescriptor.ScheduleRelationship.valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(4, rawValue);
                        } else {
                            bitField0_ |= 0x00000010;
                            scheduleRelationship_ = rawValue;
                        }
                        break;
                    }
                    case 42: {
                        final com.google.protobuf.ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000002;
                        routeId_ = bs;
                        break;
                    }
                }
            }
        } catch (final com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_TripDescriptor_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        TripDescriptor.class, TripDescriptor.Builder.class);
    }
    
    /**
     * <pre>
     * The relation between this trip and the static schedule. If a trip is done
     * in accordance with temporary schedule, not reflected in GTFS, then it
     * shouldn't be marked as SCHEDULED, but likely as ADDED.
     * </pre>
     * <p>
     * Protobuf enum {@code transit_realtime.TripDescriptor.ScheduleRelationship}
     */
    public enum ScheduleRelationship
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Trip that is running in accordance with its GTFS schedule, or is close
         * enough to the scheduled trip to be associated with it.
         * </pre>
         * <p>
         * <code>SCHEDULED = 0;</code>
         */
        SCHEDULED(0),
        /**
         * <pre>
         * An extra trip that was added in addition to a running schedule, for
         * example, to replace a broken vehicle or to respond to sudden passenger
         * load.
         * </pre>
         * <p>
         * <code>ADDED = 1;</code>
         */
        ADDED(1),
        /**
         * <pre>
         * A trip that is running with no schedule associated to it, for example, if
         * there is no schedule at all.
         * </pre>
         * <p>
         * <code>UNSCHEDULED = 2;</code>
         */
        UNSCHEDULED(2),
        /**
         * <pre>
         * A trip that existed in the schedule but was removed.
         * </pre>
         * <p>
         * <code>CANCELED = 3;</code>
         */
        CANCELED(3),;
        
        /**
         * <pre>
         * Trip that is running in accordance with its GTFS schedule, or is close
         * enough to the scheduled trip to be associated with it.
         * </pre>
         * <p>
         * <code>SCHEDULED = 0;</code>
         */
        public static final int SCHEDULED_VALUE = 0;
        /**
         * <pre>
         * An extra trip that was added in addition to a running schedule, for
         * example, to replace a broken vehicle or to respond to sudden passenger
         * load.
         * </pre>
         * <p>
         * <code>ADDED = 1;</code>
         */
        public static final int ADDED_VALUE = 1;
        /**
         * <pre>
         * A trip that is running with no schedule associated to it, for example, if
         * there is no schedule at all.
         * </pre>
         * <p>
         * <code>UNSCHEDULED = 2;</code>
         */
        public static final int UNSCHEDULED_VALUE = 2;
        /**
         * <pre>
         * A trip that existed in the schedule but was removed.
         * </pre>
         * <p>
         * <code>CANCELED = 3;</code>
         */
        public static final int CANCELED_VALUE = 3;
        
        
        @Override
        public final int getNumber() {
            return value;
        }
        
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ScheduleRelationship valueOf(final int value) {
            return forNumber(value);
        }
        
        public static ScheduleRelationship forNumber(final int value) {
            switch (value) {
                case 0:
                    return SCHEDULED;
                case 1:
                    return ADDED;
                case 2:
                    return UNSCHEDULED;
                case 3:
                    return CANCELED;
                default:
                    return null;
            }
        }
        
        public static com.google.protobuf.Internal.EnumLiteMap<ScheduleRelationship>
        internalGetValueMap() {
            return internalValueMap;
        }
        
        private static final com.google.protobuf.Internal.EnumLiteMap<
                ScheduleRelationship> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<>() {
                    
                    @Override
                    public ScheduleRelationship findValueByNumber(final int number) {
                        return ScheduleRelationship.forNumber(number);
                    }
                };
        
        @Override
        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        
        @Override
        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }
        
        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return TripDescriptor.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final ScheduleRelationship[] VALUES = values();
        
        public static ScheduleRelationship valueOf(
                final com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }
        
        private final int value;
        
        private ScheduleRelationship(final int value) {
            this.value = value;
        }
        
        // @@protoc_insertion_point(enum_scope:transit_realtime.TripDescriptor.ScheduleRelationship)
    }
    
    private int bitField0_;
    public static final int TRIP_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object tripId_;
    
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency expanded trips, this field is enough to uniquely identify
     * the trip. For frequency expanded, start_time and start_date might also be
     * necessary.
     * </pre>
     * <p>
     * <code>optional string trip_id = 1;</code>
     */
    @Override
    public boolean hasTripId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency expanded trips, this field is enough to uniquely identify
     * the trip. For frequency expanded, start_time and start_date might also be
     * necessary.
     * </pre>
     * <p>
     * <code>optional string trip_id = 1;</code>
     */
    @Override
    public java.lang.String getTripId() {
        final java.lang.Object ref = tripId_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            final com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            final java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                tripId_ = s;
            }
            return s;
        }
    }
    
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency expanded trips, this field is enough to uniquely identify
     * the trip. For frequency expanded, start_time and start_date might also be
     * necessary.
     * </pre>
     * <p>
     * <code>optional string trip_id = 1;</code>
     */
    @Override
    public com.google.protobuf.ByteString
    getTripIdBytes() {
        final java.lang.Object ref = tripId_;
        if (ref instanceof java.lang.String) {
            final com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            tripId_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }
    
    public static final int ROUTE_ID_FIELD_NUMBER = 5;
    private volatile java.lang.Object routeId_;
    
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     * <p>
     * <code>optional string route_id = 5;</code>
     */
    @Override
    public boolean hasRouteId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     * <p>
     * <code>optional string route_id = 5;</code>
     */
    @Override
    public java.lang.String getRouteId() {
        final java.lang.Object ref = routeId_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            final com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            final java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                routeId_ = s;
            }
            return s;
        }
    }
    
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     * <p>
     * <code>optional string route_id = 5;</code>
     */
    @Override
    public com.google.protobuf.ByteString
    getRouteIdBytes() {
        final java.lang.Object ref = routeId_;
        if (ref instanceof java.lang.String) {
            final com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            routeId_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }
    
    public static final int START_TIME_FIELD_NUMBER = 2;
    private volatile java.lang.Object startTime_;
    
    /**
     * <pre>
     * The scheduled start time of this trip instance.
     * This field should be given only if the trip is frequency-expanded in the
     * GTFS feed. The value must precisely correspond to start_time specified for
     * the route in the GTFS feed plus some multiple of headway_secs.
     * Format of the field is same as that of GTFS/frequencies.txt/start_time,
     * e.g., 11:15:35 or 25:15:35.
     * </pre>
     * <p>
     * <code>optional string start_time = 2;</code>
     */
    @Override
    public boolean hasStartTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * The scheduled start time of this trip instance.
     * This field should be given only if the trip is frequency-expanded in the
     * GTFS feed. The value must precisely correspond to start_time specified for
     * the route in the GTFS feed plus some multiple of headway_secs.
     * Format of the field is same as that of GTFS/frequencies.txt/start_time,
     * e.g., 11:15:35 or 25:15:35.
     * </pre>
     * <p>
     * <code>optional string start_time = 2;</code>
     */
    @Override
    public java.lang.String getStartTime() {
        final java.lang.Object ref = startTime_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            final com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            final java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                startTime_ = s;
            }
            return s;
        }
    }
    
    /**
     * <pre>
     * The scheduled start time of this trip instance.
     * This field should be given only if the trip is frequency-expanded in the
     * GTFS feed. The value must precisely correspond to start_time specified for
     * the route in the GTFS feed plus some multiple of headway_secs.
     * Format of the field is same as that of GTFS/frequencies.txt/start_time,
     * e.g., 11:15:35 or 25:15:35.
     * </pre>
     * <p>
     * <code>optional string start_time = 2;</code>
     */
    @Override
    public com.google.protobuf.ByteString
    getStartTimeBytes() {
        final java.lang.Object ref = startTime_;
        if (ref instanceof java.lang.String) {
            final com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            startTime_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }
    
    public static final int START_DATE_FIELD_NUMBER = 3;
    private volatile java.lang.Object startDate_;
    
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     * <p>
     * <code>optional string start_date = 3;</code>
     */
    @Override
    public boolean hasStartDate() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     * <p>
     * <code>optional string start_date = 3;</code>
     */
    @Override
    public java.lang.String getStartDate() {
        final java.lang.Object ref = startDate_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            final com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            final java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                startDate_ = s;
            }
            return s;
        }
    }
    
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     * <p>
     * <code>optional string start_date = 3;</code>
     */
    @Override
    public com.google.protobuf.ByteString
    getStartDateBytes() {
        final java.lang.Object ref = startDate_;
        if (ref instanceof java.lang.String) {
            final com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            startDate_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }
    
    public static final int SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 4;
    private int scheduleRelationship_;
    
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship
     * = 4;</code>
     */
    @Override
    public boolean hasScheduleRelationship() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship
     * = 4;</code>
     */
    @Override
    public TripDescriptor.ScheduleRelationship getScheduleRelationship() {
        final TripDescriptor.ScheduleRelationship result = TripDescriptor.ScheduleRelationship
                .valueOf(scheduleRelationship_);
        return result == null ? TripDescriptor.ScheduleRelationship.SCHEDULED : result;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        if (!extensionsAreInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        final com.google.protobuf.GeneratedMessageV3
                .ExtendableMessage<TripDescriptor>.ExtensionWriter
                extensionWriter = newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tripId_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, startTime_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 3, startDate_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeEnum(4, scheduleRelationship_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 5, routeId_);
        }
        extensionWriter.writeUntil(2000, output);
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tripId_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, startTime_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, startDate_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeEnumSize(4, scheduleRelationship_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, routeId_);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof TripDescriptor)) {
            return super.equals(obj);
        }
        final TripDescriptor other = (TripDescriptor) obj;
        
        boolean result = true;
        result = result && (hasTripId() == other.hasTripId());
        if (hasTripId()) {
            result = result && getTripId()
                    .equals(other.getTripId());
        }
        result = result && (hasRouteId() == other.hasRouteId());
        if (hasRouteId()) {
            result = result && getRouteId()
                    .equals(other.getRouteId());
        }
        result = result && (hasStartTime() == other.hasStartTime());
        if (hasStartTime()) {
            result = result && getStartTime()
                    .equals(other.getStartTime());
        }
        result = result && (hasStartDate() == other.hasStartDate());
        if (hasStartDate()) {
            result = result && getStartDate()
                    .equals(other.getStartDate());
        }
        result = result && (hasScheduleRelationship() == other.hasScheduleRelationship());
        if (hasScheduleRelationship()) {
            result = result && scheduleRelationship_ == other.scheduleRelationship_;
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result &&
                getExtensionFields().equals(other.getExtensionFields());
        return result;
    }
    
    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTripId()) {
            hash = (37 * hash) + TRIP_ID_FIELD_NUMBER;
            hash = (53 * hash) + getTripId().hashCode();
        }
        if (hasRouteId()) {
            hash = (37 * hash) + ROUTE_ID_FIELD_NUMBER;
            hash = (53 * hash) + getRouteId().hashCode();
        }
        if (hasStartTime()) {
            hash = (37 * hash) + START_TIME_FIELD_NUMBER;
            hash = (53 * hash) + getStartTime().hashCode();
        }
        if (hasStartDate()) {
            hash = (37 * hash) + START_DATE_FIELD_NUMBER;
            hash = (53 * hash) + getStartDate().hashCode();
        }
        if (hasScheduleRelationship()) {
            hash = (37 * hash) + SCHEDULE_RELATIONSHIP_FIELD_NUMBER;
            hash = (53 * hash) + scheduleRelationship_;
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static TripDescriptor parseFrom(
            final java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripDescriptor parseFrom(
            final java.nio.ByteBuffer data,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripDescriptor parseFrom(
            final com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripDescriptor parseFrom(
            final com.google.protobuf.ByteString data,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripDescriptor parseFrom(final byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripDescriptor parseFrom(
            final byte[] data,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripDescriptor parseFrom(final java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }
    
    public static TripDescriptor parseFrom(
            final java.io.InputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TripDescriptor parseDelimitedFrom(final java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }
    
    public static TripDescriptor parseDelimitedFrom(
            final java.io.InputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TripDescriptor parseFrom(
            final com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }
    
    public static TripDescriptor parseFrom(
            final com.google.protobuf.CodedInputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final TripDescriptor prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @java.lang.Override
    protected Builder newBuilderForType(
            final com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * A descriptor that identifies an instance of a GTFS trip, or all instances of
     * a trip along a route.
     * - To specify a single trip instance, the trip_id (and if necessary,
     *   start_time) is set. If route_id is also set, then it should be same as one
     *   that the given trip corresponds to.
     * - To specify all the trips along a given route, only the route_id should be
     *   set. Note that if the trip_id is not known, then stop sequence ids in
     *   TripUpdate are not sufficient, and stop_ids must be provided as well. In
     *   addition, absolute arrival/departure times must be provided.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.TripDescriptor}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.ExtendableBuilder<
                    TripDescriptor, Builder> implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.TripDescriptor)
            TripDescriptorOrBuilder {
        
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
        }
        
        @Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return GtfsRealtime.internal_static_transit_realtime_TripDescriptor_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            TripDescriptor.class, TripDescriptor.Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.TripDescriptor.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(
                final com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            tripId_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            routeId_ = "";
            bitField0_ = (bitField0_ & ~0x00000002);
            startTime_ = "";
            bitField0_ = (bitField0_ & ~0x00000004);
            startDate_ = "";
            bitField0_ = (bitField0_ & ~0x00000008);
            scheduleRelationship_ = 0;
            bitField0_ = (bitField0_ & ~0x00000010);
            return this;
        }
        
        @Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_TripDescriptor_descriptor;
        }
        
        @Override
        public TripDescriptor getDefaultInstanceForType() {
            return TripDescriptor.getDefaultInstance();
        }
        
        @Override
        public TripDescriptor build() {
            final TripDescriptor result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public TripDescriptor buildPartial() {
            final TripDescriptor result = new TripDescriptor(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.tripId_ = tripId_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.routeId_ = routeId_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            result.startTime_ = startTime_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000008;
            }
            result.startDate_ = startDate_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                to_bitField0_ |= 0x00000010;
            }
            result.scheduleRelationship_ = scheduleRelationship_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return (Builder) super.clone();
        }
        
        @Override
        public Builder setField(
                final com.google.protobuf.Descriptors.FieldDescriptor field,
                final java.lang.Object value) {
            return (Builder) super.setField(field, value);
        }
        
        @Override
        public Builder clearField(
                final com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(
                final com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(
                final com.google.protobuf.Descriptors.FieldDescriptor field,
                final int index, final java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(
                final com.google.protobuf.Descriptors.FieldDescriptor field,
                final java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final com.google.protobuf.GeneratedMessage.GeneratedExtension<
                        TripDescriptor, Type> extension,
                final Type value) {
            return (Builder) super.setExtension(extension, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final com.google.protobuf.GeneratedMessage.GeneratedExtension<
                        TripDescriptor, java.util.List<Type>> extension,
                final int index, final Type value) {
            return (Builder) super.setExtension(extension, index, value);
        }
        
        @Override
        public <Type> Builder addExtension(
                final com.google.protobuf.GeneratedMessage.GeneratedExtension<
                        TripDescriptor, java.util.List<Type>> extension,
                final Type value) {
            return (Builder) super.addExtension(extension, value);
        }
        
        @Override
        public <Type> Builder clearExtension(
                final com.google.protobuf.GeneratedMessage.GeneratedExtension<
                        TripDescriptor, ?> extension) {
            return (Builder) super.clearExtension(extension);
        }
        
        @Override
        public Builder mergeFrom(final com.google.protobuf.Message other) {
            if (other instanceof TripDescriptor) {
                return mergeFrom((TripDescriptor) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final TripDescriptor other) {
            if (other == TripDescriptor.getDefaultInstance()) {return this;}
            if (other.hasTripId()) {
                bitField0_ |= 0x00000001;
                tripId_ = other.tripId_;
                onChanged();
            }
            if (other.hasRouteId()) {
                bitField0_ |= 0x00000002;
                routeId_ = other.routeId_;
                onChanged();
            }
            if (other.hasStartTime()) {
                bitField0_ |= 0x00000004;
                startTime_ = other.startTime_;
                onChanged();
            }
            if (other.hasStartDate()) {
                bitField0_ |= 0x00000008;
                startDate_ = other.startDate_;
                onChanged();
            }
            if (other.hasScheduleRelationship()) {
                setScheduleRelationship(other.getScheduleRelationship());
            }
            mergeExtensionFields(other);
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            if (!extensionsAreInitialized()) {
                return false;
            }
            return true;
        }
        
        @Override
        public Builder mergeFrom(
                final com.google.protobuf.CodedInputStream input,
                final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            TripDescriptor parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (TripDescriptor) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private java.lang.Object tripId_ = "";
        
        /**
         * <pre>
         * The trip_id from the GTFS feed that this selector refers to.
         * For non frequency expanded trips, this field is enough to uniquely identify
         * the trip. For frequency expanded, start_time and start_date might also be
         * necessary.
         * </pre>
         * <p>
         * <code>optional string trip_id = 1;</code>
         */
        @Override
        public boolean hasTripId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * The trip_id from the GTFS feed that this selector refers to.
         * For non frequency expanded trips, this field is enough to uniquely identify
         * the trip. For frequency expanded, start_time and start_date might also be
         * necessary.
         * </pre>
         * <p>
         * <code>optional string trip_id = 1;</code>
         */
        @Override
        public java.lang.String getTripId() {
            final java.lang.Object ref = tripId_;
            if (!(ref instanceof java.lang.String)) {
                final com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                final java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    tripId_ = s;
                }
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }
        
        /**
         * <pre>
         * The trip_id from the GTFS feed that this selector refers to.
         * For non frequency expanded trips, this field is enough to uniquely identify
         * the trip. For frequency expanded, start_time and start_date might also be
         * necessary.
         * </pre>
         * <p>
         * <code>optional string trip_id = 1;</code>
         */
        @Override
        public com.google.protobuf.ByteString
        getTripIdBytes() {
            final java.lang.Object ref = tripId_;
            if (ref instanceof String) {
                final com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                tripId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }
        
        /**
         * <pre>
         * The trip_id from the GTFS feed that this selector refers to.
         * For non frequency expanded trips, this field is enough to uniquely identify
         * the trip. For frequency expanded, start_time and start_date might also be
         * necessary.
         * </pre>
         * <p>
         * <code>optional string trip_id = 1;</code>
         */
        public Builder setTripId(
                final java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            tripId_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The trip_id from the GTFS feed that this selector refers to.
         * For non frequency expanded trips, this field is enough to uniquely identify
         * the trip. For frequency expanded, start_time and start_date might also be
         * necessary.
         * </pre>
         * <p>
         * <code>optional string trip_id = 1;</code>
         */
        public Builder clearTripId() {
            bitField0_ = (bitField0_ & ~0x00000001);
            tripId_ = getDefaultInstance().getTripId();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The trip_id from the GTFS feed that this selector refers to.
         * For non frequency expanded trips, this field is enough to uniquely identify
         * the trip. For frequency expanded, start_time and start_date might also be
         * necessary.
         * </pre>
         * <p>
         * <code>optional string trip_id = 1;</code>
         */
        public Builder setTripIdBytes(
                final com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            tripId_ = value;
            onChanged();
            return this;
        }
        
        private java.lang.Object routeId_ = "";
        
        /**
         * <pre>
         * The route_id from the GTFS that this selector refers to.
         * </pre>
         * <p>
         * <code>optional string route_id = 5;</code>
         */
        @Override
        public boolean hasRouteId() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * The route_id from the GTFS that this selector refers to.
         * </pre>
         * <p>
         * <code>optional string route_id = 5;</code>
         */
        @Override
        public java.lang.String getRouteId() {
            final java.lang.Object ref = routeId_;
            if (!(ref instanceof java.lang.String)) {
                final com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                final java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    routeId_ = s;
                }
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }
        
        /**
         * <pre>
         * The route_id from the GTFS that this selector refers to.
         * </pre>
         * <p>
         * <code>optional string route_id = 5;</code>
         */
        @Override
        public com.google.protobuf.ByteString
        getRouteIdBytes() {
            final java.lang.Object ref = routeId_;
            if (ref instanceof String) {
                final com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                routeId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }
        
        /**
         * <pre>
         * The route_id from the GTFS that this selector refers to.
         * </pre>
         * <p>
         * <code>optional string route_id = 5;</code>
         */
        public Builder setRouteId(
                final java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            routeId_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The route_id from the GTFS that this selector refers to.
         * </pre>
         * <p>
         * <code>optional string route_id = 5;</code>
         */
        public Builder clearRouteId() {
            bitField0_ = (bitField0_ & ~0x00000002);
            routeId_ = getDefaultInstance().getRouteId();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The route_id from the GTFS that this selector refers to.
         * </pre>
         * <p>
         * <code>optional string route_id = 5;</code>
         */
        public Builder setRouteIdBytes(
                final com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            routeId_ = value;
            onChanged();
            return this;
        }
        
        private java.lang.Object startTime_ = "";
        
        /**
         * <pre>
         * The scheduled start time of this trip instance.
         * This field should be given only if the trip is frequency-expanded in the
         * GTFS feed. The value must precisely correspond to start_time specified for
         * the route in the GTFS feed plus some multiple of headway_secs.
         * Format of the field is same as that of GTFS/frequencies.txt/start_time,
         * e.g., 11:15:35 or 25:15:35.
         * </pre>
         * <p>
         * <code>optional string start_time = 2;</code>
         */
        @Override
        public boolean hasStartTime() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <pre>
         * The scheduled start time of this trip instance.
         * This field should be given only if the trip is frequency-expanded in the
         * GTFS feed. The value must precisely correspond to start_time specified for
         * the route in the GTFS feed plus some multiple of headway_secs.
         * Format of the field is same as that of GTFS/frequencies.txt/start_time,
         * e.g., 11:15:35 or 25:15:35.
         * </pre>
         * <p>
         * <code>optional string start_time = 2;</code>
         */
        @Override
        public java.lang.String getStartTime() {
            final java.lang.Object ref = startTime_;
            if (!(ref instanceof java.lang.String)) {
                final com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                final java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    startTime_ = s;
                }
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }
        
        /**
         * <pre>
         * The scheduled start time of this trip instance.
         * This field should be given only if the trip is frequency-expanded in the
         * GTFS feed. The value must precisely correspond to start_time specified for
         * the route in the GTFS feed plus some multiple of headway_secs.
         * Format of the field is same as that of GTFS/frequencies.txt/start_time,
         * e.g., 11:15:35 or 25:15:35.
         * </pre>
         * <p>
         * <code>optional string start_time = 2;</code>
         */
        @Override
        public com.google.protobuf.ByteString
        getStartTimeBytes() {
            final java.lang.Object ref = startTime_;
            if (ref instanceof String) {
                final com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                startTime_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }
        
        /**
         * <pre>
         * The scheduled start time of this trip instance.
         * This field should be given only if the trip is frequency-expanded in the
         * GTFS feed. The value must precisely correspond to start_time specified for
         * the route in the GTFS feed plus some multiple of headway_secs.
         * Format of the field is same as that of GTFS/frequencies.txt/start_time,
         * e.g., 11:15:35 or 25:15:35.
         * </pre>
         * <p>
         * <code>optional string start_time = 2;</code>
         */
        public Builder setStartTime(
                final java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            startTime_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The scheduled start time of this trip instance.
         * This field should be given only if the trip is frequency-expanded in the
         * GTFS feed. The value must precisely correspond to start_time specified for
         * the route in the GTFS feed plus some multiple of headway_secs.
         * Format of the field is same as that of GTFS/frequencies.txt/start_time,
         * e.g., 11:15:35 or 25:15:35.
         * </pre>
         * <p>
         * <code>optional string start_time = 2;</code>
         */
        public Builder clearStartTime() {
            bitField0_ = (bitField0_ & ~0x00000004);
            startTime_ = getDefaultInstance().getStartTime();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The scheduled start time of this trip instance.
         * This field should be given only if the trip is frequency-expanded in the
         * GTFS feed. The value must precisely correspond to start_time specified for
         * the route in the GTFS feed plus some multiple of headway_secs.
         * Format of the field is same as that of GTFS/frequencies.txt/start_time,
         * e.g., 11:15:35 or 25:15:35.
         * </pre>
         * <p>
         * <code>optional string start_time = 2;</code>
         */
        public Builder setStartTimeBytes(
                final com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            startTime_ = value;
            onChanged();
            return this;
        }
        
        private java.lang.Object startDate_ = "";
        
        /**
         * <pre>
         * The scheduled start date of this trip instance.
         * Must be provided to disambiguate trips that are so late as to collide with
         * a scheduled trip on a next day. For example, for a train that departs 8:00
         * and 20:00 every day, and is 12 hours late, there would be two distinct
         * trips on the same time.
         * This field can be provided but is not mandatory for schedules in which such
         * collisions are impossible - for example, a service running on hourly
         * schedule where a vehicle that is one hour late is not considered to be
         * related to schedule anymore.
         * In YYYYMMDD format.
         * </pre>
         * <p>
         * <code>optional string start_date = 3;</code>
         */
        @Override
        public boolean hasStartDate() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        
        /**
         * <pre>
         * The scheduled start date of this trip instance.
         * Must be provided to disambiguate trips that are so late as to collide with
         * a scheduled trip on a next day. For example, for a train that departs 8:00
         * and 20:00 every day, and is 12 hours late, there would be two distinct
         * trips on the same time.
         * This field can be provided but is not mandatory for schedules in which such
         * collisions are impossible - for example, a service running on hourly
         * schedule where a vehicle that is one hour late is not considered to be
         * related to schedule anymore.
         * In YYYYMMDD format.
         * </pre>
         * <p>
         * <code>optional string start_date = 3;</code>
         */
        @Override
        public java.lang.String getStartDate() {
            final java.lang.Object ref = startDate_;
            if (!(ref instanceof java.lang.String)) {
                final com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                final java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    startDate_ = s;
                }
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }
        
        /**
         * <pre>
         * The scheduled start date of this trip instance.
         * Must be provided to disambiguate trips that are so late as to collide with
         * a scheduled trip on a next day. For example, for a train that departs 8:00
         * and 20:00 every day, and is 12 hours late, there would be two distinct
         * trips on the same time.
         * This field can be provided but is not mandatory for schedules in which such
         * collisions are impossible - for example, a service running on hourly
         * schedule where a vehicle that is one hour late is not considered to be
         * related to schedule anymore.
         * In YYYYMMDD format.
         * </pre>
         * <p>
         * <code>optional string start_date = 3;</code>
         */
        @Override
        public com.google.protobuf.ByteString
        getStartDateBytes() {
            final java.lang.Object ref = startDate_;
            if (ref instanceof String) {
                final com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                startDate_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }
        
        /**
         * <pre>
         * The scheduled start date of this trip instance.
         * Must be provided to disambiguate trips that are so late as to collide with
         * a scheduled trip on a next day. For example, for a train that departs 8:00
         * and 20:00 every day, and is 12 hours late, there would be two distinct
         * trips on the same time.
         * This field can be provided but is not mandatory for schedules in which such
         * collisions are impossible - for example, a service running on hourly
         * schedule where a vehicle that is one hour late is not considered to be
         * related to schedule anymore.
         * In YYYYMMDD format.
         * </pre>
         * <p>
         * <code>optional string start_date = 3;</code>
         */
        public Builder setStartDate(
                final java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            startDate_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The scheduled start date of this trip instance.
         * Must be provided to disambiguate trips that are so late as to collide with
         * a scheduled trip on a next day. For example, for a train that departs 8:00
         * and 20:00 every day, and is 12 hours late, there would be two distinct
         * trips on the same time.
         * This field can be provided but is not mandatory for schedules in which such
         * collisions are impossible - for example, a service running on hourly
         * schedule where a vehicle that is one hour late is not considered to be
         * related to schedule anymore.
         * In YYYYMMDD format.
         * </pre>
         * <p>
         * <code>optional string start_date = 3;</code>
         */
        public Builder clearStartDate() {
            bitField0_ = (bitField0_ & ~0x00000008);
            startDate_ = getDefaultInstance().getStartDate();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The scheduled start date of this trip instance.
         * Must be provided to disambiguate trips that are so late as to collide with
         * a scheduled trip on a next day. For example, for a train that departs 8:00
         * and 20:00 every day, and is 12 hours late, there would be two distinct
         * trips on the same time.
         * This field can be provided but is not mandatory for schedules in which such
         * collisions are impossible - for example, a service running on hourly
         * schedule where a vehicle that is one hour late is not considered to be
         * related to schedule anymore.
         * In YYYYMMDD format.
         * </pre>
         * <p>
         * <code>optional string start_date = 3;</code>
         */
        public Builder setStartDateBytes(
                final com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000008;
            startDate_ = value;
            onChanged();
            return this;
        }
        
        private int scheduleRelationship_ = 0;
        
        /**
         * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship
         * schedule_relationship
         * = 4;</code>
         */
        @Override
        public boolean hasScheduleRelationship() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        
        /**
         * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship
         * schedule_relationship = 4;</code>
         */
        @Override
        public TripDescriptor.ScheduleRelationship getScheduleRelationship() {
            final TripDescriptor.ScheduleRelationship result = TripDescriptor.ScheduleRelationship
                    .valueOf(scheduleRelationship_);
            return result == null ? TripDescriptor.ScheduleRelationship.SCHEDULED : result;
        }
        
        /**
         * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship
         * schedule_relationship
         * = 4;</code>
         */
        public Builder setScheduleRelationship(final TripDescriptor.ScheduleRelationship value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000010;
            scheduleRelationship_ = value.getNumber();
            onChanged();
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship
         * schedule_relationship = 4;</code>
         */
        public Builder clearScheduleRelationship() {
            bitField0_ = (bitField0_ & ~0x00000010);
            scheduleRelationship_ = 0;
            onChanged();
            return this;
        }
        
        @Override
        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.TripDescriptor)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.TripDescriptor)
    private static final TripDescriptor DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new TripDescriptor();
    }
    
    public static TripDescriptor getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @java.lang.Deprecated public static final com.google.protobuf.Parser<TripDescriptor>
            PARSER = new com.google.protobuf.AbstractParser<>() {
        
        @Override
        public TripDescriptor parsePartialFrom(
                final com.google.protobuf.CodedInputStream input,
                final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new TripDescriptor(input, extensionRegistry);
        }
    };
    
    public static com.google.protobuf.Parser<TripDescriptor> parser() {
        return PARSER;
    }
    
    @java.lang.Override
    public com.google.protobuf.Parser<TripDescriptor> getParserForType() {
        return PARSER;
    }
    
    @Override
    public TripDescriptor getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}

