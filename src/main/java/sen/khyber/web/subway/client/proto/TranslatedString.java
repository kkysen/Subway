// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.RepeatedFieldBuilderV3;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * An internationalized message containing per-language versions of a snippet of
 * text or a URL.
 * One of the strings from a message will be picked up. The resolution proceeds
 * as follows:
 * 1. If the UI language matches the language code of a translation,
 *    the first matching translation is picked.
 * 2. If a default UI language (e.g., English) matches the language code of a
 *    translation, the first matching translation is picked.
 * 3. If some translation has an unspecified language code, that translation is
 *    picked.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.TranslatedString}
 */
public final class TranslatedString extends GeneratedMessageV3
        implements TranslatedStringOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use TranslatedString.newBuilder() to construct.
    private TranslatedString(final GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }
    
    private TranslatedString() {
        translation_ = Collections.emptyList();
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private TranslatedString(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                            translation_ = new ArrayList<>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        translation_.add(input.readMessage(Translation.PARSER, extensionRegistry));
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                translation_ = Collections.unmodifiableList(translation_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_TranslatedString_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_TranslatedString_fieldAccessorTable
                .ensureFieldAccessorsInitialized(TranslatedString.class, Builder.class);
    }
    
    public interface TranslationOrBuilder extends
            // @@protoc_insertion_point(interface_extends:transit_realtime.TranslatedString
            // .Translation)
            MessageOrBuilder {
        
        /**
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         * <p>
         * <code>required string text = 1;</code>
         */
        boolean hasText();
        
        /**
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         * <p>
         * <code>required string text = 1;</code>
         */
        String getText();
        
        /**
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         * <p>
         * <code>required string text = 1;</code>
         */
        ByteString getTextBytes();
        
        /**
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         * <p>
         * <code>optional string language = 2;</code>
         */
        boolean hasLanguage();
        
        /**
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         * <p>
         * <code>optional string language = 2;</code>
         */
        String getLanguage();
        
        /**
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         * <p>
         * <code>optional string language = 2;</code>
         */
        ByteString getLanguageBytes();
    }
    
    /**
     * Protobuf type {@code transit_realtime.TranslatedString.Translation}
     */
    public static final class Translation extends GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:transit_realtime.TranslatedString
            // .Translation)
            TranslationOrBuilder {
        
        private static final long serialVersionUID = 0L;
        
        // Use Translation.newBuilder() to construct.
        private Translation(final GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
        
        private Translation() {
            text_ = "";
            language_ = "";
        }
        
        @Override
        public final UnknownFieldSet getUnknownFields() {
            return unknownFields;
        }
        
        private Translation(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            this();
            final int mutable_bitField0_ = 0;
            final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    final int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            final ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000001;
                            text_ = bs;
                            break;
                        }
                        case 18: {
                            final ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000002;
                            language_ = bs;
                            break;
                        }
                    }
                }
            } catch (final InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (final IOException e) {
                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime
                    .internal_static_transit_realtime_TranslatedString_Translation_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime
                    .internal_static_transit_realtime_TranslatedString_Translation_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(Translation.class, Builder.class);
        }
        
        private int bitField0_;
        public static final int TEXT_FIELD_NUMBER = 1;
        private volatile @Setter(AccessLevel.PRIVATE) Object text_;
        
        /**
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         * <p>
         * <code>required string text = 1;</code>
         */
        @Override
        public boolean hasText() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         * <p>
         * <code>required string text = 1;</code>
         */
        @Override
        public String getText() {
            return ProtoUtils.asString(text_, this::setText_);
        }
        
        /**
         * <pre>
         * A UTF-8 string containing the message.
         * </pre>
         * <p>
         * <code>required string text = 1;</code>
         */
        @Override
        public ByteString getTextBytes() {
            return ProtoUtils.asBytes(text_, this::setText_);
        }
        
        public static final int LANGUAGE_FIELD_NUMBER = 2;
        private volatile @Setter(AccessLevel.PRIVATE) Object language_;
        
        /**
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         * <p>
         * <code>optional string language = 2;</code>
         */
        @Override
        public boolean hasLanguage() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         * <p>
         * <code>optional string language = 2;</code>
         */
        @Override
        public String getLanguage() {
            return ProtoUtils.asString(language_, this::setLanguage_);
        }
        
        /**
         * <pre>
         * BCP-47 language code. Can be omitted if the language is unknown or if
         * no i18n is done at all for the feed. At most one translation is
         * allowed to have an unspecified language tag.
         * </pre>
         * <p>
         * <code>optional string language = 2;</code>
         */
        @Override
        public ByteString getLanguageBytes() {
            return ProtoUtils.asBytes(language_, this::setLanguage_);
        }
        
        private byte memoizedIsInitialized = -1;
        
        @Override
        public final boolean isInitialized() {
            final byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) {return true;}
            if (isInitialized == 0) {return false;}
            
            if (!hasText()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }
        
        @Override
        public void writeTo(final CodedOutputStream output) throws IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                GeneratedMessageV3.writeString(output, 1, text_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                GeneratedMessageV3.writeString(output, 2, language_);
            }
            unknownFields.writeTo(output);
        }
        
        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) {return size;}
            
            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += GeneratedMessageV3.computeStringSize(1, text_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += GeneratedMessageV3.computeStringSize(2, language_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }
        
        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Translation)) {
                return super.equals(obj);
            }
            final Translation other = (Translation) obj;
            
            boolean result = true;
            result = result && (hasText() == other.hasText());
            if (hasText()) {
                result = result && getText().equals(other.getText());
            }
            result = result && (hasLanguage() == other.hasLanguage());
            if (hasLanguage()) {
                result = result && getLanguage().equals(other.getLanguage());
            }
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }
        
        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasText()) {
                hash = (37 * hash) + TEXT_FIELD_NUMBER;
                hash = (53 * hash) + getText().hashCode();
            }
            if (hasLanguage()) {
                hash = (37 * hash) + LANGUAGE_FIELD_NUMBER;
                hash = (53 * hash) + getLanguage().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }
        
        public static Translation parseFrom(final ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static Translation parseFrom(final ByteBuffer data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static Translation parseFrom(final ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static Translation parseFrom(final ByteString data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static Translation parseFrom(final byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static Translation parseFrom(final byte[] data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static Translation parseFrom(final InputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }
        
        public static Translation parseFrom(final InputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }
        
        public static Translation parseDelimitedFrom(final InputStream input) throws IOException {
            return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }
        
        public static Translation parseDelimitedFrom(final InputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        
        public static Translation parseFrom(final CodedInputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }
        
        public static Translation parseFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }
        
        @Override
        public Builder newBuilderForType() { return newBuilder(); }
        
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        
        public static Builder newBuilder(final Translation prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        
        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }
        
        @Override
        protected Builder newBuilderForType(final BuilderParent parent) {
            final Builder builder = new Builder(parent);
            return builder;
        }
        
        /**
         * Protobuf type {@code transit_realtime.TranslatedString.Translation}
         */
        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:transit_realtime.TranslatedString
                // .Translation)
                TranslationOrBuilder {
            
            public static final Descriptor getDescriptor() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TranslatedString_Translation_descriptor;
            }
            
            @Override
            protected FieldAccessorTable internalGetFieldAccessorTable() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TranslatedString_Translation_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(Translation.class, Builder.class);
            }
            
            // Construct using sen.khyber.subway.client.proto.TranslatedString.Translation
            // .newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }
            
            private Builder(final BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            
            private void maybeForceBuilderInitialization() {
                if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                }
            }
            
            @Override
            public Builder clear() {
                super.clear();
                text_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                language_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }
            
            @Override
            public Descriptor getDescriptorForType() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TranslatedString_Translation_descriptor;
            }
            
            @Override
            public Translation getDefaultInstanceForType() {
                return getDefaultInstance();
            }
            
            @Override
            public Translation build() {
                final Translation result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }
            
            @Override
            public Translation buildPartial() {
                final Translation result = new Translation(this);
                final int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.text_ = text_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.language_ = language_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }
            
            @Override
            public Builder clone() {
                return super.clone();
            }
            
            @Override
            public Builder setField(final FieldDescriptor field, final Object value) {
                return super.setField(field, value);
            }
            
            @Override
            public Builder clearField(final FieldDescriptor field) {
                return super.clearField(field);
            }
            
            @Override
            public Builder clearOneof(final OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }
            
            @Override
            public Builder setRepeatedField(final FieldDescriptor field, final int index,
                    final Object value) {
                return super.setRepeatedField(field, index, value);
            }
            
            @Override
            public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
                return super.addRepeatedField(field, value);
            }
            
            @Override
            public Builder mergeFrom(final Message other) {
                if (other instanceof Translation) {
                    return mergeFrom((Translation) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }
            
            public Builder mergeFrom(final Translation other) {
                if (other == getDefaultInstance()) {return this;}
                if (other.hasText()) {
                    bitField0_ |= 0x00000001;
                    text_ = other.text_;
                    onChanged();
                }
                if (other.hasLanguage()) {
                    bitField0_ |= 0x00000002;
                    language_ = other.language_;
                    onChanged();
                }
                mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }
            
            @Override
            public final boolean isInitialized() {
                return hasText();
            }
            
            @Override
            public Builder mergeFrom(final CodedInputStream input,
                    final ExtensionRegistryLite extensionRegistry) throws IOException {
                Translation parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (final InvalidProtocolBufferException e) {
                    parsedMessage = (Translation) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            
            private int bitField0_;
            
            private @Setter(AccessLevel.PRIVATE) Object text_ = "";
            
            /**
             * <pre>
             * A UTF-8 string containing the message.
             * </pre>
             * <p>
             * <code>required string text = 1;</code>
             */
            @Override
            public boolean hasText() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            
            /**
             * <pre>
             * A UTF-8 string containing the message.
             * </pre>
             * <p>
             * <code>required string text = 1;</code>
             */
            @Override
            public String getText() {
                return ProtoUtils.asString(text_, this::setText_);
            }
            
            /**
             * <pre>
             * A UTF-8 string containing the message.
             * </pre>
             * <p>
             * <code>required string text = 1;</code>
             */
            @Override
            public ByteString getTextBytes() {
                return ProtoUtils.asBytes(text_, this::setText_);
            }
            
            /**
             * <pre>
             * A UTF-8 string containing the message.
             * </pre>
             * <p>
             * <code>required string text = 1;</code>
             */
            public Builder setText(final String value) {
                Objects.requireNonNull(value);
                bitField0_ |= 0x00000001;
                text_ = value;
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * A UTF-8 string containing the message.
             * </pre>
             * <p>
             * <code>required string text = 1;</code>
             */
            public Builder clearText() {
                bitField0_ = (bitField0_ & ~0x00000001);
                text_ = getDefaultInstance().getText();
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * A UTF-8 string containing the message.
             * </pre>
             * <p>
             * <code>required string text = 1;</code>
             */
            public Builder setTextBytes(final ByteString value) {
                Objects.requireNonNull(value);
                bitField0_ |= 0x00000001;
                text_ = value;
                onChanged();
                return this;
            }
            
            private @Setter(AccessLevel.PRIVATE) Object language_ = "";
            
            /**
             * <pre>
             * BCP-47 language code. Can be omitted if the language is unknown or if
             * no i18n is done at all for the feed. At most one translation is
             * allowed to have an unspecified language tag.
             * </pre>
             * <p>
             * <code>optional string language = 2;</code>
             */
            @Override
            public boolean hasLanguage() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            
            /**
             * <pre>
             * BCP-47 language code. Can be omitted if the language is unknown or if
             * no i18n is done at all for the feed. At most one translation is
             * allowed to have an unspecified language tag.
             * </pre>
             * <p>
             * <code>optional string language = 2;</code>
             */
            @Override
            public String getLanguage() {
                return ProtoUtils.asString(language_, this::setLanguage_);
            }
            
            /**
             * <pre>
             * BCP-47 language code. Can be omitted if the language is unknown or if
             * no i18n is done at all for the feed. At most one translation is
             * allowed to have an unspecified language tag.
             * </pre>
             * <p>
             * <code>optional string language = 2;</code>
             */
            @Override
            public ByteString getLanguageBytes() {
                return ProtoUtils.asBytes(language_, this::setLanguage_);
            }
            
            /**
             * <pre>
             * BCP-47 language code. Can be omitted if the language is unknown or if
             * no i18n is done at all for the feed. At most one translation is
             * allowed to have an unspecified language tag.
             * </pre>
             * <p>
             * <code>optional string language = 2;</code>
             */
            public Builder setLanguage(final String value) {
                Objects.requireNonNull(value);
                bitField0_ |= 0x00000002;
                language_ = value;
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * BCP-47 language code. Can be omitted if the language is unknown or if
             * no i18n is done at all for the feed. At most one translation is
             * allowed to have an unspecified language tag.
             * </pre>
             * <p>
             * <code>optional string language = 2;</code>
             */
            public Builder clearLanguage() {
                bitField0_ = (bitField0_ & ~0x00000002);
                language_ = getDefaultInstance().getLanguage();
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * BCP-47 language code. Can be omitted if the language is unknown or if
             * no i18n is done at all for the feed. At most one translation is
             * allowed to have an unspecified language tag.
             * </pre>
             * <p>
             * <code>optional string language = 2;</code>
             */
            public Builder setLanguageBytes(final ByteString value) {
                Objects.requireNonNull(value);
                bitField0_ |= 0x00000002;
                language_ = value;
                onChanged();
                return this;
            }
            
            @Override
            public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }
            
            @Override
            public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }
            
            
            // @@protoc_insertion_point(builder_scope:transit_realtime.TranslatedString.Translation)
        }
        
        // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString.Translation)
        private static final Translation DEFAULT_INSTANCE;
        
        static {
            DEFAULT_INSTANCE = new Translation();
        }
        
        public static Translation getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }
        
        @Deprecated public static final Parser<Translation> PARSER = new AbstractParser<>() {
            
            @Override
            public Translation parsePartialFrom(final CodedInputStream input,
                    final ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return new Translation(input, extensionRegistry);
            }
        };
        
        public static Parser<Translation> parser() {
            return PARSER;
        }
        
        @Override
        public Parser<Translation> getParserForType() {
            return PARSER;
        }
        
        @Override
        public Translation getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }
        
    }
    
    public static final int TRANSLATION_FIELD_NUMBER = 1;
    private List<Translation> translation_;
    
    /**
     * <pre>
     * At least one translation must be provided.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     */
    @Override
    public List<Translation> getTranslationList() {
        return translation_;
    }
    
    /**
     * <pre>
     * At least one translation must be provided.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     */
    @Override
    public List<? extends TranslationOrBuilder> getTranslationOrBuilderList() {
        return translation_;
    }
    
    /**
     * <pre>
     * At least one translation must be provided.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     */
    @Override
    public int getTranslationCount() {
        return translation_.size();
    }
    
    /**
     * <pre>
     * At least one translation must be provided.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     */
    @Override
    public Translation getTranslation(final int index) {
        return translation_.get(index);
    }
    
    /**
     * <pre>
     * At least one translation must be provided.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
     */
    @Override
    public TranslationOrBuilder getTranslationOrBuilder(final int index) {
        return translation_.get(index);
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        for (int i = 0; i < getTranslationCount(); i++) {
            if (!getTranslation(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        for (int i = 0; i < translation_.size(); i++) {
            output.writeMessage(1, translation_.get(i));
        }
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        for (int i = 0; i < translation_.size(); i++) {
            size += CodedOutputStream.computeMessageSize(1, translation_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof TranslatedString)) {
            return super.equals(obj);
        }
        final TranslatedString other = (TranslatedString) obj;
        
        boolean result = true;
        result = result && getTranslationList().equals(other.getTranslationList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getTranslationCount() > 0) {
            hash = (37 * hash) + TRANSLATION_FIELD_NUMBER;
            hash = (53 * hash) + getTranslationList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static TranslatedString parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TranslatedString parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TranslatedString parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TranslatedString parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TranslatedString parseFrom(final byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TranslatedString parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TranslatedString parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static TranslatedString parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TranslatedString parseDelimitedFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static TranslatedString parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TranslatedString parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static TranslatedString parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final TranslatedString prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * An internationalized message containing per-language versions of a snippet of
     * text or a URL.
     * One of the strings from a message will be picked up. The resolution proceeds
     * as follows:
     * 1. If the UI language matches the language code of a translation,
     *    the first matching translation is picked.
     * 2. If a default UI language (e.g., English) matches the language code of a
     *    translation, the first matching translation is picked.
     * 3. If some translation has an unspecified language code, that translation is
     *    picked.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.TranslatedString}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.TranslatedString)
            TranslatedStringOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_TranslatedString_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime.internal_static_transit_realtime_TranslatedString_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(TranslatedString.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.TranslatedString.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                getTranslationFieldBuilder();
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            if (translationBuilder_ == null) {
                translation_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
            } else {
                translationBuilder_.clear();
            }
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_TranslatedString_descriptor;
        }
        
        @Override
        public TranslatedString getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public TranslatedString build() {
            final TranslatedString result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public TranslatedString buildPartial() {
            final TranslatedString result = new TranslatedString(this);
            final int from_bitField0_ = bitField0_;
            if (translationBuilder_ == null) {
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    translation_ = Collections.unmodifiableList(translation_);
                    bitField0_ = (bitField0_ & ~0x00000001);
                }
                result.translation_ = translation_;
            } else {
                result.translation_ = translationBuilder_.build();
            }
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof TranslatedString) {
                return mergeFrom((TranslatedString) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final TranslatedString other) {
            if (other == getDefaultInstance()) {return this;}
            if (translationBuilder_ == null) {
                if (!other.translation_.isEmpty()) {
                    if (translation_.isEmpty()) {
                        translation_ = other.translation_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                    } else {
                        ensureTranslationIsMutable();
                        translation_.addAll(other.translation_);
                    }
                    onChanged();
                }
            } else {
                if (!other.translation_.isEmpty()) {
                    if (translationBuilder_.isEmpty()) {
                        translationBuilder_.dispose();
                        translationBuilder_ = null;
                        translation_ = other.translation_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                        translationBuilder_ = GeneratedMessageV3.alwaysUseFieldBuilders
                                ? getTranslationFieldBuilder() : null;
                    } else {
                        translationBuilder_.addAllMessages(other.translation_);
                    }
                }
            }
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            for (int i = 0; i < getTranslationCount(); i++) {
                if (!getTranslation(i).isInitialized()) {
                    return false;
                }
            }
            return true;
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            TranslatedString parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (TranslatedString) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private List<Translation> translation_ = Collections.emptyList();
        
        private void ensureTranslationIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                translation_ = new ArrayList<>(translation_);
                bitField0_ |= 0x00000001;
            }
        }
        
        private RepeatedFieldBuilderV3<Translation, Translation.Builder, TranslationOrBuilder>
                translationBuilder_;
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        @Override
        public List<Translation> getTranslationList() {
            if (translationBuilder_ == null) {
                return Collections.unmodifiableList(translation_);
            } else {
                return translationBuilder_.getMessageList();
            }
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        @Override
        public int getTranslationCount() {
            if (translationBuilder_ == null) {
                return translation_.size();
            } else {
                return translationBuilder_.getCount();
            }
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        @Override
        public Translation getTranslation(final int index) {
            if (translationBuilder_ == null) {
                return translation_.get(index);
            } else {
                return translationBuilder_.getMessage(index);
            }
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder setTranslation(final int index, final Translation value) {
            if (translationBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureTranslationIsMutable();
                translation_.set(index, value);
                onChanged();
            } else {
                translationBuilder_.setMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder setTranslation(final int index, final Translation.Builder builderForValue) {
            if (translationBuilder_ == null) {
                ensureTranslationIsMutable();
                translation_.set(index, builderForValue.build());
                onChanged();
            } else {
                translationBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder addTranslation(final Translation value) {
            if (translationBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureTranslationIsMutable();
                translation_.add(value);
                onChanged();
            } else {
                translationBuilder_.addMessage(value);
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder addTranslation(final int index, final Translation value) {
            if (translationBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureTranslationIsMutable();
                translation_.add(index, value);
                onChanged();
            } else {
                translationBuilder_.addMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder addTranslation(final Translation.Builder builderForValue) {
            if (translationBuilder_ == null) {
                ensureTranslationIsMutable();
                translation_.add(builderForValue.build());
                onChanged();
            } else {
                translationBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder addTranslation(final int index, final Translation.Builder builderForValue) {
            if (translationBuilder_ == null) {
                ensureTranslationIsMutable();
                translation_.add(index, builderForValue.build());
                onChanged();
            } else {
                translationBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder addAllTranslation(final Iterable<? extends Translation> values) {
            if (translationBuilder_ == null) {
                ensureTranslationIsMutable();
                AbstractMessageLite.Builder.addAll(values, translation_);
                onChanged();
            } else {
                translationBuilder_.addAllMessages(values);
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder clearTranslation() {
            if (translationBuilder_ == null) {
                translation_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
                onChanged();
            } else {
                translationBuilder_.clear();
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Builder removeTranslation(final int index) {
            if (translationBuilder_ == null) {
                ensureTranslationIsMutable();
                translation_.remove(index);
                onChanged();
            } else {
                translationBuilder_.remove(index);
            }
            return this;
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Translation.Builder getTranslationBuilder(final int index) {
            return getTranslationFieldBuilder().getBuilder(index);
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        @Override
        public TranslationOrBuilder getTranslationOrBuilder(final int index) {
            if (translationBuilder_ == null) {
                return translation_.get(index);
            } else {
                return translationBuilder_.getMessageOrBuilder(index);
            }
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        @Override
        public List<? extends TranslationOrBuilder> getTranslationOrBuilderList() {
            if (translationBuilder_ != null) {
                return translationBuilder_.getMessageOrBuilderList();
            } else {
                return Collections.unmodifiableList(translation_);
            }
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Translation.Builder addTranslationBuilder() {
            return getTranslationFieldBuilder().addBuilder(Translation.getDefaultInstance());
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public Translation.Builder addTranslationBuilder(final int index) {
            return getTranslationFieldBuilder().addBuilder(index, Translation.getDefaultInstance());
        }
        
        /**
         * <pre>
         * At least one translation must be provided.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TranslatedString.Translation translation = 1;</code>
         */
        public List<Translation.Builder> getTranslationBuilderList() {
            return getTranslationFieldBuilder().getBuilderList();
        }
        
        private RepeatedFieldBuilderV3<Translation, Translation.Builder, TranslationOrBuilder> 
        getTranslationFieldBuilder() {
            if (translationBuilder_ == null) {
                translationBuilder_ = new RepeatedFieldBuilderV3<>(translation_,
                        ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(),
                        isClean());
                translation_ = null;
            }
            return translationBuilder_;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.TranslatedString)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString)
    private static final TranslatedString DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new TranslatedString();
    }
    
    public static TranslatedString getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<TranslatedString> PARSER = new AbstractParser<>() {
        
        @Override
        public TranslatedString parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new TranslatedString(input, extensionRegistry);
        }
    };
    
    public static Parser<TranslatedString> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<TranslatedString> getParserForType() {
        return PARSER;
    }
    
    @Override
    public TranslatedString getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}