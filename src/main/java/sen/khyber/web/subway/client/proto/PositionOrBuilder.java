// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import com.google.protobuf.GeneratedMessageV3.ExtendableMessageOrBuilder;

public interface PositionOrBuilder extends ExtendableMessageOrBuilder<Position> {
    
    /**
     * <pre>
     * Degrees North, in the WGS-84 coordinate system.
     * </pre>
     * <p>
     * <code>required float latitude = 1;</code>
     */
    boolean hasLatitude();
    
    /**
     * <pre>
     * Degrees North, in the WGS-84 coordinate system.
     * </pre>
     * <p>
     * <code>required float latitude = 1;</code>
     */
    float getLatitude();
    
    /**
     * <pre>
     * Degrees East, in the WGS-84 coordinate system.
     * </pre>
     * <p>
     * <code>required float longitude = 2;</code>
     */
    boolean hasLongitude();
    
    /**
     * <pre>
     * Degrees East, in the WGS-84 coordinate system.
     * </pre>
     * <p>
     * <code>required float longitude = 2;</code>
     */
    float getLongitude();
    
    /**
     * <pre>
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     * </pre>
     * <p>
     * <code>optional float bearing = 3;</code>
     */
    boolean hasBearing();
    
    /**
     * <pre>
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     * </pre>
     * <p>
     * <code>optional float bearing = 3;</code>
     */
    float getBearing();
    
    /**
     * <pre>
     * Odometer value, in meters.
     * </pre>
     * <p>
     * <code>optional double odometer = 4;</code>
     */
    boolean hasOdometer();
    
    /**
     * <pre>
     * Odometer value, in meters.
     * </pre>
     * <p>
     * <code>optional double odometer = 4;</code>
     */
    double getOdometer();
    
    /**
     * <pre>
     * Momentary speed measured by the vehicle, in meters per second.
     * </pre>
     * <p>
     * <code>optional float speed = 5;</code>
     */
    boolean hasSpeed();
    
    /**
     * <pre>
     * Momentary speed measured by the vehicle, in meters per second.
     * </pre>
     * <p>
     * <code>optional float speed = 5;</code>
     */
    float getSpeed();
    
}