// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.EnumDescriptor;
import com.google.protobuf.Descriptors.EnumValueDescriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.Internal;
import com.google.protobuf.Internal.EnumLiteMap;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * NYCT Subway extensions for the trip descriptor
 * </pre>
 * <p>
 * Protobuf type {@code NyctTripDescriptor}
 */
public final class NyctTripDescriptor extends GeneratedMessageV3
        implements NyctTripDescriptorOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use NyctTripDescriptor.newBuilder() to construct.
    private NyctTripDescriptor(final GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }
    
    private NyctTripDescriptor() {
        trainId_ = "";
        isAssigned_ = false;
        direction_ = 1;
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private NyctTripDescriptor(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        trainId_ = bs;
                        break;
                    }
                    case 16: {
                        bitField0_ |= 0x00000002;
                        isAssigned_ = input.readBool();
                        break;
                    }
                    case 24: {
                        final int rawValue = input.readEnum();
                        final Direction value = Direction.valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(3, rawValue);
                        } else {
                            bitField0_ |= 0x00000004;
                            direction_ = rawValue;
                        }
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return NyctSubway.internal_static_NyctTripDescriptor_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return NyctSubway.internal_static_NyctTripDescriptor_fieldAccessorTable
                .ensureFieldAccessorsInitialized(NyctTripDescriptor.class, Builder.class);
    }
    
    /**
     * <pre>
     * The direction the train is moving.
     * </pre>
     * <p>
     * Protobuf enum {@code NyctTripDescriptor.Direction}
     */
    public enum Direction implements ProtocolMessageEnum {
        /**
         * <code>NORTH = 1;</code>
         */
        NORTH(1),
        /**
         * <code>EAST = 2;</code>
         */
        EAST(2),
        /**
         * <code>SOUTH = 3;</code>
         */
        SOUTH(3),
        /**
         * <code>WEST = 4;</code>
         */
        WEST(4),;
        
        /**
         * <code>NORTH = 1;</code>
         */
        public static final int NORTH_VALUE = 1;
        /**
         * <code>EAST = 2;</code>
         */
        public static final int EAST_VALUE = 2;
        /**
         * <code>SOUTH = 3;</code>
         */
        public static final int SOUTH_VALUE = 3;
        /**
         * <code>WEST = 4;</code>
         */
        public static final int WEST_VALUE = 4;
        
        
        @Override
        public final int getNumber() {
            return value;
        }
        
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static Direction valueOf(final int value) {
            return forNumber(value);
        }
        
        public static Direction forNumber(final int value) {
            switch (value) {
                case 1:
                    return NORTH;
                case 2:
                    return EAST;
                case 3:
                    return SOUTH;
                case 4:
                    return WEST;
                default:
                    return null;
            }
        }
        
        public static EnumLiteMap<Direction> internalGetValueMap() {
            return internalValueMap;
        }
        
        private static final EnumLiteMap<Direction> internalValueMap = new EnumLiteMap<>() {
            
            @Override
            public Direction findValueByNumber(final int number) {
                return forNumber(number);
            }
        };
        
        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        
        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }
        
        public static final EnumDescriptor getDescriptor() {
            return NyctTripDescriptor.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final Direction[] VALUES = values();
        
        public static Direction valueOf(final EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }
        
        private final int value;
        
        Direction(final int value) {
            this.value = value;
        }
        
        // @@protoc_insertion_point(enum_scope:NyctTripDescriptor.Direction)
    }
    
    private int bitField0_;
    public static final int TRAIN_ID_FIELD_NUMBER = 1;
    private volatile @Setter(AccessLevel.PRIVATE) Object trainId_;
    
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     * <p>
     * <code>optional string train_id = 1;</code>
     */
    @Override
    public boolean hasTrainId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     * <p>
     * <code>optional string train_id = 1;</code>
     */
    @Override
    public String getTrainId() {
        return ProtoUtils.asString(trainId_, this::setTrainId_);
    }
    
    /**
     * <pre>
     * The nyct_train_id is meant for internal use only. It provides an
     * easy way to associated GTFS-realtime trip identifiers with NYCT rail
     * operations identifier
     * The ATS office system assigns unique train identification (Train ID) to
     * each train operating within or ready to enter the mainline of the
     * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
     * as follows:
     * The first character represents the trip type designator. 0 identifies a
     * scheduled revenue trip. Other revenue trip values that are a result of a
     * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
     * train] also known as shortly lined service.
     * The second character 6 represents the trip line i.e. number 6 train The
     * third set of characters identify the decoded origin time. The last
     * character may be blank "on the whole minute" or + "30 seconds"
     * Note: Origin times will not change when there is a trip type change.  This
     * is followed by a three character "Origin Location" / "Destination
     * Location"
     * </pre>
     * <p>
     * <code>optional string train_id = 1;</code>
     */
    @Override
    public ByteString getTrainIdBytes() {
        return ProtoUtils.asBytes(trainId_, this::setTrainId_);
    }
    
    public static final int IS_ASSIGNED_FIELD_NUMBER = 2;
    private boolean isAssigned_;
    
    /**
     * <pre>
     * This trip has been assigned to a physical train. If true, this trip is
     * already underway or most likely will depart shortly.
     * Train Assignment is a function of the Automatic Train Supervision (ATS)
     * office system used by NYCT Rail Operations to monitor and track train
     * movements. ATS provides the ability to "assign" the nyct_train_id
     * attribute when a physical train is at its origin terminal. These assigned
     * trips have the is_assigned field set in the TripDescriptor.
     * When a train is at a terminal but has not been given a work program it is
     * declared unassigned and is tagged as such. Unassigned trains can be moved
     * to a storage location or assigned a nyct_train_id when a determination for
     * service is made.
     * </pre>
     * <p>
     * <code>optional bool is_assigned = 2;</code>
     */
    @Override
    public boolean hasIsAssigned() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * This trip has been assigned to a physical train. If true, this trip is
     * already underway or most likely will depart shortly.
     * Train Assignment is a function of the Automatic Train Supervision (ATS)
     * office system used by NYCT Rail Operations to monitor and track train
     * movements. ATS provides the ability to "assign" the nyct_train_id
     * attribute when a physical train is at its origin terminal. These assigned
     * trips have the is_assigned field set in the TripDescriptor.
     * When a train is at a terminal but has not been given a work program it is
     * declared unassigned and is tagged as such. Unassigned trains can be moved
     * to a storage location or assigned a nyct_train_id when a determination for
     * service is made.
     * </pre>
     * <p>
     * <code>optional bool is_assigned = 2;</code>
     */
    @Override
    public boolean getIsAssigned() {
        return isAssigned_;
    }
    
    public static final int DIRECTION_FIELD_NUMBER = 3;
    private int direction_;
    
    /**
     * <pre>
     * Uptown and Bronx-bound trains are moving NORTH.
     * Times Square Shuttle to Grand Central is also northbound.
     * Downtown and Brooklyn-bound trains are moving SOUTH.
     * Times Square Shuttle to Times Square is also southbound.
     * EAST and WEST are not used currently.
     * </pre>
     * <p>
     * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
     */
    @Override
    public boolean hasDirection() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * Uptown and Bronx-bound trains are moving NORTH.
     * Times Square Shuttle to Grand Central is also northbound.
     * Downtown and Brooklyn-bound trains are moving SOUTH.
     * Times Square Shuttle to Times Square is also southbound.
     * EAST and WEST are not used currently.
     * </pre>
     * <p>
     * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
     */
    @Override
    public Direction getDirection() {
        final Direction result = Direction.valueOf(direction_);
        return result == null ? Direction.NORTH : result;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            GeneratedMessageV3.writeString(output, 1, trainId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeBool(2, isAssigned_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeEnum(3, direction_);
        }
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += GeneratedMessageV3.computeStringSize(1, trainId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream.computeBoolSize(2, isAssigned_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream.computeEnumSize(3, direction_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof NyctTripDescriptor)) {
            return super.equals(obj);
        }
        final NyctTripDescriptor other = (NyctTripDescriptor) obj;
        
        boolean result = true;
        result = result && (hasTrainId() == other.hasTrainId());
        if (hasTrainId()) {
            result = result && getTrainId().equals(other.getTrainId());
        }
        result = result && (hasIsAssigned() == other.hasIsAssigned());
        if (hasIsAssigned()) {
            result = result && (getIsAssigned() == other.getIsAssigned());
        }
        result = result && (hasDirection() == other.hasDirection());
        if (hasDirection()) {
            result = result && direction_ == other.direction_;
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTrainId()) {
            hash = (37 * hash) + TRAIN_ID_FIELD_NUMBER;
            hash = (53 * hash) + getTrainId().hashCode();
        }
        if (hasIsAssigned()) {
            hash = (37 * hash) + IS_ASSIGNED_FIELD_NUMBER;
            hash = (53 * hash) + Internal.hashBoolean(getIsAssigned());
        }
        if (hasDirection()) {
            hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
            hash = (53 * hash) + direction_;
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static NyctTripDescriptor parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctTripDescriptor parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctTripDescriptor parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctTripDescriptor parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctTripDescriptor parseFrom(final byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctTripDescriptor parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctTripDescriptor parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static NyctTripDescriptor parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static NyctTripDescriptor parseDelimitedFrom(final InputStream input)
            throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static NyctTripDescriptor parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static NyctTripDescriptor parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static NyctTripDescriptor parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final NyctTripDescriptor prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * NYCT Subway extensions for the trip descriptor
     * </pre>
     * <p>
     * Protobuf type {@code NyctTripDescriptor}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:NyctTripDescriptor)
            NyctTripDescriptorOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return NyctSubway.internal_static_NyctTripDescriptor_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return NyctSubway.internal_static_NyctTripDescriptor_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(NyctTripDescriptor.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.NyctTripDescriptor.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            trainId_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            isAssigned_ = false;
            bitField0_ = (bitField0_ & ~0x00000002);
            direction_ = 1;
            bitField0_ = (bitField0_ & ~0x00000004);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return NyctSubway.internal_static_NyctTripDescriptor_descriptor;
        }
        
        @Override
        public NyctTripDescriptor getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public NyctTripDescriptor build() {
            final NyctTripDescriptor result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public NyctTripDescriptor buildPartial() {
            final NyctTripDescriptor result = new NyctTripDescriptor(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.trainId_ = trainId_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.isAssigned_ = isAssigned_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            result.direction_ = direction_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof NyctTripDescriptor) {
                return mergeFrom((NyctTripDescriptor) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final NyctTripDescriptor other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasTrainId()) {
                bitField0_ |= 0x00000001;
                trainId_ = other.trainId_;
                onChanged();
            }
            if (other.hasIsAssigned()) {
                setIsAssigned(other.getIsAssigned());
            }
            if (other.hasDirection()) {
                setDirection(other.getDirection());
            }
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            return true;
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            NyctTripDescriptor parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (NyctTripDescriptor) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private @Setter(AccessLevel.PRIVATE) Object trainId_ = "";
        
        /**
         * <pre>
         * The nyct_train_id is meant for internal use only. It provides an
         * easy way to associated GTFS-realtime trip identifiers with NYCT rail
         * operations identifier
         * The ATS office system assigns unique train identification (Train ID) to
         * each train operating within or ready to enter the mainline of the
         * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
         * as follows:
         * The first character represents the trip type designator. 0 identifies a
         * scheduled revenue trip. Other revenue trip values that are a result of a
         * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
         * train] also known as shortly lined service.
         * The second character 6 represents the trip line i.e. number 6 train The
         * third set of characters identify the decoded origin time. The last
         * character may be blank "on the whole minute" or + "30 seconds"
         * Note: Origin times will not change when there is a trip type change.  This
         * is followed by a three character "Origin Location" / "Destination
         * Location"
         * </pre>
         * <p>
         * <code>optional string train_id = 1;</code>
         */
        @Override
        public boolean hasTrainId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * The nyct_train_id is meant for internal use only. It provides an
         * easy way to associated GTFS-realtime trip identifiers with NYCT rail
         * operations identifier
         * The ATS office system assigns unique train identification (Train ID) to
         * each train operating within or ready to enter the mainline of the
         * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
         * as follows:
         * The first character represents the trip type designator. 0 identifies a
         * scheduled revenue trip. Other revenue trip values that are a result of a
         * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
         * train] also known as shortly lined service.
         * The second character 6 represents the trip line i.e. number 6 train The
         * third set of characters identify the decoded origin time. The last
         * character may be blank "on the whole minute" or + "30 seconds"
         * Note: Origin times will not change when there is a trip type change.  This
         * is followed by a three character "Origin Location" / "Destination
         * Location"
         * </pre>
         * <p>
         * <code>optional string train_id = 1;</code>
         */
        @Override
        public String getTrainId() {
            return ProtoUtils.asString(trainId_, this::setTrainId_);
        }
        
        /**
         * <pre>
         * The nyct_train_id is meant for internal use only. It provides an
         * easy way to associated GTFS-realtime trip identifiers with NYCT rail
         * operations identifier
         * The ATS office system assigns unique train identification (Train ID) to
         * each train operating within or ready to enter the mainline of the
         * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
         * as follows:
         * The first character represents the trip type designator. 0 identifies a
         * scheduled revenue trip. Other revenue trip values that are a result of a
         * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
         * train] also known as shortly lined service.
         * The second character 6 represents the trip line i.e. number 6 train The
         * third set of characters identify the decoded origin time. The last
         * character may be blank "on the whole minute" or + "30 seconds"
         * Note: Origin times will not change when there is a trip type change.  This
         * is followed by a three character "Origin Location" / "Destination
         * Location"
         * </pre>
         * <p>
         * <code>optional string train_id = 1;</code>
         */
        @Override
        public ByteString getTrainIdBytes() {
            return ProtoUtils.asBytes(trainId_, this::setTrainId_);
        }
        
        /**
         * <pre>
         * The nyct_train_id is meant for internal use only. It provides an
         * easy way to associated GTFS-realtime trip identifiers with NYCT rail
         * operations identifier
         * The ATS office system assigns unique train identification (Train ID) to
         * each train operating within or ready to enter the mainline of the
         * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
         * as follows:
         * The first character represents the trip type designator. 0 identifies a
         * scheduled revenue trip. Other revenue trip values that are a result of a
         * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
         * train] also known as shortly lined service.
         * The second character 6 represents the trip line i.e. number 6 train The
         * third set of characters identify the decoded origin time. The last
         * character may be blank "on the whole minute" or + "30 seconds"
         * Note: Origin times will not change when there is a trip type change.  This
         * is followed by a three character "Origin Location" / "Destination
         * Location"
         * </pre>
         * <p>
         * <code>optional string train_id = 1;</code>
         */
        public Builder setTrainId(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            trainId_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The nyct_train_id is meant for internal use only. It provides an
         * easy way to associated GTFS-realtime trip identifiers with NYCT rail
         * operations identifier
         * The ATS office system assigns unique train identification (Train ID) to
         * each train operating within or ready to enter the mainline of the
         * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
         * as follows:
         * The first character represents the trip type designator. 0 identifies a
         * scheduled revenue trip. Other revenue trip values that are a result of a
         * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
         * train] also known as shortly lined service.
         * The second character 6 represents the trip line i.e. number 6 train The
         * third set of characters identify the decoded origin time. The last
         * character may be blank "on the whole minute" or + "30 seconds"
         * Note: Origin times will not change when there is a trip type change.  This
         * is followed by a three character "Origin Location" / "Destination
         * Location"
         * </pre>
         * <p>
         * <code>optional string train_id = 1;</code>
         */
        public Builder clearTrainId() {
            bitField0_ = (bitField0_ & ~0x00000001);
            trainId_ = getDefaultInstance().getTrainId();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The nyct_train_id is meant for internal use only. It provides an
         * easy way to associated GTFS-realtime trip identifiers with NYCT rail
         * operations identifier
         * The ATS office system assigns unique train identification (Train ID) to
         * each train operating within or ready to enter the mainline of the
         * monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
         * as follows:
         * The first character represents the trip type designator. 0 identifies a
         * scheduled revenue trip. Other revenue trip values that are a result of a
         * change to the base schedule include; [= reroute], [/ skip stop], [$ turn
         * train] also known as shortly lined service.
         * The second character 6 represents the trip line i.e. number 6 train The
         * third set of characters identify the decoded origin time. The last
         * character may be blank "on the whole minute" or + "30 seconds"
         * Note: Origin times will not change when there is a trip type change.  This
         * is followed by a three character "Origin Location" / "Destination
         * Location"
         * </pre>
         * <p>
         * <code>optional string train_id = 1;</code>
         */
        public Builder setTrainIdBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            trainId_ = value;
            onChanged();
            return this;
        }
        
        private boolean isAssigned_;
        
        /**
         * <pre>
         * This trip has been assigned to a physical train. If true, this trip is
         * already underway or most likely will depart shortly.
         * Train Assignment is a function of the Automatic Train Supervision (ATS)
         * office system used by NYCT Rail Operations to monitor and track train
         * movements. ATS provides the ability to "assign" the nyct_train_id
         * attribute when a physical train is at its origin terminal. These assigned
         * trips have the is_assigned field set in the TripDescriptor.
         * When a train is at a terminal but has not been given a work program it is
         * declared unassigned and is tagged as such. Unassigned trains can be moved
         * to a storage location or assigned a nyct_train_id when a determination for
         * service is made.
         * </pre>
         * <p>
         * <code>optional bool is_assigned = 2;</code>
         */
        @Override
        public boolean hasIsAssigned() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * This trip has been assigned to a physical train. If true, this trip is
         * already underway or most likely will depart shortly.
         * Train Assignment is a function of the Automatic Train Supervision (ATS)
         * office system used by NYCT Rail Operations to monitor and track train
         * movements. ATS provides the ability to "assign" the nyct_train_id
         * attribute when a physical train is at its origin terminal. These assigned
         * trips have the is_assigned field set in the TripDescriptor.
         * When a train is at a terminal but has not been given a work program it is
         * declared unassigned and is tagged as such. Unassigned trains can be moved
         * to a storage location or assigned a nyct_train_id when a determination for
         * service is made.
         * </pre>
         * <p>
         * <code>optional bool is_assigned = 2;</code>
         */
        @Override
        public boolean getIsAssigned() {
            return isAssigned_;
        }
        
        /**
         * <pre>
         * This trip has been assigned to a physical train. If true, this trip is
         * already underway or most likely will depart shortly.
         * Train Assignment is a function of the Automatic Train Supervision (ATS)
         * office system used by NYCT Rail Operations to monitor and track train
         * movements. ATS provides the ability to "assign" the nyct_train_id
         * attribute when a physical train is at its origin terminal. These assigned
         * trips have the is_assigned field set in the TripDescriptor.
         * When a train is at a terminal but has not been given a work program it is
         * declared unassigned and is tagged as such. Unassigned trains can be moved
         * to a storage location or assigned a nyct_train_id when a determination for
         * service is made.
         * </pre>
         * <p>
         * <code>optional bool is_assigned = 2;</code>
         */
        public Builder setIsAssigned(final boolean value) {
            bitField0_ |= 0x00000002;
            isAssigned_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * This trip has been assigned to a physical train. If true, this trip is
         * already underway or most likely will depart shortly.
         * Train Assignment is a function of the Automatic Train Supervision (ATS)
         * office system used by NYCT Rail Operations to monitor and track train
         * movements. ATS provides the ability to "assign" the nyct_train_id
         * attribute when a physical train is at its origin terminal. These assigned
         * trips have the is_assigned field set in the TripDescriptor.
         * When a train is at a terminal but has not been given a work program it is
         * declared unassigned and is tagged as such. Unassigned trains can be moved
         * to a storage location or assigned a nyct_train_id when a determination for
         * service is made.
         * </pre>
         * <p>
         * <code>optional bool is_assigned = 2;</code>
         */
        public Builder clearIsAssigned() {
            bitField0_ = (bitField0_ & ~0x00000002);
            isAssigned_ = false;
            onChanged();
            return this;
        }
        
        private int direction_ = 1;
        
        /**
         * <pre>
         * Uptown and Bronx-bound trains are moving NORTH.
         * Times Square Shuttle to Grand Central is also northbound.
         * Downtown and Brooklyn-bound trains are moving SOUTH.
         * Times Square Shuttle to Times Square is also southbound.
         * EAST and WEST are not used currently.
         * </pre>
         * <p>
         * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
         */
        @Override
        public boolean hasDirection() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <pre>
         * Uptown and Bronx-bound trains are moving NORTH.
         * Times Square Shuttle to Grand Central is also northbound.
         * Downtown and Brooklyn-bound trains are moving SOUTH.
         * Times Square Shuttle to Times Square is also southbound.
         * EAST and WEST are not used currently.
         * </pre>
         * <p>
         * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
         */
        @Override
        public Direction getDirection() {
            final Direction result = Direction.valueOf(direction_);
            return result == null ? Direction.NORTH : result;
        }
        
        /**
         * <pre>
         * Uptown and Bronx-bound trains are moving NORTH.
         * Times Square Shuttle to Grand Central is also northbound.
         * Downtown and Brooklyn-bound trains are moving SOUTH.
         * Times Square Shuttle to Times Square is also southbound.
         * EAST and WEST are not used currently.
         * </pre>
         * <p>
         * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
         */
        public Builder setDirection(final Direction value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000004;
            direction_ = value.getNumber();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Uptown and Bronx-bound trains are moving NORTH.
         * Times Square Shuttle to Grand Central is also northbound.
         * Downtown and Brooklyn-bound trains are moving SOUTH.
         * Times Square Shuttle to Times Square is also southbound.
         * EAST and WEST are not used currently.
         * </pre>
         * <p>
         * <code>optional .NyctTripDescriptor.Direction direction = 3;</code>
         */
        public Builder clearDirection() {
            bitField0_ = (bitField0_ & ~0x00000004);
            direction_ = 1;
            onChanged();
            return this;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:NyctTripDescriptor)
    }
    
    // @@protoc_insertion_point(class_scope:NyctTripDescriptor)
    private static final NyctTripDescriptor DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new NyctTripDescriptor();
    }
    
    public static NyctTripDescriptor getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<NyctTripDescriptor> PARSER = new AbstractParser<>() {
        
        @Override
        public NyctTripDescriptor parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new NyctTripDescriptor(input, extensionRegistry);
        }
    };
    
    public static Parser<NyctTripDescriptor> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<NyctTripDescriptor> getParserForType() {
        return PARSER;
    }
    
    @Override
    public NyctTripDescriptor getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}