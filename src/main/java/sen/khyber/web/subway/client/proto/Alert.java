// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.EnumDescriptor;
import com.google.protobuf.Descriptors.EnumValueDescriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage.GeneratedExtension;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.GeneratedMessageV3.ExtendableMessage;
import com.google.protobuf.Internal.EnumLiteMap;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.RepeatedFieldBuilderV3;
import com.google.protobuf.SingleFieldBuilderV3;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * An alert, indicating some sort of incident in the public transit network.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.Alert}
 */
public final class Alert extends ExtendableMessage<Alert> implements
        // @@protoc_insertion_point(message_implements:transit_realtime.Alert)
        AlertOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use Alert.newBuilder() to construct.
    private Alert(final ExtendableBuilder<Alert, ?> builder) {
        super(builder);
    }
    
    private Alert() {
        activePeriod_ = Collections.emptyList();
        informedEntity_ = Collections.emptyList();
        cause_ = 1;
        effect_ = 8;
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private Alert(final CodedInputStream input, final ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                            activePeriod_ = new ArrayList<>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        activePeriod_.add(input.readMessage(TimeRange.PARSER, extensionRegistry));
                        break;
                    }
                    case 42: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            informedEntity_ = new ArrayList<>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        informedEntity_
                                .add(input.readMessage(EntitySelector.PARSER, extensionRegistry));
                        break;
                    }
                    case 48: {
                        final int rawValue = input.readEnum();
                        final Cause value = Cause.valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(6, rawValue);
                        } else {
                            bitField0_ |= 0x00000001;
                            cause_ = rawValue;
                        }
                        break;
                    }
                    case 56: {
                        final int rawValue = input.readEnum();
                        final Effect value = Effect.valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(7, rawValue);
                        } else {
                            bitField0_ |= 0x00000002;
                            effect_ = rawValue;
                        }
                        break;
                    }
                    case 66: {
                        TranslatedString.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000004) == 0x00000004)) {
                            subBuilder = url_.toBuilder();
                        }
                        url_ = input.readMessage(TranslatedString.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(url_);
                            url_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000004;
                        break;
                    }
                    case 82: {
                        TranslatedString.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000008) == 0x00000008)) {
                            subBuilder = headerText_.toBuilder();
                        }
                        headerText_ = input.readMessage(TranslatedString.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(headerText_);
                            headerText_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000008;
                        break;
                    }
                    case 90: {
                        TranslatedString.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000010) == 0x00000010)) {
                            subBuilder = descriptionText_.toBuilder();
                        }
                        descriptionText_ =
                                input.readMessage(TranslatedString.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(descriptionText_);
                            descriptionText_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000010;
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                activePeriod_ = Collections.unmodifiableList(activePeriod_);
            }
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                informedEntity_ = Collections.unmodifiableList(informedEntity_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_Alert_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_Alert_fieldAccessorTable
                .ensureFieldAccessorsInitialized(Alert.class, Builder.class);
    }
    
    /**
     * <pre>
     * Cause of this alert.
     * </pre>
     * <p>
     * Protobuf enum {@code transit_realtime.Alert.Cause}
     */
    public enum Cause implements ProtocolMessageEnum {
        /**
         * <code>UNKNOWN_CAUSE = 1;</code>
         */
        UNKNOWN_CAUSE(1),
        /**
         * <pre>
         * Not machine-representable.
         * </pre>
         * <p>
         * <code>OTHER_CAUSE = 2;</code>
         */
        OTHER_CAUSE(2),
        /**
         * <code>TECHNICAL_PROBLEM = 3;</code>
         */
        TECHNICAL_PROBLEM(3),
        /**
         * <pre>
         * Public transit agency employees stopped working.
         * </pre>
         * <p>
         * <code>STRIKE = 4;</code>
         */
        STRIKE(4),
        /**
         * <pre>
         * People are blocking the streets.
         * </pre>
         * <p>
         * <code>DEMONSTRATION = 5;</code>
         */
        DEMONSTRATION(5),
        /**
         * <code>ACCIDENT = 6;</code>
         */
        ACCIDENT(6),
        /**
         * <code>HOLIDAY = 7;</code>
         */
        HOLIDAY(7),
        /**
         * <code>WEATHER = 8;</code>
         */
        WEATHER(8),
        /**
         * <code>MAINTENANCE = 9;</code>
         */
        MAINTENANCE(9),
        /**
         * <code>CONSTRUCTION = 10;</code>
         */
        CONSTRUCTION(10),
        /**
         * <code>POLICE_ACTIVITY = 11;</code>
         */
        POLICE_ACTIVITY(11),
        /**
         * <code>MEDICAL_EMERGENCY = 12;</code>
         */
        MEDICAL_EMERGENCY(12),;
        
        /**
         * <code>UNKNOWN_CAUSE = 1;</code>
         */
        public static final int UNKNOWN_CAUSE_VALUE = 1;
        /**
         * <pre>
         * Not machine-representable.
         * </pre>
         * <p>
         * <code>OTHER_CAUSE = 2;</code>
         */
        public static final int OTHER_CAUSE_VALUE = 2;
        /**
         * <code>TECHNICAL_PROBLEM = 3;</code>
         */
        public static final int TECHNICAL_PROBLEM_VALUE = 3;
        /**
         * <pre>
         * Public transit agency employees stopped working.
         * </pre>
         * <p>
         * <code>STRIKE = 4;</code>
         */
        public static final int STRIKE_VALUE = 4;
        /**
         * <pre>
         * People are blocking the streets.
         * </pre>
         * <p>
         * <code>DEMONSTRATION = 5;</code>
         */
        public static final int DEMONSTRATION_VALUE = 5;
        /**
         * <code>ACCIDENT = 6;</code>
         */
        public static final int ACCIDENT_VALUE = 6;
        /**
         * <code>HOLIDAY = 7;</code>
         */
        public static final int HOLIDAY_VALUE = 7;
        /**
         * <code>WEATHER = 8;</code>
         */
        public static final int WEATHER_VALUE = 8;
        /**
         * <code>MAINTENANCE = 9;</code>
         */
        public static final int MAINTENANCE_VALUE = 9;
        /**
         * <code>CONSTRUCTION = 10;</code>
         */
        public static final int CONSTRUCTION_VALUE = 10;
        /**
         * <code>POLICE_ACTIVITY = 11;</code>
         */
        public static final int POLICE_ACTIVITY_VALUE = 11;
        /**
         * <code>MEDICAL_EMERGENCY = 12;</code>
         */
        public static final int MEDICAL_EMERGENCY_VALUE = 12;
        
        
        @Override
        public final int getNumber() {
            return value;
        }
        
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static Cause valueOf(final int value) {
            return forNumber(value);
        }
        
        public static Cause forNumber(final int value) {
            switch (value) {
                case 1:
                    return UNKNOWN_CAUSE;
                case 2:
                    return OTHER_CAUSE;
                case 3:
                    return TECHNICAL_PROBLEM;
                case 4:
                    return STRIKE;
                case 5:
                    return DEMONSTRATION;
                case 6:
                    return ACCIDENT;
                case 7:
                    return HOLIDAY;
                case 8:
                    return WEATHER;
                case 9:
                    return MAINTENANCE;
                case 10:
                    return CONSTRUCTION;
                case 11:
                    return POLICE_ACTIVITY;
                case 12:
                    return MEDICAL_EMERGENCY;
                default:
                    return null;
            }
        }
        
        public static EnumLiteMap<Cause> internalGetValueMap() {
            return internalValueMap;
        }
        
        private static final EnumLiteMap<Cause> internalValueMap = new EnumLiteMap<>() {
            
            @Override
            public Cause findValueByNumber(final int number) {
                return forNumber(number);
            }
        };
        
        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        
        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }
        
        public static final EnumDescriptor getDescriptor() {
            return Alert.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final Cause[] VALUES = values();
        
        public static Cause valueOf(final EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }
        
        private final int value;
        
        Cause(final int value) {
            this.value = value;
        }
        
        // @@protoc_insertion_point(enum_scope:transit_realtime.Alert.Cause)
    }
    
    /**
     * <pre>
     * What is the effect of this problem on the affected entity.
     * </pre>
     * <p>
     * Protobuf enum {@code transit_realtime.Alert.Effect}
     */
    public enum Effect implements ProtocolMessageEnum {
        /**
         * <code>NO_SERVICE = 1;</code>
         */
        NO_SERVICE(1),
        /**
         * <code>REDUCED_SERVICE = 2;</code>
         */
        REDUCED_SERVICE(2),
        /**
         * <pre>
         * We don't care about INsignificant delays: they are hard to detect, have
         * little impact on the user, and would clutter the results as they are too
         * frequent.
         * </pre>
         * <p>
         * <code>SIGNIFICANT_DELAYS = 3;</code>
         */
        SIGNIFICANT_DELAYS(3),
        /**
         * <code>DETOUR = 4;</code>
         */
        DETOUR(4),
        /**
         * <code>ADDITIONAL_SERVICE = 5;</code>
         */
        ADDITIONAL_SERVICE(5),
        /**
         * <code>MODIFIED_SERVICE = 6;</code>
         */
        MODIFIED_SERVICE(6),
        /**
         * <code>OTHER_EFFECT = 7;</code>
         */
        OTHER_EFFECT(7),
        /**
         * <code>UNKNOWN_EFFECT = 8;</code>
         */
        UNKNOWN_EFFECT(8),
        /**
         * <code>STOP_MOVED = 9;</code>
         */
        STOP_MOVED(9),;
        
        /**
         * <code>NO_SERVICE = 1;</code>
         */
        public static final int NO_SERVICE_VALUE = 1;
        /**
         * <code>REDUCED_SERVICE = 2;</code>
         */
        public static final int REDUCED_SERVICE_VALUE = 2;
        /**
         * <pre>
         * We don't care about INsignificant delays: they are hard to detect, have
         * little impact on the user, and would clutter the results as they are too
         * frequent.
         * </pre>
         * <p>
         * <code>SIGNIFICANT_DELAYS = 3;</code>
         */
        public static final int SIGNIFICANT_DELAYS_VALUE = 3;
        /**
         * <code>DETOUR = 4;</code>
         */
        public static final int DETOUR_VALUE = 4;
        /**
         * <code>ADDITIONAL_SERVICE = 5;</code>
         */
        public static final int ADDITIONAL_SERVICE_VALUE = 5;
        /**
         * <code>MODIFIED_SERVICE = 6;</code>
         */
        public static final int MODIFIED_SERVICE_VALUE = 6;
        /**
         * <code>OTHER_EFFECT = 7;</code>
         */
        public static final int OTHER_EFFECT_VALUE = 7;
        /**
         * <code>UNKNOWN_EFFECT = 8;</code>
         */
        public static final int UNKNOWN_EFFECT_VALUE = 8;
        /**
         * <code>STOP_MOVED = 9;</code>
         */
        public static final int STOP_MOVED_VALUE = 9;
        
        
        @Override
        public final int getNumber() {
            return value;
        }
        
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static Effect valueOf(final int value) {
            return forNumber(value);
        }
        
        public static Effect forNumber(final int value) {
            switch (value) {
                case 1:
                    return NO_SERVICE;
                case 2:
                    return REDUCED_SERVICE;
                case 3:
                    return SIGNIFICANT_DELAYS;
                case 4:
                    return DETOUR;
                case 5:
                    return ADDITIONAL_SERVICE;
                case 6:
                    return MODIFIED_SERVICE;
                case 7:
                    return OTHER_EFFECT;
                case 8:
                    return UNKNOWN_EFFECT;
                case 9:
                    return STOP_MOVED;
                default:
                    return null;
            }
        }
        
        public static EnumLiteMap<Effect> internalGetValueMap() {
            return internalValueMap;
        }
        
        private static final EnumLiteMap<Effect> internalValueMap = new EnumLiteMap<>() {
            
            @Override
            public Effect findValueByNumber(final int number) {
                return forNumber(number);
            }
        };
        
        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        
        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }
        
        public static final EnumDescriptor getDescriptor() {
            return Alert.getDescriptor().getEnumTypes().get(1);
        }
        
        private static final Effect[] VALUES = values();
        
        public static Effect valueOf(final EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }
        
        private final int value;
        
        Effect(final int value) {
            this.value = value;
        }
        
        // @@protoc_insertion_point(enum_scope:transit_realtime.Alert.Effect)
    }
    
    private int bitField0_;
    public static final int ACTIVE_PERIOD_FIELD_NUMBER = 1;
    private List<TimeRange> activePeriod_;
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    @Override
    public List<TimeRange> getActivePeriodList() {
        return activePeriod_;
    }
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    @Override
    public List<? extends TimeRangeOrBuilder> getActivePeriodOrBuilderList() {
        return activePeriod_;
    }
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    @Override
    public int getActivePeriodCount() {
        return activePeriod_.size();
    }
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    @Override
    public TimeRange getActivePeriod(final int index) {
        return activePeriod_.get(index);
    }
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    @Override
    public TimeRangeOrBuilder getActivePeriodOrBuilder(final int index) {
        return activePeriod_.get(index);
    }
    
    public static final int INFORMED_ENTITY_FIELD_NUMBER = 5;
    private List<EntitySelector> informedEntity_;
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    @Override
    public List<EntitySelector> getInformedEntityList() {
        return informedEntity_;
    }
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    @Override
    public List<? extends EntitySelectorOrBuilder> getInformedEntityOrBuilderList() {
        return informedEntity_;
    }
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    @Override
    public int getInformedEntityCount() {
        return informedEntity_.size();
    }
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    @Override
    public EntitySelector getInformedEntity(final int index) {
        return informedEntity_.get(index);
    }
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    @Override
    public EntitySelectorOrBuilder getInformedEntityOrBuilder(final int index) {
        return informedEntity_.get(index);
    }
    
    public static final int CAUSE_FIELD_NUMBER = 6;
    private int cause_;
    
    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    @Override
    public boolean hasCause() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    @Override
    public Cause getCause() {
        final Cause result = Cause.valueOf(cause_);
        return result == null ? Cause.UNKNOWN_CAUSE : result;
    }
    
    public static final int EFFECT_FIELD_NUMBER = 7;
    private int effect_;
    
    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    @Override
    public boolean hasEffect() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    @Override
    public Effect getEffect() {
        final Effect result = Effect.valueOf(effect_);
        return result == null ? Effect.UNKNOWN_EFFECT : result;
    }
    
    public static final int URL_FIELD_NUMBER = 8;
    private TranslatedString url_;
    
    /**
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     */
    @Override
    public boolean hasUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     */
    @Override
    public TranslatedString getUrl() {
        return url_ == null ? TranslatedString.getDefaultInstance() : url_;
    }
    
    /**
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     */
    @Override
    public TranslatedStringOrBuilder getUrlOrBuilder() {
        return url_ == null ? TranslatedString.getDefaultInstance() : url_;
    }
    
    public static final int HEADER_TEXT_FIELD_NUMBER = 10;
    private TranslatedString headerText_;
    
    /**
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     */
    @Override
    public boolean hasHeaderText() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    
    /**
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     */
    @Override
    public TranslatedString getHeaderText() {
        return headerText_ == null ? TranslatedString.getDefaultInstance() : headerText_;
    }
    
    /**
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     */
    @Override
    public TranslatedStringOrBuilder getHeaderTextOrBuilder() {
        return headerText_ == null ? TranslatedString.getDefaultInstance() : headerText_;
    }
    
    public static final int DESCRIPTION_TEXT_FIELD_NUMBER = 11;
    private TranslatedString descriptionText_;
    
    /**
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     */
    @Override
    public boolean hasDescriptionText() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    
    /**
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     */
    @Override
    public TranslatedString getDescriptionText() {
        return descriptionText_ == null ? TranslatedString.getDefaultInstance() : descriptionText_;
    }
    
    /**
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     */
    @Override
    public TranslatedStringOrBuilder getDescriptionTextOrBuilder() {
        return descriptionText_ == null ? TranslatedString.getDefaultInstance() : descriptionText_;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        for (int i = 0; i < getInformedEntityCount(); i++) {
            if (!getInformedEntity(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasUrl()) {
            if (!getUrl().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasHeaderText()) {
            if (!getHeaderText().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasDescriptionText()) {
            if (!getDescriptionText().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (!extensionsAreInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        final ExtendableMessage<Alert>.ExtensionWriter extensionWriter = newExtensionWriter();
        for (int i = 0; i < activePeriod_.size(); i++) {
            output.writeMessage(1, activePeriod_.get(i));
        }
        for (int i = 0; i < informedEntity_.size(); i++) {
            output.writeMessage(5, informedEntity_.get(i));
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeEnum(6, cause_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeEnum(7, effect_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeMessage(8, getUrl());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeMessage(10, getHeaderText());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeMessage(11, getDescriptionText());
        }
        extensionWriter.writeUntil(2000, output);
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        for (int i = 0; i < activePeriod_.size(); i++) {
            size += CodedOutputStream.computeMessageSize(1, activePeriod_.get(i));
        }
        for (int i = 0; i < informedEntity_.size(); i++) {
            size += CodedOutputStream.computeMessageSize(5, informedEntity_.get(i));
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream.computeEnumSize(6, cause_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream.computeEnumSize(7, effect_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream.computeMessageSize(8, getUrl());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += CodedOutputStream.computeMessageSize(10, getHeaderText());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += CodedOutputStream.computeMessageSize(11, getDescriptionText());
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Alert)) {
            return super.equals(obj);
        }
        final Alert other = (Alert) obj;
        
        boolean result = true;
        result = result && getActivePeriodList().equals(other.getActivePeriodList());
        result = result && getInformedEntityList().equals(other.getInformedEntityList());
        result = result && (hasCause() == other.hasCause());
        if (hasCause()) {
            result = result && cause_ == other.cause_;
        }
        result = result && (hasEffect() == other.hasEffect());
        if (hasEffect()) {
            result = result && effect_ == other.effect_;
        }
        result = result && (hasUrl() == other.hasUrl());
        if (hasUrl()) {
            result = result && getUrl().equals(other.getUrl());
        }
        result = result && (hasHeaderText() == other.hasHeaderText());
        if (hasHeaderText()) {
            result = result && getHeaderText().equals(other.getHeaderText());
        }
        result = result && (hasDescriptionText() == other.hasDescriptionText());
        if (hasDescriptionText()) {
            result = result && getDescriptionText().equals(other.getDescriptionText());
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result && getExtensionFields().equals(other.getExtensionFields());
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getActivePeriodCount() > 0) {
            hash = (37 * hash) + ACTIVE_PERIOD_FIELD_NUMBER;
            hash = (53 * hash) + getActivePeriodList().hashCode();
        }
        if (getInformedEntityCount() > 0) {
            hash = (37 * hash) + INFORMED_ENTITY_FIELD_NUMBER;
            hash = (53 * hash) + getInformedEntityList().hashCode();
        }
        if (hasCause()) {
            hash = (37 * hash) + CAUSE_FIELD_NUMBER;
            hash = (53 * hash) + cause_;
        }
        if (hasEffect()) {
            hash = (37 * hash) + EFFECT_FIELD_NUMBER;
            hash = (53 * hash) + effect_;
        }
        if (hasUrl()) {
            hash = (37 * hash) + URL_FIELD_NUMBER;
            hash = (53 * hash) + getUrl().hashCode();
        }
        if (hasHeaderText()) {
            hash = (37 * hash) + HEADER_TEXT_FIELD_NUMBER;
            hash = (53 * hash) + getHeaderText().hashCode();
        }
        if (hasDescriptionText()) {
            hash = (37 * hash) + DESCRIPTION_TEXT_FIELD_NUMBER;
            hash = (53 * hash) + getDescriptionText().hashCode();
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static Alert parseFrom(final ByteBuffer data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static Alert parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static Alert parseFrom(final ByteString data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static Alert parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static Alert parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static Alert parseFrom(final byte[] data, final ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static Alert parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static Alert parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static Alert parseDelimitedFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static Alert parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static Alert parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static Alert parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final Alert prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * An alert, indicating some sort of incident in the public transit network.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.Alert}
     */
    public static final class Builder extends ExtendableBuilder<Alert, Builder> implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.Alert)
            AlertOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_Alert_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime.internal_static_transit_realtime_Alert_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(Alert.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.Alert.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                getActivePeriodFieldBuilder();
                getInformedEntityFieldBuilder();
                getUrlFieldBuilder();
                getHeaderTextFieldBuilder();
                getDescriptionTextFieldBuilder();
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            if (activePeriodBuilder_ == null) {
                activePeriod_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
            } else {
                activePeriodBuilder_.clear();
            }
            if (informedEntityBuilder_ == null) {
                informedEntity_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
            } else {
                informedEntityBuilder_.clear();
            }
            cause_ = 1;
            bitField0_ = (bitField0_ & ~0x00000004);
            effect_ = 8;
            bitField0_ = (bitField0_ & ~0x00000008);
            if (urlBuilder_ == null) {
                url_ = null;
            } else {
                urlBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000010);
            if (headerTextBuilder_ == null) {
                headerText_ = null;
            } else {
                headerTextBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000020);
            if (descriptionTextBuilder_ == null) {
                descriptionText_ = null;
            } else {
                descriptionTextBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000040);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_Alert_descriptor;
        }
        
        @Override
        public Alert getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public Alert build() {
            final Alert result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public Alert buildPartial() {
            final Alert result = new Alert(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (activePeriodBuilder_ == null) {
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    activePeriod_ = Collections.unmodifiableList(activePeriod_);
                    bitField0_ = (bitField0_ & ~0x00000001);
                }
                result.activePeriod_ = activePeriod_;
            } else {
                result.activePeriod_ = activePeriodBuilder_.build();
            }
            if (informedEntityBuilder_ == null) {
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    informedEntity_ = Collections.unmodifiableList(informedEntity_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.informedEntity_ = informedEntity_;
            } else {
                result.informedEntity_ = informedEntityBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000001;
            }
            result.cause_ = cause_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000002;
            }
            result.effect_ = effect_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                to_bitField0_ |= 0x00000004;
            }
            if (urlBuilder_ == null) {
                result.url_ = url_;
            } else {
                result.url_ = urlBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                to_bitField0_ |= 0x00000008;
            }
            if (headerTextBuilder_ == null) {
                result.headerText_ = headerText_;
            } else {
                result.headerText_ = headerTextBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                to_bitField0_ |= 0x00000010;
            }
            if (descriptionTextBuilder_ == null) {
                result.descriptionText_ = descriptionText_;
            } else {
                result.descriptionText_ = descriptionTextBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public <Type> Builder setExtension(final GeneratedExtension<Alert, Type> extension,
                final Type value) {
            return super.setExtension(extension, value);
        }
        
        @Override
        public <Type> Builder setExtension(final GeneratedExtension<Alert, List<Type>> extension,
                final int index, final Type value) {
            return super.setExtension(extension, index, value);
        }
        
        @Override
        public <Type> Builder addExtension(final GeneratedExtension<Alert, List<Type>> extension,
                final Type value) {
            return super.addExtension(extension, value);
        }
        
        @Override
        public <Type> Builder clearExtension(final GeneratedExtension<Alert, ?> extension) {
            return super.clearExtension(extension);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof Alert) {
                return mergeFrom((Alert) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final Alert other) {
            if (other == getDefaultInstance()) {return this;}
            if (activePeriodBuilder_ == null) {
                if (!other.activePeriod_.isEmpty()) {
                    if (activePeriod_.isEmpty()) {
                        activePeriod_ = other.activePeriod_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                    } else {
                        ensureActivePeriodIsMutable();
                        activePeriod_.addAll(other.activePeriod_);
                    }
                    onChanged();
                }
            } else {
                if (!other.activePeriod_.isEmpty()) {
                    if (activePeriodBuilder_.isEmpty()) {
                        activePeriodBuilder_.dispose();
                        activePeriodBuilder_ = null;
                        activePeriod_ = other.activePeriod_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                        activePeriodBuilder_ = GeneratedMessageV3.alwaysUseFieldBuilders
                                ? getActivePeriodFieldBuilder() : null;
                    } else {
                        activePeriodBuilder_.addAllMessages(other.activePeriod_);
                    }
                }
            }
            if (informedEntityBuilder_ == null) {
                if (!other.informedEntity_.isEmpty()) {
                    if (informedEntity_.isEmpty()) {
                        informedEntity_ = other.informedEntity_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureInformedEntityIsMutable();
                        informedEntity_.addAll(other.informedEntity_);
                    }
                    onChanged();
                }
            } else {
                if (!other.informedEntity_.isEmpty()) {
                    if (informedEntityBuilder_.isEmpty()) {
                        informedEntityBuilder_.dispose();
                        informedEntityBuilder_ = null;
                        informedEntity_ = other.informedEntity_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                        informedEntityBuilder_ = GeneratedMessageV3.alwaysUseFieldBuilders
                                ? getInformedEntityFieldBuilder() : null;
                    } else {
                        informedEntityBuilder_.addAllMessages(other.informedEntity_);
                    }
                }
            }
            if (other.hasCause()) {
                setCause(other.getCause());
            }
            if (other.hasEffect()) {
                setEffect(other.getEffect());
            }
            if (other.hasUrl()) {
                mergeUrl(other.getUrl());
            }
            if (other.hasHeaderText()) {
                mergeHeaderText(other.getHeaderText());
            }
            if (other.hasDescriptionText()) {
                mergeDescriptionText(other.getDescriptionText());
            }
            mergeExtensionFields(other);
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            for (int i = 0; i < getInformedEntityCount(); i++) {
                if (!getInformedEntity(i).isInitialized()) {
                    return false;
                }
            }
            if (hasUrl()) {
                if (!getUrl().isInitialized()) {
                    return false;
                }
            }
            if (hasHeaderText()) {
                if (!getHeaderText().isInitialized()) {
                    return false;
                }
            }
            if (hasDescriptionText()) {
                if (!getDescriptionText().isInitialized()) {
                    return false;
                }
            }
            return extensionsAreInitialized();
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            Alert parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (Alert) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private List<TimeRange> activePeriod_ = Collections.emptyList();
        
        private void ensureActivePeriodIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                activePeriod_ = new ArrayList<>(activePeriod_);
                bitField0_ |= 0x00000001;
            }
        }
        
        private RepeatedFieldBuilderV3<TimeRange, TimeRange.Builder, TimeRangeOrBuilder>
                activePeriodBuilder_;
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        @Override
        public List<TimeRange> getActivePeriodList() {
            if (activePeriodBuilder_ == null) {
                return Collections.unmodifiableList(activePeriod_);
            } else {
                return activePeriodBuilder_.getMessageList();
            }
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        @Override
        public int getActivePeriodCount() {
            if (activePeriodBuilder_ == null) {
                return activePeriod_.size();
            } else {
                return activePeriodBuilder_.getCount();
            }
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        @Override
        public TimeRange getActivePeriod(final int index) {
            if (activePeriodBuilder_ == null) {
                return activePeriod_.get(index);
            } else {
                return activePeriodBuilder_.getMessage(index);
            }
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder setActivePeriod(final int index, final TimeRange value) {
            if (activePeriodBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureActivePeriodIsMutable();
                activePeriod_.set(index, value);
                onChanged();
            } else {
                activePeriodBuilder_.setMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder setActivePeriod(final int index, final TimeRange.Builder builderForValue) {
            if (activePeriodBuilder_ == null) {
                ensureActivePeriodIsMutable();
                activePeriod_.set(index, builderForValue.build());
                onChanged();
            } else {
                activePeriodBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder addActivePeriod(final TimeRange value) {
            if (activePeriodBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureActivePeriodIsMutable();
                activePeriod_.add(value);
                onChanged();
            } else {
                activePeriodBuilder_.addMessage(value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder addActivePeriod(final int index, final TimeRange value) {
            if (activePeriodBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureActivePeriodIsMutable();
                activePeriod_.add(index, value);
                onChanged();
            } else {
                activePeriodBuilder_.addMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder addActivePeriod(final TimeRange.Builder builderForValue) {
            if (activePeriodBuilder_ == null) {
                ensureActivePeriodIsMutable();
                activePeriod_.add(builderForValue.build());
                onChanged();
            } else {
                activePeriodBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder addActivePeriod(final int index, final TimeRange.Builder builderForValue) {
            if (activePeriodBuilder_ == null) {
                ensureActivePeriodIsMutable();
                activePeriod_.add(index, builderForValue.build());
                onChanged();
            } else {
                activePeriodBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder addAllActivePeriod(final Iterable<? extends TimeRange> values) {
            if (activePeriodBuilder_ == null) {
                ensureActivePeriodIsMutable();
                addAll(values, activePeriod_);
                onChanged();
            } else {
                activePeriodBuilder_.addAllMessages(values);
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder clearActivePeriod() {
            if (activePeriodBuilder_ == null) {
                activePeriod_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
                onChanged();
            } else {
                activePeriodBuilder_.clear();
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public Builder removeActivePeriod(final int index) {
            if (activePeriodBuilder_ == null) {
                ensureActivePeriodIsMutable();
                activePeriod_.remove(index);
                onChanged();
            } else {
                activePeriodBuilder_.remove(index);
            }
            return this;
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public TimeRange.Builder getActivePeriodBuilder(final int index) {
            return getActivePeriodFieldBuilder().getBuilder(index);
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        @Override
        public TimeRangeOrBuilder getActivePeriodOrBuilder(final int index) {
            if (activePeriodBuilder_ == null) {
                return activePeriod_.get(index);
            } else {
                return activePeriodBuilder_.getMessageOrBuilder(index);
            }
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        @Override
        public List<? extends TimeRangeOrBuilder> getActivePeriodOrBuilderList() {
            if (activePeriodBuilder_ != null) {
                return activePeriodBuilder_.getMessageOrBuilderList();
            } else {
                return Collections.unmodifiableList(activePeriod_);
            }
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public TimeRange.Builder addActivePeriodBuilder() {
            return getActivePeriodFieldBuilder().addBuilder(TimeRange.getDefaultInstance());
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public TimeRange.Builder addActivePeriodBuilder(final int index) {
            return getActivePeriodFieldBuilder().addBuilder(index, TimeRange.getDefaultInstance());
        }
        
        /**
         * <pre>
         * Time when the alert should be shown to the user. If missing, the
         * alert will be shown as long as it appears in the feed.
         * If multiple ranges are given, the alert will be shown during all of them.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
         */
        public List<TimeRange.Builder> getActivePeriodBuilderList() {
            return getActivePeriodFieldBuilder().getBuilderList();
        }
        
        private RepeatedFieldBuilderV3<TimeRange, TimeRange.Builder, TimeRangeOrBuilder> 
        getActivePeriodFieldBuilder() {
            if (activePeriodBuilder_ == null) {
                activePeriodBuilder_ = new RepeatedFieldBuilderV3<>(activePeriod_,
                        ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(),
                        isClean());
                activePeriod_ = null;
            }
            return activePeriodBuilder_;
        }
        
        private List<EntitySelector> informedEntity_ = Collections.emptyList();
        
        private void ensureInformedEntityIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                informedEntity_ = new ArrayList<>(informedEntity_);
                bitField0_ |= 0x00000002;
            }
        }
        
        private RepeatedFieldBuilderV3<EntitySelector, EntitySelector.Builder, 
                EntitySelectorOrBuilder>
                informedEntityBuilder_;
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        @Override
        public List<EntitySelector> getInformedEntityList() {
            if (informedEntityBuilder_ == null) {
                return Collections.unmodifiableList(informedEntity_);
            } else {
                return informedEntityBuilder_.getMessageList();
            }
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        @Override
        public int getInformedEntityCount() {
            if (informedEntityBuilder_ == null) {
                return informedEntity_.size();
            } else {
                return informedEntityBuilder_.getCount();
            }
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        @Override
        public EntitySelector getInformedEntity(final int index) {
            if (informedEntityBuilder_ == null) {
                return informedEntity_.get(index);
            } else {
                return informedEntityBuilder_.getMessage(index);
            }
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder setInformedEntity(final int index, final EntitySelector value) {
            if (informedEntityBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureInformedEntityIsMutable();
                informedEntity_.set(index, value);
                onChanged();
            } else {
                informedEntityBuilder_.setMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder setInformedEntity(final int index,
                final EntitySelector.Builder builderForValue) {
            if (informedEntityBuilder_ == null) {
                ensureInformedEntityIsMutable();
                informedEntity_.set(index, builderForValue.build());
                onChanged();
            } else {
                informedEntityBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder addInformedEntity(final EntitySelector value) {
            if (informedEntityBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureInformedEntityIsMutable();
                informedEntity_.add(value);
                onChanged();
            } else {
                informedEntityBuilder_.addMessage(value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder addInformedEntity(final int index, final EntitySelector value) {
            if (informedEntityBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureInformedEntityIsMutable();
                informedEntity_.add(index, value);
                onChanged();
            } else {
                informedEntityBuilder_.addMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder addInformedEntity(final EntitySelector.Builder builderForValue) {
            if (informedEntityBuilder_ == null) {
                ensureInformedEntityIsMutable();
                informedEntity_.add(builderForValue.build());
                onChanged();
            } else {
                informedEntityBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder addInformedEntity(final int index,
                final EntitySelector.Builder builderForValue) {
            if (informedEntityBuilder_ == null) {
                ensureInformedEntityIsMutable();
                informedEntity_.add(index, builderForValue.build());
                onChanged();
            } else {
                informedEntityBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder addAllInformedEntity(final Iterable<? extends EntitySelector> values) {
            if (informedEntityBuilder_ == null) {
                ensureInformedEntityIsMutable();
                addAll(values, informedEntity_);
                onChanged();
            } else {
                informedEntityBuilder_.addAllMessages(values);
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder clearInformedEntity() {
            if (informedEntityBuilder_ == null) {
                informedEntity_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
            } else {
                informedEntityBuilder_.clear();
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public Builder removeInformedEntity(final int index) {
            if (informedEntityBuilder_ == null) {
                ensureInformedEntityIsMutable();
                informedEntity_.remove(index);
                onChanged();
            } else {
                informedEntityBuilder_.remove(index);
            }
            return this;
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public EntitySelector.Builder getInformedEntityBuilder(final int index) {
            return getInformedEntityFieldBuilder().getBuilder(index);
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        @Override
        public EntitySelectorOrBuilder getInformedEntityOrBuilder(final int index) {
            if (informedEntityBuilder_ == null) {
                return informedEntity_.get(index);
            } else {
                return informedEntityBuilder_.getMessageOrBuilder(index);
            }
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        @Override
        public List<? extends EntitySelectorOrBuilder> getInformedEntityOrBuilderList() {
            if (informedEntityBuilder_ != null) {
                return informedEntityBuilder_.getMessageOrBuilderList();
            } else {
                return Collections.unmodifiableList(informedEntity_);
            }
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public EntitySelector.Builder addInformedEntityBuilder() {
            return getInformedEntityFieldBuilder().addBuilder(EntitySelector.getDefaultInstance());
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public EntitySelector.Builder addInformedEntityBuilder(final int index) {
            return getInformedEntityFieldBuilder()
                    .addBuilder(index, EntitySelector.getDefaultInstance());
        }
        
        /**
         * <pre>
         * Entities whose users we should notify of this alert.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
         */
        public List<EntitySelector.Builder> getInformedEntityBuilderList() {
            return getInformedEntityFieldBuilder().getBuilderList();
        }
        
        private RepeatedFieldBuilderV3<EntitySelector, EntitySelector.Builder, 
                EntitySelectorOrBuilder> getInformedEntityFieldBuilder() {
            if (informedEntityBuilder_ == null) {
                informedEntityBuilder_ = new RepeatedFieldBuilderV3<>(informedEntity_,
                        ((bitField0_ & 0x00000002) == 0x00000002), getParentForChildren(),
                        isClean());
                informedEntity_ = null;
            }
            return informedEntityBuilder_;
        }
        
        private int cause_ = 1;
        
        /**
         * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
         */
        @Override
        public boolean hasCause() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
         */
        @Override
        public Cause getCause() {
            final Cause result = Cause.valueOf(cause_);
            return result == null ? Cause.UNKNOWN_CAUSE : result;
        }
        
        /**
         * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
         */
        public Builder setCause(final Cause value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000004;
            cause_ = value.getNumber();
            onChanged();
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
         */
        public Builder clearCause() {
            bitField0_ = (bitField0_ & ~0x00000004);
            cause_ = 1;
            onChanged();
            return this;
        }
        
        private int effect_ = 8;
        
        /**
         * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
         * </code>
         */
        @Override
        public boolean hasEffect() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        
        /**
         * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
         * </code>
         */
        @Override
        public Effect getEffect() {
            final Effect result = Effect.valueOf(effect_);
            return result == null ? Effect.UNKNOWN_EFFECT : result;
        }
        
        /**
         * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
         * </code>
         */
        public Builder setEffect(final Effect value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000008;
            effect_ = value.getNumber();
            onChanged();
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
         * </code>
         */
        public Builder clearEffect() {
            bitField0_ = (bitField0_ & ~0x00000008);
            effect_ = 8;
            onChanged();
            return this;
        }
        
        private TranslatedString url_ = null;
        private SingleFieldBuilderV3<TranslatedString, TranslatedString.Builder, 
                TranslatedStringOrBuilder>
                urlBuilder_;
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        @Override
        public boolean hasUrl() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        @Override
        public TranslatedString getUrl() {
            if (urlBuilder_ == null) {
                return url_ == null ? TranslatedString.getDefaultInstance() : url_;
            } else {
                return urlBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        public Builder setUrl(final TranslatedString value) {
            if (urlBuilder_ == null) {
                Objects.requireNonNull(value);
                url_ = value;
                onChanged();
            } else {
                urlBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000010;
            return this;
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        public Builder setUrl(final TranslatedString.Builder builderForValue) {
            if (urlBuilder_ == null) {
                url_ = builderForValue.build();
                onChanged();
            } else {
                urlBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000010;
            return this;
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        public Builder mergeUrl(final TranslatedString value) {
            if (urlBuilder_ == null) {
                if (((bitField0_ & 0x00000010) == 0x00000010) && url_ != null
                        && url_ != TranslatedString.getDefaultInstance()) {
                    url_ = TranslatedString.newBuilder(url_).mergeFrom(value).buildPartial();
                } else {
                    url_ = value;
                }
                onChanged();
            } else {
                urlBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000010;
            return this;
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        public Builder clearUrl() {
            if (urlBuilder_ == null) {
                url_ = null;
                onChanged();
            } else {
                urlBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000010);
            return this;
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        public TranslatedString.Builder getUrlBuilder() {
            bitField0_ |= 0x00000010;
            onChanged();
            return getUrlFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        @Override
        public TranslatedStringOrBuilder getUrlOrBuilder() {
            if (urlBuilder_ != null) {
                return urlBuilder_.getMessageOrBuilder();
            } else {
                return url_ == null ? TranslatedString.getDefaultInstance() : url_;
            }
        }
        
        /**
         * <pre>
         * The URL which provides additional information about the alert.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString url = 8;</code>
         */
        private SingleFieldBuilderV3<TranslatedString, TranslatedString.Builder, 
                TranslatedStringOrBuilder> getUrlFieldBuilder() {
            if (urlBuilder_ == null) {
                urlBuilder_ =
                        new SingleFieldBuilderV3<>(getUrl(), getParentForChildren(), isClean());
                url_ = null;
            }
            return urlBuilder_;
        }
        
        private TranslatedString headerText_ = null;
        private SingleFieldBuilderV3<TranslatedString, TranslatedString.Builder, 
                TranslatedStringOrBuilder>
                headerTextBuilder_;
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        @Override
        public boolean hasHeaderText() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        @Override
        public TranslatedString getHeaderText() {
            if (headerTextBuilder_ == null) {
                return headerText_ == null ? TranslatedString.getDefaultInstance() : headerText_;
            } else {
                return headerTextBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        public Builder setHeaderText(final TranslatedString value) {
            if (headerTextBuilder_ == null) {
                Objects.requireNonNull(value);
                headerText_ = value;
                onChanged();
            } else {
                headerTextBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000020;
            return this;
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        public Builder setHeaderText(final TranslatedString.Builder builderForValue) {
            if (headerTextBuilder_ == null) {
                headerText_ = builderForValue.build();
                onChanged();
            } else {
                headerTextBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000020;
            return this;
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        public Builder mergeHeaderText(final TranslatedString value) {
            if (headerTextBuilder_ == null) {
                if (((bitField0_ & 0x00000020) == 0x00000020) && headerText_ != null
                        && headerText_ != TranslatedString.getDefaultInstance()) {
                    headerText_ = TranslatedString.newBuilder(headerText_).mergeFrom(value)
                            .buildPartial();
                } else {
                    headerText_ = value;
                }
                onChanged();
            } else {
                headerTextBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000020;
            return this;
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        public Builder clearHeaderText() {
            if (headerTextBuilder_ == null) {
                headerText_ = null;
                onChanged();
            } else {
                headerTextBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000020);
            return this;
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        public TranslatedString.Builder getHeaderTextBuilder() {
            bitField0_ |= 0x00000020;
            onChanged();
            return getHeaderTextFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        @Override
        public TranslatedStringOrBuilder getHeaderTextOrBuilder() {
            if (headerTextBuilder_ != null) {
                return headerTextBuilder_.getMessageOrBuilder();
            } else {
                return headerText_ == null ? TranslatedString.getDefaultInstance() : headerText_;
            }
        }
        
        /**
         * <pre>
         * Alert header. Contains a short summary of the alert text as plain-text.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
         */
        private SingleFieldBuilderV3<TranslatedString, TranslatedString.Builder, 
                TranslatedStringOrBuilder> getHeaderTextFieldBuilder() {
            if (headerTextBuilder_ == null) {
                headerTextBuilder_ =
                        new SingleFieldBuilderV3<>(getHeaderText(), getParentForChildren(),
                                isClean());
                headerText_ = null;
            }
            return headerTextBuilder_;
        }
        
        private TranslatedString descriptionText_ = null;
        private SingleFieldBuilderV3<TranslatedString, TranslatedString.Builder, 
                TranslatedStringOrBuilder>
                descriptionTextBuilder_;
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        @Override
        public boolean hasDescriptionText() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        @Override
        public TranslatedString getDescriptionText() {
            if (descriptionTextBuilder_ == null) {
                return descriptionText_ == null ? TranslatedString.getDefaultInstance()
                        : descriptionText_;
            } else {
                return descriptionTextBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        public Builder setDescriptionText(final TranslatedString value) {
            if (descriptionTextBuilder_ == null) {
                Objects.requireNonNull(value);
                descriptionText_ = value;
                onChanged();
            } else {
                descriptionTextBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000040;
            return this;
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        public Builder setDescriptionText(final TranslatedString.Builder builderForValue) {
            if (descriptionTextBuilder_ == null) {
                descriptionText_ = builderForValue.build();
                onChanged();
            } else {
                descriptionTextBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000040;
            return this;
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        public Builder mergeDescriptionText(final TranslatedString value) {
            if (descriptionTextBuilder_ == null) {
                if (((bitField0_ & 0x00000040) == 0x00000040) && descriptionText_ != null
                        && descriptionText_ != TranslatedString.getDefaultInstance()) {
                    descriptionText_ =
                            TranslatedString.newBuilder(descriptionText_).mergeFrom(value)
                                    .buildPartial();
                } else {
                    descriptionText_ = value;
                }
                onChanged();
            } else {
                descriptionTextBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000040;
            return this;
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        public Builder clearDescriptionText() {
            if (descriptionTextBuilder_ == null) {
                descriptionText_ = null;
                onChanged();
            } else {
                descriptionTextBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000040);
            return this;
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        public TranslatedString.Builder getDescriptionTextBuilder() {
            bitField0_ |= 0x00000040;
            onChanged();
            return getDescriptionTextFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        @Override
        public TranslatedStringOrBuilder getDescriptionTextOrBuilder() {
            if (descriptionTextBuilder_ != null) {
                return descriptionTextBuilder_.getMessageOrBuilder();
            } else {
                return descriptionText_ == null ? TranslatedString.getDefaultInstance()
                        : descriptionText_;
            }
        }
        
        /**
         * <pre>
         * Full description for the alert as plain-text. The information in the
         * description should add to the information of the header.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
         */
        private SingleFieldBuilderV3<TranslatedString, TranslatedString.Builder, 
                TranslatedStringOrBuilder> getDescriptionTextFieldBuilder() {
            if (descriptionTextBuilder_ == null) {
                descriptionTextBuilder_ =
                        new SingleFieldBuilderV3<>(getDescriptionText(), getParentForChildren(),
                                isClean());
                descriptionText_ = null;
            }
            return descriptionTextBuilder_;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.Alert)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.Alert)
    private static final Alert DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new Alert();
    }
    
    public static Alert getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<Alert> PARSER = new AbstractParser<>() {
        
        @Override
        public Alert parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new Alert(input, extensionRegistry);
        }
    };
    
    public static Parser<Alert> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<Alert> getParserForType() {
        return PARSER;
    }
    
    @Override
    public Alert getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}