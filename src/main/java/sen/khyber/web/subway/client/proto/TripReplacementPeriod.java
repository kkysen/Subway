// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.Objects;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.SingleFieldBuilderV3;
import com.google.protobuf.UnknownFieldSet;

/**
 * Protobuf type {@code TripReplacementPeriod}
 */
public final class TripReplacementPeriod extends GeneratedMessageV3
        implements TripReplacementPeriodOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use TripReplacementPeriod.newBuilder() to construct.
    private TripReplacementPeriod(final GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }
    
    private TripReplacementPeriod() {
        routeId_ = "";
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private TripReplacementPeriod(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        routeId_ = bs;
                        break;
                    }
                    case 18: {
                        TimeRange.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            subBuilder = replacementPeriod_.toBuilder();
                        }
                        replacementPeriod_ = input.readMessage(TimeRange.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(replacementPeriod_);
                            replacementPeriod_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000002;
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return NyctSubway.internal_static_TripReplacementPeriod_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return NyctSubway.internal_static_TripReplacementPeriod_fieldAccessorTable
                .ensureFieldAccessorsInitialized(TripReplacementPeriod.class, Builder.class);
    }
    
    private int bitField0_;
    public static final int ROUTE_ID_FIELD_NUMBER = 1;
    private volatile @Setter(AccessLevel.PRIVATE) Object routeId_;
    
    /**
     * <pre>
     * The replacement period is for this route
     * </pre>
     * <p>
     * <code>optional string route_id = 1;</code>
     */
    @Override
    public boolean hasRouteId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * The replacement period is for this route
     * </pre>
     * <p>
     * <code>optional string route_id = 1;</code>
     */
    @Override
    public String getRouteId() {
        return ProtoUtils.asString(routeId_, this::setRouteId_);
    }
    
    /**
     * <pre>
     * The replacement period is for this route
     * </pre>
     * <p>
     * <code>optional string route_id = 1;</code>
     */
    @Override
    public ByteString getRouteIdBytes() {
        return ProtoUtils.asBytes(routeId_, this::setRouteId_);
    }
    
    public static final int REPLACEMENT_PERIOD_FIELD_NUMBER = 2;
    private TimeRange replacementPeriod_;
    
    /**
     * <pre>
     * The start time is omitted, the end time is currently now + 30 minutes for
     * all routes of the A division
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
     */
    @Override
    public boolean hasReplacementPeriod() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * The start time is omitted, the end time is currently now + 30 minutes for
     * all routes of the A division
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
     */
    @Override
    public TimeRange getReplacementPeriod() {
        return replacementPeriod_ == null ? TimeRange.getDefaultInstance() : replacementPeriod_;
    }
    
    /**
     * <pre>
     * The start time is omitted, the end time is currently now + 30 minutes for
     * all routes of the A division
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
     */
    @Override
    public TimeRangeOrBuilder getReplacementPeriodOrBuilder() {
        return replacementPeriod_ == null ? TimeRange.getDefaultInstance() : replacementPeriod_;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            GeneratedMessageV3.writeString(output, 1, routeId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(2, getReplacementPeriod());
        }
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += GeneratedMessageV3.computeStringSize(1, routeId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream.computeMessageSize(2, getReplacementPeriod());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof TripReplacementPeriod)) {
            return super.equals(obj);
        }
        final TripReplacementPeriod other = (TripReplacementPeriod) obj;
        
        boolean result = true;
        result = result && (hasRouteId() == other.hasRouteId());
        if (hasRouteId()) {
            result = result && getRouteId().equals(other.getRouteId());
        }
        result = result && (hasReplacementPeriod() == other.hasReplacementPeriod());
        if (hasReplacementPeriod()) {
            result = result && getReplacementPeriod().equals(other.getReplacementPeriod());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasRouteId()) {
            hash = (37 * hash) + ROUTE_ID_FIELD_NUMBER;
            hash = (53 * hash) + getRouteId().hashCode();
        }
        if (hasReplacementPeriod()) {
            hash = (37 * hash) + REPLACEMENT_PERIOD_FIELD_NUMBER;
            hash = (53 * hash) + getReplacementPeriod().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static TripReplacementPeriod parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripReplacementPeriod parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripReplacementPeriod parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripReplacementPeriod parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripReplacementPeriod parseFrom(final byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripReplacementPeriod parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripReplacementPeriod parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static TripReplacementPeriod parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TripReplacementPeriod parseDelimitedFrom(final InputStream input)
            throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static TripReplacementPeriod parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TripReplacementPeriod parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static TripReplacementPeriod parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final TripReplacementPeriod prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * Protobuf type {@code TripReplacementPeriod}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:TripReplacementPeriod)
            TripReplacementPeriodOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return NyctSubway.internal_static_TripReplacementPeriod_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return NyctSubway.internal_static_TripReplacementPeriod_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(TripReplacementPeriod.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.TripReplacementPeriod.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                getReplacementPeriodFieldBuilder();
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            routeId_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            if (replacementPeriodBuilder_ == null) {
                replacementPeriod_ = null;
            } else {
                replacementPeriodBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return NyctSubway.internal_static_TripReplacementPeriod_descriptor;
        }
        
        @Override
        public TripReplacementPeriod getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public TripReplacementPeriod build() {
            final TripReplacementPeriod result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public TripReplacementPeriod buildPartial() {
            final TripReplacementPeriod result = new TripReplacementPeriod(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.routeId_ = routeId_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            if (replacementPeriodBuilder_ == null) {
                result.replacementPeriod_ = replacementPeriod_;
            } else {
                result.replacementPeriod_ = replacementPeriodBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof TripReplacementPeriod) {
                return mergeFrom((TripReplacementPeriod) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final TripReplacementPeriod other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasRouteId()) {
                bitField0_ |= 0x00000001;
                routeId_ = other.routeId_;
                onChanged();
            }
            if (other.hasReplacementPeriod()) {
                mergeReplacementPeriod(other.getReplacementPeriod());
            }
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            return true;
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            TripReplacementPeriod parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (TripReplacementPeriod) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        @Setter(AccessLevel.PRIVATE) private Object routeId_ = "";
        
        /**
         * <pre>
         * The replacement period is for this route
         * </pre>
         * <p>
         * <code>optional string route_id = 1;</code>
         */
        @Override
        public boolean hasRouteId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * The replacement period is for this route
         * </pre>
         * <p>
         * <code>optional string route_id = 1;</code>
         */
        @Override
        public String getRouteId() {
            return ProtoUtils.asString(routeId_, this::setRouteId_);
        }
        
        /**
         * <pre>
         * The replacement period is for this route
         * </pre>
         * <p>
         * <code>optional string route_id = 1;</code>
         */
        @Override
        public ByteString getRouteIdBytes() {
            return ProtoUtils.asBytes(routeId_, this::setRouteId_);
        }
        
        /**
         * <pre>
         * The replacement period is for this route
         * </pre>
         * <p>
         * <code>optional string route_id = 1;</code>
         */
        public Builder setRouteId(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            routeId_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The replacement period is for this route
         * </pre>
         * <p>
         * <code>optional string route_id = 1;</code>
         */
        public Builder clearRouteId() {
            bitField0_ = (bitField0_ & ~0x00000001);
            routeId_ = getDefaultInstance().getRouteId();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The replacement period is for this route
         * </pre>
         * <p>
         * <code>optional string route_id = 1;</code>
         */
        public Builder setRouteIdBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            routeId_ = value;
            onChanged();
            return this;
        }
        
        private TimeRange replacementPeriod_ = null;
        private SingleFieldBuilderV3<TimeRange, TimeRange.Builder, TimeRangeOrBuilder>
                replacementPeriodBuilder_;
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        @Override
        public boolean hasReplacementPeriod() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        @Override
        public TimeRange getReplacementPeriod() {
            if (replacementPeriodBuilder_ == null) {
                return replacementPeriod_ == null ? TimeRange.getDefaultInstance()
                        : replacementPeriod_;
            } else {
                return replacementPeriodBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        public Builder setReplacementPeriod(final TimeRange value) {
            if (replacementPeriodBuilder_ == null) {
                Objects.requireNonNull(value);
                replacementPeriod_ = value;
                onChanged();
            } else {
                replacementPeriodBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        public Builder setReplacementPeriod(final TimeRange.Builder builderForValue) {
            if (replacementPeriodBuilder_ == null) {
                replacementPeriod_ = builderForValue.build();
                onChanged();
            } else {
                replacementPeriodBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        public Builder mergeReplacementPeriod(final TimeRange value) {
            if (replacementPeriodBuilder_ == null) {
                if (((bitField0_ & 0x00000002) == 0x00000002) && replacementPeriod_ != null
                        && replacementPeriod_ != TimeRange.getDefaultInstance()) {
                    replacementPeriod_ = TimeRange.newBuilder(replacementPeriod_).mergeFrom(value)
                            .buildPartial();
                } else {
                    replacementPeriod_ = value;
                }
                onChanged();
            } else {
                replacementPeriodBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        public Builder clearReplacementPeriod() {
            if (replacementPeriodBuilder_ == null) {
                replacementPeriod_ = null;
                onChanged();
            } else {
                replacementPeriodBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        public TimeRange.Builder getReplacementPeriodBuilder() {
            bitField0_ |= 0x00000002;
            onChanged();
            return getReplacementPeriodFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        @Override
        public TimeRangeOrBuilder getReplacementPeriodOrBuilder() {
            if (replacementPeriodBuilder_ != null) {
                return replacementPeriodBuilder_.getMessageOrBuilder();
            } else {
                return replacementPeriod_ == null ? TimeRange.getDefaultInstance()
                        : replacementPeriod_;
            }
        }
        
        /**
         * <pre>
         * The start time is omitted, the end time is currently now + 30 minutes for
         * all routes of the A division
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TimeRange replacement_period = 2;</code>
         */
        private SingleFieldBuilderV3<TimeRange, TimeRange.Builder, TimeRangeOrBuilder>
        getReplacementPeriodFieldBuilder() {
            if (replacementPeriodBuilder_ == null) {
                replacementPeriodBuilder_ =
                        new SingleFieldBuilderV3<>(getReplacementPeriod(), getParentForChildren(),
                                isClean());
                replacementPeriod_ = null;
            }
            return replacementPeriodBuilder_;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:TripReplacementPeriod)
    }
    
    // @@protoc_insertion_point(class_scope:TripReplacementPeriod)
    private static final TripReplacementPeriod DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new TripReplacementPeriod();
    }
    
    public static TripReplacementPeriod getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<TripReplacementPeriod> PARSER = new AbstractParser<>() {
        
        @Override
        public TripReplacementPeriod parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new TripReplacementPeriod(input, extensionRegistry);
        }
    };
    
    public static Parser<TripReplacementPeriod> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<TripReplacementPeriod> getParserForType() {
        return PARSER;
    }
    
    @Override
    public TripReplacementPeriod getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}