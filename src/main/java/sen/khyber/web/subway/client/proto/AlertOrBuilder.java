// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.web.subway.client.proto.Alert.Cause;
import sen.khyber.web.subway.client.proto.Alert.Effect;

import java.util.List;

import com.google.protobuf.GeneratedMessageV3.ExtendableMessageOrBuilder;

public interface AlertOrBuilder extends ExtendableMessageOrBuilder<Alert> {
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    List<TimeRange> getActivePeriodList();
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    TimeRange getActivePeriod(int index);
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    int getActivePeriodCount();
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    List<? extends TimeRangeOrBuilder> getActivePeriodOrBuilderList();
    
    /**
     * <pre>
     * Time when the alert should be shown to the user. If missing, the
     * alert will be shown as long as it appears in the feed.
     * If multiple ranges are given, the alert will be shown during all of them.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TimeRange active_period = 1;</code>
     */
    TimeRangeOrBuilder getActivePeriodOrBuilder(int index);
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    List<EntitySelector> getInformedEntityList();
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    EntitySelector getInformedEntity(int index);
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    int getInformedEntityCount();
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    List<? extends EntitySelectorOrBuilder> getInformedEntityOrBuilderList();
    
    /**
     * <pre>
     * Entities whose users we should notify of this alert.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.EntitySelector informed_entity = 5;</code>
     */
    EntitySelectorOrBuilder getInformedEntityOrBuilder(int index);
    
    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    boolean hasCause();
    
    /**
     * <code>optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];</code>
     */
    Cause getCause();
    
    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    boolean hasEffect();
    
    /**
     * <code>optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];</code>
     */
    Effect getEffect();
    
    /**
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     */
    boolean hasUrl();
    
    /**
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     */
    TranslatedString getUrl();
    
    /**
     * <pre>
     * The URL which provides additional information about the alert.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString url = 8;</code>
     */
    TranslatedStringOrBuilder getUrlOrBuilder();
    
    /**
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     */
    boolean hasHeaderText();
    
    /**
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     */
    TranslatedString getHeaderText();
    
    /**
     * <pre>
     * Alert header. Contains a short summary of the alert text as plain-text.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString header_text = 10;</code>
     */
    TranslatedStringOrBuilder getHeaderTextOrBuilder();
    
    /**
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     */
    boolean hasDescriptionText();
    
    /**
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     */
    TranslatedString getDescriptionText();
    
    /**
     * <pre>
     * Full description for the alert as plain-text. The information in the
     * description should add to the information of the header.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TranslatedString description_text = 11;</code>
     */
    TranslatedStringOrBuilder getDescriptionTextOrBuilder();
    
}