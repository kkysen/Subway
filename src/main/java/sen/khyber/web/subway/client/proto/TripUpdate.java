// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;
import sen.khyber.web.subway.client.proto.TripUpdate.StopTimeUpdate.ScheduleRelationship;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.EnumDescriptor;
import com.google.protobuf.Descriptors.EnumValueDescriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage.GeneratedExtension;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.GeneratedMessageV3.ExtendableMessage;
import com.google.protobuf.Internal;
import com.google.protobuf.Internal.EnumLiteMap;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.RepeatedFieldBuilderV3;
import com.google.protobuf.SingleFieldBuilderV3;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * Realtime update of the progress of a vehicle along a trip.
 * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
 * - A trip that proceeds along the schedule.
 * - A trip that proceeds along a route but has no fixed schedule.
 * - A trip that have been added or removed with regard to schedule.
 * The updates can be for future, predicted arrival/departure events, or for
 * past events that already occurred.
 * Normally, updates should get more precise and more certain (see
 * uncertainty below) as the events gets closer to current time.
 * Even if that is not possible, the information for past events should be
 * precise and certain. In particular, if an update points to time in the past
 * but its update's uncertainty is not 0, the client should conclude that the
 * update is a (wrong) prediction and that the trip has not completed yet.
 * Note that the update can describe a trip that is already completed.
 * To this end, it is enough to provide an update for the last stop of the trip.
 * If the time of that is in the past, the client will conclude from that that
 * the whole trip is in the past (it is possible, although inconsequential, to
 * also provide updates for preceding stops).
 * This option is most relevant for a trip that has completed ahead of schedule,
 * but according to the schedule, the trip is still proceeding at the current
 * time. Removing the updates for this trip could make the client assume
 * that the trip is still proceeding.
 * Note that the feed provider is allowed, but not required, to purge past
 * updates - this is one case where this would be practically useful.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.TripUpdate}
 */
public final class TripUpdate extends ExtendableMessage<TripUpdate> implements TripUpdateOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use TripUpdate.newBuilder() to construct.
    private TripUpdate(final ExtendableBuilder<TripUpdate, ?> builder) {
        super(builder);
    }
    
    private TripUpdate() {
        stopTimeUpdate_ = Collections.emptyList();
        timestamp_ = 0L;
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private TripUpdate(final CodedInputStream input, final ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        TripDescriptor.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = trip_.toBuilder();
                        }
                        trip_ = input.readMessage(TripDescriptor.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(trip_);
                            trip_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                            stopTimeUpdate_ = new ArrayList<>();
                            mutable_bitField0_ |= 0x00000004;
                        }
                        stopTimeUpdate_
                                .add(input.readMessage(StopTimeUpdate.PARSER, extensionRegistry));
                        break;
                    }
                    case 26: {
                        VehicleDescriptor.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            subBuilder = vehicle_.toBuilder();
                        }
                        vehicle_ = input.readMessage(VehicleDescriptor.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(vehicle_);
                            vehicle_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000002;
                        break;
                    }
                    case 32: {
                        bitField0_ |= 0x00000004;
                        timestamp_ = input.readUInt64();
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                stopTimeUpdate_ = Collections.unmodifiableList(stopTimeUpdate_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
                .ensureFieldAccessorsInitialized(TripUpdate.class, Builder.class);
    }
    
    public interface StopTimeEventOrBuilder extends
            // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate.StopTimeEvent)
            ExtendableMessageOrBuilder<StopTimeEvent> {
        
        /**
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         * <p>
         * <code>optional int32 delay = 1;</code>
         */
        boolean hasDelay();
        
        /**
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         * <p>
         * <code>optional int32 delay = 1;</code>
         */
        int getDelay();
        
        /**
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         * <p>
         * <code>optional int64 time = 2;</code>
         */
        boolean hasTime();
        
        /**
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         * <p>
         * <code>optional int64 time = 2;</code>
         */
        long getTime();
        
        /**
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         * <p>
         * <code>optional int32 uncertainty = 3;</code>
         */
        boolean hasUncertainty();
        
        /**
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         * <p>
         * <code>optional int32 uncertainty = 3;</code>
         */
        int getUncertainty();
    }
    
    /**
     * <pre>
     * Timing information for a single predicted event (either arrival or
     * departure).
     * Timing consists of delay and/or estimated time, and uncertainty.
     * - delay should be used when the prediction is given relative to some
     *   existing schedule in GTFS.
     * - time should be given whether there is a predicted schedule or not. If
     *   both time and delay are specified, time will take precedence
     *   (although normally, time, if given for a scheduled trip, should be
     *   equal to scheduled time in GTFS + delay).
     * Uncertainty applies equally to both time and delay.
     * The uncertainty roughly specifies the expected error in true delay (but
     * note, we don't yet define its precise statistical meaning). It's possible
     * for the uncertainty to be 0, for example for trains that are driven under
     * computer timing control.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
     */
    public static final class StopTimeEvent extends ExtendableMessage<StopTimeEvent> implements
            // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate
            // .StopTimeEvent)
            StopTimeEventOrBuilder {
        
        private static final long serialVersionUID = 0L;
        
        // Use StopTimeEvent.newBuilder() to construct.
        private StopTimeEvent(final ExtendableBuilder<StopTimeEvent, ?> builder) {
            super(builder);
        }
        
        private StopTimeEvent() {
            delay_ = 0;
            time_ = 0L;
            uncertainty_ = 0;
        }
        
        @Override
        public final UnknownFieldSet getUnknownFields() {
            return unknownFields;
        }
        
        private StopTimeEvent(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            this();
            final int mutable_bitField0_ = 0;
            final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    final int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            delay_ = input.readInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            time_ = input.readInt64();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            uncertainty_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (final InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (final IOException e) {
                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime
                    .internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime
                    .internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(StopTimeEvent.class, Builder.class);
        }
        
        private int bitField0_;
        public static final int DELAY_FIELD_NUMBER = 1;
        private int delay_;
        
        /**
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         * <p>
         * <code>optional int32 delay = 1;</code>
         */
        @Override
        public boolean hasDelay() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * Delay (in seconds) can be positive (meaning that the vehicle is late) or
         * negative (meaning that the vehicle is ahead of schedule). Delay of 0
         * means that the vehicle is exactly on time.
         * </pre>
         * <p>
         * <code>optional int32 delay = 1;</code>
         */
        @Override
        public int getDelay() {
            return delay_;
        }
        
        public static final int TIME_FIELD_NUMBER = 2;
        private long time_;
        
        /**
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         * <p>
         * <code>optional int64 time = 2;</code>
         */
        @Override
        public boolean hasTime() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * Event as absolute time.
         * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
         * UTC).
         * </pre>
         * <p>
         * <code>optional int64 time = 2;</code>
         */
        @Override
        public long getTime() {
            return time_;
        }
        
        public static final int UNCERTAINTY_FIELD_NUMBER = 3;
        private int uncertainty_;
        
        /**
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         * <p>
         * <code>optional int32 uncertainty = 3;</code>
         */
        @Override
        public boolean hasUncertainty() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <pre>
         * If uncertainty is omitted, it is interpreted as unknown.
         * If the prediction is unknown or too uncertain, the delay (or time) field
         * should be empty. In such case, the uncertainty field is ignored.
         * To specify a completely certain prediction, set its uncertainty to 0.
         * </pre>
         * <p>
         * <code>optional int32 uncertainty = 3;</code>
         */
        @Override
        public int getUncertainty() {
            return uncertainty_;
        }
        
        private byte memoizedIsInitialized = -1;
        
        @Override
        public final boolean isInitialized() {
            final byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) {return true;}
            if (isInitialized == 0) {return false;}
            
            if (!extensionsAreInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }
        
        @Override
        public void writeTo(final CodedOutputStream output) throws IOException {
            final ExtendableMessage<StopTimeEvent>.ExtensionWriter extensionWriter =
                    newExtensionWriter();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, delay_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt64(2, time_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, uncertainty_);
            }
            extensionWriter.writeUntil(2000, output);
            unknownFields.writeTo(output);
        }
        
        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) {return size;}
            
            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += CodedOutputStream.computeInt32Size(1, delay_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += CodedOutputStream.computeInt64Size(2, time_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += CodedOutputStream.computeInt32Size(3, uncertainty_);
            }
            size += extensionsSerializedSize();
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }
        
        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof StopTimeEvent)) {
                return super.equals(obj);
            }
            final StopTimeEvent other = (StopTimeEvent) obj;
            
            boolean result = true;
            result = result && (hasDelay() == other.hasDelay());
            if (hasDelay()) {
                result = result && (getDelay() == other.getDelay());
            }
            result = result && (hasTime() == other.hasTime());
            if (hasTime()) {
                result = result && (getTime() == other.getTime());
            }
            result = result && (hasUncertainty() == other.hasUncertainty());
            if (hasUncertainty()) {
                result = result && (getUncertainty() == other.getUncertainty());
            }
            result = result && unknownFields.equals(other.unknownFields);
            result = result && getExtensionFields().equals(other.getExtensionFields());
            return result;
        }
        
        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasDelay()) {
                hash = (37 * hash) + DELAY_FIELD_NUMBER;
                hash = (53 * hash) + getDelay();
            }
            if (hasTime()) {
                hash = (37 * hash) + TIME_FIELD_NUMBER;
                hash = (53 * hash) + Internal.hashLong(getTime());
            }
            if (hasUncertainty()) {
                hash = (37 * hash) + UNCERTAINTY_FIELD_NUMBER;
                hash = (53 * hash) + getUncertainty();
            }
            hash = hashFields(hash, getExtensionFields());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }
        
        public static StopTimeEvent parseFrom(final ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static StopTimeEvent parseFrom(final ByteBuffer data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static StopTimeEvent parseFrom(final ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static StopTimeEvent parseFrom(final ByteString data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static StopTimeEvent parseFrom(final byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static StopTimeEvent parseFrom(final byte[] data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static StopTimeEvent parseFrom(final InputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }
        
        public static StopTimeEvent parseFrom(final InputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }
        
        public static StopTimeEvent parseDelimitedFrom(final InputStream input) throws IOException {
            return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }
        
        public static StopTimeEvent parseDelimitedFrom(final InputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        
        public static StopTimeEvent parseFrom(final CodedInputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }
        
        public static StopTimeEvent parseFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }
        
        @Override
        public Builder newBuilderForType() { return newBuilder(); }
        
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        
        public static Builder newBuilder(final StopTimeEvent prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        
        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }
        
        @Override
        protected Builder newBuilderForType(final BuilderParent parent) {
            final Builder builder = new Builder(parent);
            return builder;
        }
        
        /**
         * <pre>
         * Timing information for a single predicted event (either arrival or
         * departure).
         * Timing consists of delay and/or estimated time, and uncertainty.
         * - delay should be used when the prediction is given relative to some
         *   existing schedule in GTFS.
         * - time should be given whether there is a predicted schedule or not. If
         *   both time and delay are specified, time will take precedence
         *   (although normally, time, if given for a scheduled trip, should be
         *   equal to scheduled time in GTFS + delay).
         * Uncertainty applies equally to both time and delay.
         * The uncertainty roughly specifies the expected error in true delay (but
         * note, we don't yet define its precise statistical meaning). It's possible
         * for the uncertainty to be 0, for example for trains that are driven under
         * computer timing control.
         * </pre>
         * <p>
         * Protobuf type {@code transit_realtime.TripUpdate.StopTimeEvent}
         */
        public static final class Builder extends ExtendableBuilder<StopTimeEvent, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate
                // .StopTimeEvent)
                StopTimeEventOrBuilder {
            
            public static final Descriptor getDescriptor() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
            }
            
            @Override
            protected FieldAccessorTable internalGetFieldAccessorTable() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TripUpdate_StopTimeEvent_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(StopTimeEvent.class, Builder.class);
            }
            
            // Construct using sen.khyber.subway.client.proto.TripUpdate.StopTimeEvent.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }
            
            private Builder(final BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            
            private void maybeForceBuilderInitialization() {
                if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                }
            }
            
            @Override
            public Builder clear() {
                super.clear();
                delay_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                time_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000002);
                uncertainty_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }
            
            @Override
            public Descriptor getDescriptorForType() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TripUpdate_StopTimeEvent_descriptor;
            }
            
            @Override
            public StopTimeEvent getDefaultInstanceForType() {
                return getDefaultInstance();
            }
            
            @Override
            public StopTimeEvent build() {
                final StopTimeEvent result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }
            
            @Override
            public StopTimeEvent buildPartial() {
                final StopTimeEvent result = new StopTimeEvent(this);
                final int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.delay_ = delay_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.time_ = time_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.uncertainty_ = uncertainty_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }
            
            @Override
            public Builder clone() {
                return super.clone();
            }
            
            @Override
            public Builder setField(final FieldDescriptor field, final Object value) {
                return super.setField(field, value);
            }
            
            @Override
            public Builder clearField(final FieldDescriptor field) {
                return super.clearField(field);
            }
            
            @Override
            public Builder clearOneof(final OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }
            
            @Override
            public Builder setRepeatedField(final FieldDescriptor field, final int index,
                    final Object value) {
                return super.setRepeatedField(field, index, value);
            }
            
            @Override
            public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
                return super.addRepeatedField(field, value);
            }
            
            @Override
            public <Type> Builder setExtension(
                    final GeneratedExtension<StopTimeEvent, Type> extension, final Type value) {
                return super.setExtension(extension, value);
            }
            
            @Override
            public <Type> Builder setExtension(
                    final GeneratedExtension<StopTimeEvent, List<Type>> extension, final int index,
                    final Type value) {
                return super.setExtension(extension, index, value);
            }
            
            @Override
            public <Type> Builder addExtension(
                    final GeneratedExtension<StopTimeEvent, List<Type>> extension,
                    final Type value) {
                return super.addExtension(extension, value);
            }
            
            @Override
            public <Type> Builder clearExtension(
                    final GeneratedExtension<StopTimeEvent, ?> extension) {
                return super.clearExtension(extension);
            }
            
            @Override
            public Builder mergeFrom(final Message other) {
                if (other instanceof StopTimeEvent) {
                    return mergeFrom((StopTimeEvent) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }
            
            public Builder mergeFrom(final StopTimeEvent other) {
                if (other == getDefaultInstance()) {return this;}
                if (other.hasDelay()) {
                    setDelay(other.getDelay());
                }
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                if (other.hasUncertainty()) {
                    setUncertainty(other.getUncertainty());
                }
                mergeExtensionFields(other);
                mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }
            
            @Override
            public final boolean isInitialized() {
                return extensionsAreInitialized();
            }
            
            @Override
            public Builder mergeFrom(final CodedInputStream input,
                    final ExtensionRegistryLite extensionRegistry) throws IOException {
                StopTimeEvent parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (final InvalidProtocolBufferException e) {
                    parsedMessage = (StopTimeEvent) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            
            private int bitField0_;
            
            private int delay_;
            
            /**
             * <pre>
             * Delay (in seconds) can be positive (meaning that the vehicle is late) or
             * negative (meaning that the vehicle is ahead of schedule). Delay of 0
             * means that the vehicle is exactly on time.
             * </pre>
             * <p>
             * <code>optional int32 delay = 1;</code>
             */
            @Override
            public boolean hasDelay() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            
            /**
             * <pre>
             * Delay (in seconds) can be positive (meaning that the vehicle is late) or
             * negative (meaning that the vehicle is ahead of schedule). Delay of 0
             * means that the vehicle is exactly on time.
             * </pre>
             * <p>
             * <code>optional int32 delay = 1;</code>
             */
            @Override
            public int getDelay() {
                return delay_;
            }
            
            /**
             * <pre>
             * Delay (in seconds) can be positive (meaning that the vehicle is late) or
             * negative (meaning that the vehicle is ahead of schedule). Delay of 0
             * means that the vehicle is exactly on time.
             * </pre>
             * <p>
             * <code>optional int32 delay = 1;</code>
             */
            public Builder setDelay(final int value) {
                bitField0_ |= 0x00000001;
                delay_ = value;
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * Delay (in seconds) can be positive (meaning that the vehicle is late) or
             * negative (meaning that the vehicle is ahead of schedule). Delay of 0
             * means that the vehicle is exactly on time.
             * </pre>
             * <p>
             * <code>optional int32 delay = 1;</code>
             */
            public Builder clearDelay() {
                bitField0_ = (bitField0_ & ~0x00000001);
                delay_ = 0;
                onChanged();
                return this;
            }
            
            private long time_;
            
            /**
             * <pre>
             * Event as absolute time.
             * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
             * UTC).
             * </pre>
             * <p>
             * <code>optional int64 time = 2;</code>
             */
            @Override
            public boolean hasTime() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            
            /**
             * <pre>
             * Event as absolute time.
             * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
             * UTC).
             * </pre>
             * <p>
             * <code>optional int64 time = 2;</code>
             */
            @Override
            public long getTime() {
                return time_;
            }
            
            /**
             * <pre>
             * Event as absolute time.
             * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
             * UTC).
             * </pre>
             * <p>
             * <code>optional int64 time = 2;</code>
             */
            public Builder setTime(final long value) {
                bitField0_ |= 0x00000002;
                time_ = value;
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * Event as absolute time.
             * In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
             * UTC).
             * </pre>
             * <p>
             * <code>optional int64 time = 2;</code>
             */
            public Builder clearTime() {
                bitField0_ = (bitField0_ & ~0x00000002);
                time_ = 0L;
                onChanged();
                return this;
            }
            
            private int uncertainty_;
            
            /**
             * <pre>
             * If uncertainty is omitted, it is interpreted as unknown.
             * If the prediction is unknown or too uncertain, the delay (or time) field
             * should be empty. In such case, the uncertainty field is ignored.
             * To specify a completely certain prediction, set its uncertainty to 0.
             * </pre>
             * <p>
             * <code>optional int32 uncertainty = 3;</code>
             */
            @Override
            public boolean hasUncertainty() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            
            /**
             * <pre>
             * If uncertainty is omitted, it is interpreted as unknown.
             * If the prediction is unknown or too uncertain, the delay (or time) field
             * should be empty. In such case, the uncertainty field is ignored.
             * To specify a completely certain prediction, set its uncertainty to 0.
             * </pre>
             * <p>
             * <code>optional int32 uncertainty = 3;</code>
             */
            @Override
            public int getUncertainty() {
                return uncertainty_;
            }
            
            /**
             * <pre>
             * If uncertainty is omitted, it is interpreted as unknown.
             * If the prediction is unknown or too uncertain, the delay (or time) field
             * should be empty. In such case, the uncertainty field is ignored.
             * To specify a completely certain prediction, set its uncertainty to 0.
             * </pre>
             * <p>
             * <code>optional int32 uncertainty = 3;</code>
             */
            public Builder setUncertainty(final int value) {
                bitField0_ |= 0x00000004;
                uncertainty_ = value;
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * If uncertainty is omitted, it is interpreted as unknown.
             * If the prediction is unknown or too uncertain, the delay (or time) field
             * should be empty. In such case, the uncertainty field is ignored.
             * To specify a completely certain prediction, set its uncertainty to 0.
             * </pre>
             * <p>
             * <code>optional int32 uncertainty = 3;</code>
             */
            public Builder clearUncertainty() {
                bitField0_ = (bitField0_ & ~0x00000004);
                uncertainty_ = 0;
                onChanged();
                return this;
            }
            
            @Override
            public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }
            
            @Override
            public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }
            
            
            // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeEvent)
        }
        
        // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeEvent)
        private static final StopTimeEvent DEFAULT_INSTANCE;
        
        static {
            DEFAULT_INSTANCE = new StopTimeEvent();
        }
        
        public static StopTimeEvent getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }
        
        @Deprecated public static final Parser<StopTimeEvent> PARSER = new AbstractParser<>() {
            
            @Override
            public StopTimeEvent parsePartialFrom(final CodedInputStream input,
                    final ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return new StopTimeEvent(input, extensionRegistry);
            }
        };
        
        public static Parser<StopTimeEvent> parser() {
            return PARSER;
        }
        
        @Override
        public Parser<StopTimeEvent> getParserForType() {
            return PARSER;
        }
        
        @Override
        public StopTimeEvent getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }
        
    }
    
    public interface StopTimeUpdateOrBuilder extends
            // @@protoc_insertion_point(interface_extends:transit_realtime.TripUpdate
            // .StopTimeUpdate)
            ExtendableMessageOrBuilder<StopTimeUpdate> {
        
        /**
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional uint32 stop_sequence = 1;</code>
         */
        boolean hasStopSequence();
        
        /**
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional uint32 stop_sequence = 1;</code>
         */
        int getStopSequence();
        
        /**
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 4;</code>
         */
        boolean hasStopId();
        
        /**
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 4;</code>
         */
        String getStopId();
        
        /**
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 4;</code>
         */
        ByteString getStopIdBytes();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        boolean hasArrival();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        StopTimeEvent getArrival();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        StopTimeEventOrBuilder getArrivalOrBuilder();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        boolean hasDeparture();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        StopTimeEvent getDeparture();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        StopTimeEventOrBuilder getDepartureOrBuilder();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
         * schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        boolean hasScheduleRelationship();
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
         * schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        ScheduleRelationship getScheduleRelationship();
    }
    
    /**
     * <pre>
     * Realtime update for arrival and/or departure events for a given stop on a
     * trip. Updates can be supplied for both past and future events.
     * The producer is allowed, although not required, to drop past events.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
     */
    public static final class StopTimeUpdate extends ExtendableMessage<StopTimeUpdate> implements
            // @@protoc_insertion_point(message_implements:transit_realtime.TripUpdate
            // .StopTimeUpdate)
            StopTimeUpdateOrBuilder {
        
        private static final long serialVersionUID = 0L;
        
        // Use StopTimeUpdate.newBuilder() to construct.
        private StopTimeUpdate(final ExtendableBuilder<StopTimeUpdate, ?> builder) {
            super(builder);
        }
        
        private StopTimeUpdate() {
            stopSequence_ = 0;
            stopId_ = "";
            scheduleRelationship_ = 0;
        }
        
        @Override
        public final UnknownFieldSet getUnknownFields() {
            return unknownFields;
        }
        
        private StopTimeUpdate(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            this();
            final int mutable_bitField0_ = 0;
            final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    final int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            stopSequence_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            StopTimeEvent.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                                subBuilder = arrival_.toBuilder();
                            }
                            arrival_ = input.readMessage(StopTimeEvent.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(arrival_);
                                arrival_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000004;
                            break;
                        }
                        case 26: {
                            StopTimeEvent.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = departure_.toBuilder();
                            }
                            departure_ = input.readMessage(StopTimeEvent.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(departure_);
                                departure_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                        case 34: {
                            final ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000002;
                            stopId_ = bs;
                            break;
                        }
                        case 40: {
                            final int rawValue = input.readEnum();
                            final ScheduleRelationship value =
                                    ScheduleRelationship.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(5, rawValue);
                            } else {
                                bitField0_ |= 0x00000010;
                                scheduleRelationship_ = rawValue;
                            }
                            break;
                        }
                    }
                }
            } catch (final InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (final IOException e) {
                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime
                    .internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime
                    .internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(StopTimeUpdate.class, Builder.class);
        }
        
        /**
         * <pre>
         * The relation between this StopTime and the static schedule.
         * </pre>
         * <p>
         * Protobuf enum {@code transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship}
         */
        public enum ScheduleRelationship implements ProtocolMessageEnum {
            /**
             * <pre>
             * The vehicle is proceeding in accordance with its static schedule of
             * stops, although not necessarily according to the times of the schedule.
             * At least one of arrival and departure must be provided. If the schedule
             * for this stop contains both arrival and departure times then so must
             * this update.
             * </pre>
             * <p>
             * <code>SCHEDULED = 0;</code>
             */
            SCHEDULED(0),
            /**
             * <pre>
             * The stop is skipped, i.e., the vehicle will not stop at this stop.
             * Arrival and departure are optional.
             * </pre>
             * <p>
             * <code>SKIPPED = 1;</code>
             */
            SKIPPED(1),
            /**
             * <pre>
             * No data is given for this stop. The main intention for this value is to
             * give the predictions only for part of a trip, i.e., if the last update
             * for a trip has a NO_DATA specifier, then StopTimes for the rest of the
             * stops in the trip are considered to be unspecified as well.
             * Neither arrival nor departure should be supplied.
             * </pre>
             * <p>
             * <code>NO_DATA = 2;</code>
             */
            NO_DATA(2),;
            
            /**
             * <pre>
             * The vehicle is proceeding in accordance with its static schedule of
             * stops, although not necessarily according to the times of the schedule.
             * At least one of arrival and departure must be provided. If the schedule
             * for this stop contains both arrival and departure times then so must
             * this update.
             * </pre>
             * <p>
             * <code>SCHEDULED = 0;</code>
             */
            public static final int SCHEDULED_VALUE = 0;
            /**
             * <pre>
             * The stop is skipped, i.e., the vehicle will not stop at this stop.
             * Arrival and departure are optional.
             * </pre>
             * <p>
             * <code>SKIPPED = 1;</code>
             */
            public static final int SKIPPED_VALUE = 1;
            /**
             * <pre>
             * No data is given for this stop. The main intention for this value is to
             * give the predictions only for part of a trip, i.e., if the last update
             * for a trip has a NO_DATA specifier, then StopTimes for the rest of the
             * stops in the trip are considered to be unspecified as well.
             * Neither arrival nor departure should be supplied.
             * </pre>
             * <p>
             * <code>NO_DATA = 2;</code>
             */
            public static final int NO_DATA_VALUE = 2;
            
            
            @Override
            public final int getNumber() {
                return value;
            }
            
            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @Deprecated
            public static ScheduleRelationship valueOf(final int value) {
                return forNumber(value);
            }
            
            public static ScheduleRelationship forNumber(final int value) {
                switch (value) {
                    case 0:
                        return SCHEDULED;
                    case 1:
                        return SKIPPED;
                    case 2:
                        return NO_DATA;
                    default:
                        return null;
                }
            }
            
            public static EnumLiteMap<ScheduleRelationship> internalGetValueMap() {
                return internalValueMap;
            }
            
            private static final EnumLiteMap<ScheduleRelationship> internalValueMap =
                    ScheduleRelationship::forNumber;
            
            @Override
            public final EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            
            @Override
            public final EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }
            
            public static final EnumDescriptor getDescriptor() {
                return StopTimeUpdate.getDescriptor().getEnumTypes().get(0);
            }
            
            private static final ScheduleRelationship[] VALUES = values();
            
            public static ScheduleRelationship valueOf(final EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }
            
            private final int value;
            
            ScheduleRelationship(final int value) {
                this.value = value;
            }
            
            // @@protoc_insertion_point(enum_scope:transit_realtime.TripUpdate.StopTimeUpdate
            // .ScheduleRelationship)
        }
        
        private int bitField0_;
        public static final int STOP_SEQUENCE_FIELD_NUMBER = 1;
        private int stopSequence_;
        
        /**
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional uint32 stop_sequence = 1;</code>
         */
        @Override
        public boolean hasStopSequence() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * Must be the same as in stop_times.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional uint32 stop_sequence = 1;</code>
         */
        @Override
        public int getStopSequence() {
            return stopSequence_;
        }
        
        public static final int STOP_ID_FIELD_NUMBER = 4;
        private volatile @Setter(AccessLevel.PRIVATE) Object stopId_;
        
        /**
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 4;</code>
         */
        @Override
        public boolean hasStopId() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 4;</code>
         */
        @Override
        public String getStopId() {
            return ProtoUtils.asString(stopId_, this::setStopId_);
        }
        
        /**
         * <pre>
         * Must be the same as in stops.txt in the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 4;</code>
         */
        @Override
        public ByteString getStopIdBytes() {
            return ProtoUtils.asBytes(stopId_, this::setStopId_);
        }
        
        public static final int ARRIVAL_FIELD_NUMBER = 2;
        private StopTimeEvent arrival_;
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        @Override
        public boolean hasArrival() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        @Override
        public StopTimeEvent getArrival() {
            return arrival_ == null ? StopTimeEvent.getDefaultInstance() : arrival_;
        }
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
         */
        @Override
        public StopTimeEventOrBuilder getArrivalOrBuilder() {
            return arrival_ == null ? StopTimeEvent.getDefaultInstance() : arrival_;
        }
        
        public static final int DEPARTURE_FIELD_NUMBER = 3;
        private StopTimeEvent departure_;
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        @Override
        public boolean hasDeparture() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        @Override
        public StopTimeEvent getDeparture() {
            return departure_ == null ? StopTimeEvent.getDefaultInstance() : departure_;
        }
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
         */
        @Override
        public StopTimeEventOrBuilder getDepartureOrBuilder() {
            return departure_ == null ? StopTimeEvent.getDefaultInstance() : departure_;
        }
        
        public static final int SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 5;
        private int scheduleRelationship_;
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
         * schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        @Override
        public boolean hasScheduleRelationship() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        
        /**
         * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
         * schedule_relationship = 5 [default = SCHEDULED];</code>
         */
        @Override
        public ScheduleRelationship getScheduleRelationship() {
            final ScheduleRelationship result = ScheduleRelationship.valueOf(scheduleRelationship_);
            return result == null ? ScheduleRelationship.SCHEDULED : result;
        }
        
        private byte memoizedIsInitialized = -1;
        
        @Override
        public final boolean isInitialized() {
            final byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) {return true;}
            if (isInitialized == 0) {return false;}
            
            if (hasArrival()) {
                if (!getArrival().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasDeparture()) {
                if (!getDeparture().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (!extensionsAreInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }
        
        @Override
        public void writeTo(final CodedOutputStream output) throws IOException {
            final ExtendableMessage<StopTimeUpdate>.ExtensionWriter extensionWriter =
                    newExtensionWriter();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, stopSequence_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeMessage(2, getArrival());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(3, getDeparture());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                GeneratedMessageV3.writeString(output, 4, stopId_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeEnum(5, scheduleRelationship_);
            }
            extensionWriter.writeUntil(2000, output);
            unknownFields.writeTo(output);
        }
        
        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) {return size;}
            
            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += CodedOutputStream.computeUInt32Size(1, stopSequence_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += CodedOutputStream.computeMessageSize(2, getArrival());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += CodedOutputStream.computeMessageSize(3, getDeparture());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += GeneratedMessageV3.computeStringSize(4, stopId_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += CodedOutputStream.computeEnumSize(5, scheduleRelationship_);
            }
            size += extensionsSerializedSize();
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }
        
        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof StopTimeUpdate)) {
                return super.equals(obj);
            }
            final StopTimeUpdate other = (StopTimeUpdate) obj;
            
            boolean result = true;
            result = result && (hasStopSequence() == other.hasStopSequence());
            if (hasStopSequence()) {
                result = result && (getStopSequence() == other.getStopSequence());
            }
            result = result && (hasStopId() == other.hasStopId());
            if (hasStopId()) {
                result = result && getStopId().equals(other.getStopId());
            }
            result = result && (hasArrival() == other.hasArrival());
            if (hasArrival()) {
                result = result && getArrival().equals(other.getArrival());
            }
            result = result && (hasDeparture() == other.hasDeparture());
            if (hasDeparture()) {
                result = result && getDeparture().equals(other.getDeparture());
            }
            result = result && (hasScheduleRelationship() == other.hasScheduleRelationship());
            if (hasScheduleRelationship()) {
                result = result && scheduleRelationship_ == other.scheduleRelationship_;
            }
            result = result && unknownFields.equals(other.unknownFields);
            result = result && getExtensionFields().equals(other.getExtensionFields());
            return result;
        }
        
        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasStopSequence()) {
                hash = (37 * hash) + STOP_SEQUENCE_FIELD_NUMBER;
                hash = (53 * hash) + getStopSequence();
            }
            if (hasStopId()) {
                hash = (37 * hash) + STOP_ID_FIELD_NUMBER;
                hash = (53 * hash) + getStopId().hashCode();
            }
            if (hasArrival()) {
                hash = (37 * hash) + ARRIVAL_FIELD_NUMBER;
                hash = (53 * hash) + getArrival().hashCode();
            }
            if (hasDeparture()) {
                hash = (37 * hash) + DEPARTURE_FIELD_NUMBER;
                hash = (53 * hash) + getDeparture().hashCode();
            }
            if (hasScheduleRelationship()) {
                hash = (37 * hash) + SCHEDULE_RELATIONSHIP_FIELD_NUMBER;
                hash = (53 * hash) + scheduleRelationship_;
            }
            hash = hashFields(hash, getExtensionFields());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }
        
        public static StopTimeUpdate parseFrom(final ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static StopTimeUpdate parseFrom(final ByteBuffer data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static StopTimeUpdate parseFrom(final ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static StopTimeUpdate parseFrom(final ByteString data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static StopTimeUpdate parseFrom(final byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        
        public static StopTimeUpdate parseFrom(final byte[] data,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        
        public static StopTimeUpdate parseFrom(final InputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }
        
        public static StopTimeUpdate parseFrom(final InputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }
        
        public static StopTimeUpdate parseDelimitedFrom(final InputStream input)
                throws IOException {
            return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }
        
        public static StopTimeUpdate parseDelimitedFrom(final InputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        
        public static StopTimeUpdate parseFrom(final CodedInputStream input) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input);
        }
        
        public static StopTimeUpdate parseFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }
        
        @Override
        public Builder newBuilderForType() { return newBuilder(); }
        
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        
        public static Builder newBuilder(final StopTimeUpdate prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        
        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }
        
        @Override
        protected Builder newBuilderForType(final BuilderParent parent) {
            final Builder builder = new Builder(parent);
            return builder;
        }
        
        /**
         * <pre>
         * Realtime update for arrival and/or departure events for a given stop on a
         * trip. Updates can be supplied for both past and future events.
         * The producer is allowed, although not required, to drop past events.
         * </pre>
         * <p>
         * Protobuf type {@code transit_realtime.TripUpdate.StopTimeUpdate}
         */
        public static final class Builder extends ExtendableBuilder<StopTimeUpdate, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate
                // .StopTimeUpdate)
                StopTimeUpdateOrBuilder {
            
            public static final Descriptor getDescriptor() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
            }
            
            @Override
            protected FieldAccessorTable internalGetFieldAccessorTable() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TripUpdate_StopTimeUpdate_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(StopTimeUpdate.class, Builder.class);
            }
            
            // Construct using sen.khyber.subway.client.proto.TripUpdate.StopTimeUpdate.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }
            
            private Builder(final BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            
            private void maybeForceBuilderInitialization() {
                if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                    getArrivalFieldBuilder();
                    getDepartureFieldBuilder();
                }
            }
            
            @Override
            public Builder clear() {
                super.clear();
                stopSequence_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                stopId_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                if (arrivalBuilder_ == null) {
                    arrival_ = null;
                } else {
                    arrivalBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                if (departureBuilder_ == null) {
                    departure_ = null;
                } else {
                    departureBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                scheduleRelationship_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }
            
            @Override
            public Descriptor getDescriptorForType() {
                return GtfsRealtime
                        .internal_static_transit_realtime_TripUpdate_StopTimeUpdate_descriptor;
            }
            
            @Override
            public StopTimeUpdate getDefaultInstanceForType() {
                return getDefaultInstance();
            }
            
            @Override
            public StopTimeUpdate build() {
                final StopTimeUpdate result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }
            
            @Override
            public StopTimeUpdate buildPartial() {
                final StopTimeUpdate result = new StopTimeUpdate(this);
                final int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.stopSequence_ = stopSequence_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.stopId_ = stopId_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                if (arrivalBuilder_ == null) {
                    result.arrival_ = arrival_;
                } else {
                    result.arrival_ = arrivalBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (departureBuilder_ == null) {
                    result.departure_ = departure_;
                } else {
                    result.departure_ = departureBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.scheduleRelationship_ = scheduleRelationship_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }
            
            @Override
            public Builder clone() {
                return super.clone();
            }
            
            @Override
            public Builder setField(final FieldDescriptor field, final Object value) {
                return super.setField(field, value);
            }
            
            @Override
            public Builder clearField(final FieldDescriptor field) {
                return super.clearField(field);
            }
            
            @Override
            public Builder clearOneof(final OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }
            
            @Override
            public Builder setRepeatedField(final FieldDescriptor field, final int index,
                    final Object value) {
                return super.setRepeatedField(field, index, value);
            }
            
            @Override
            public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
                return super.addRepeatedField(field, value);
            }
            
            @Override
            public <Type> Builder setExtension(
                    final GeneratedExtension<StopTimeUpdate, Type> extension, final Type value) {
                return super.setExtension(extension, value);
            }
            
            @Override
            public <Type> Builder setExtension(
                    final GeneratedExtension<StopTimeUpdate, List<Type>> extension, final int index,
                    final Type value) {
                return super.setExtension(extension, index, value);
            }
            
            @Override
            public <Type> Builder addExtension(
                    final GeneratedExtension<StopTimeUpdate, List<Type>> extension,
                    final Type value) {
                return super.addExtension(extension, value);
            }
            
            @Override
            public <Type> Builder clearExtension(
                    final GeneratedExtension<StopTimeUpdate, ?> extension) {
                return super.clearExtension(extension);
            }
            
            @Override
            public Builder mergeFrom(final Message other) {
                if (other instanceof StopTimeUpdate) {
                    return mergeFrom((StopTimeUpdate) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }
            
            public Builder mergeFrom(final StopTimeUpdate other) {
                if (other == getDefaultInstance()) {return this;}
                if (other.hasStopSequence()) {
                    setStopSequence(other.getStopSequence());
                }
                if (other.hasStopId()) {
                    bitField0_ |= 0x00000002;
                    stopId_ = other.stopId_;
                    onChanged();
                }
                if (other.hasArrival()) {
                    mergeArrival(other.getArrival());
                }
                if (other.hasDeparture()) {
                    mergeDeparture(other.getDeparture());
                }
                if (other.hasScheduleRelationship()) {
                    setScheduleRelationship(other.getScheduleRelationship());
                }
                mergeExtensionFields(other);
                mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }
            
            @Override
            public final boolean isInitialized() {
                if (hasArrival()) {
                    if (!getArrival().isInitialized()) {
                        return false;
                    }
                }
                if (hasDeparture()) {
                    if (!getDeparture().isInitialized()) {
                        return false;
                    }
                }
                return extensionsAreInitialized();
            }
            
            @Override
            public Builder mergeFrom(final CodedInputStream input,
                    final ExtensionRegistryLite extensionRegistry) throws IOException {
                StopTimeUpdate parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (final InvalidProtocolBufferException e) {
                    parsedMessage = (StopTimeUpdate) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            
            private int bitField0_;
            
            private int stopSequence_;
            
            /**
             * <pre>
             * Must be the same as in stop_times.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional uint32 stop_sequence = 1;</code>
             */
            @Override
            public boolean hasStopSequence() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            
            /**
             * <pre>
             * Must be the same as in stop_times.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional uint32 stop_sequence = 1;</code>
             */
            @Override
            public int getStopSequence() {
                return stopSequence_;
            }
            
            /**
             * <pre>
             * Must be the same as in stop_times.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional uint32 stop_sequence = 1;</code>
             */
            public Builder setStopSequence(final int value) {
                bitField0_ |= 0x00000001;
                stopSequence_ = value;
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * Must be the same as in stop_times.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional uint32 stop_sequence = 1;</code>
             */
            public Builder clearStopSequence() {
                bitField0_ = (bitField0_ & ~0x00000001);
                stopSequence_ = 0;
                onChanged();
                return this;
            }
            
            private @Setter(AccessLevel.PRIVATE) Object stopId_ = "";
            
            /**
             * <pre>
             * Must be the same as in stops.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional string stop_id = 4;</code>
             */
            @Override
            public boolean hasStopId() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            
            /**
             * <pre>
             * Must be the same as in stops.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional string stop_id = 4;</code>
             */
            @Override
            public String getStopId() {
                return ProtoUtils.asString(stopId_, this::setStopId_);
            }
            
            /**
             * <pre>
             * Must be the same as in stops.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional string stop_id = 4;</code>
             */
            @Override
            public ByteString getStopIdBytes() {
                return ProtoUtils.asBytes(stopId_, this::setStopId_);
            }
            
            /**
             * <pre>
             * Must be the same as in stops.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional string stop_id = 4;</code>
             */
            public Builder setStopId(final String value) {
                Objects.requireNonNull(value);
                bitField0_ |= 0x00000002;
                stopId_ = value;
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * Must be the same as in stops.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional string stop_id = 4;</code>
             */
            public Builder clearStopId() {
                bitField0_ = (bitField0_ & ~0x00000002);
                stopId_ = getDefaultInstance().getStopId();
                onChanged();
                return this;
            }
            
            /**
             * <pre>
             * Must be the same as in stops.txt in the corresponding GTFS feed.
             * </pre>
             * <p>
             * <code>optional string stop_id = 4;</code>
             */
            public Builder setStopIdBytes(final ByteString value) {
                Objects.requireNonNull(value);
                bitField0_ |= 0x00000002;
                stopId_ = value;
                onChanged();
                return this;
            }
            
            private StopTimeEvent arrival_ = null;
            private SingleFieldBuilderV3<StopTimeEvent, StopTimeEvent.Builder,
                    StopTimeEventOrBuilder>
                    arrivalBuilder_;
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            @Override
            public boolean hasArrival() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            @Override
            public StopTimeEvent getArrival() {
                if (arrivalBuilder_ == null) {
                    return arrival_ == null ? StopTimeEvent.getDefaultInstance() : arrival_;
                } else {
                    return arrivalBuilder_.getMessage();
                }
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            public Builder setArrival(final StopTimeEvent value) {
                if (arrivalBuilder_ == null) {
                    Objects.requireNonNull(value);
                    arrival_ = value;
                    onChanged();
                } else {
                    arrivalBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            public Builder setArrival(final StopTimeEvent.Builder builderForValue) {
                if (arrivalBuilder_ == null) {
                    arrival_ = builderForValue.build();
                    onChanged();
                } else {
                    arrivalBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000004;
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            public Builder mergeArrival(final StopTimeEvent value) {
                if (arrivalBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004) && arrival_ != null
                            && arrival_ != StopTimeEvent.getDefaultInstance()) {
                        arrival_ =
                                StopTimeEvent.newBuilder(arrival_).mergeFrom(value).buildPartial();
                    } else {
                        arrival_ = value;
                    }
                    onChanged();
                } else {
                    arrivalBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            public Builder clearArrival() {
                if (arrivalBuilder_ == null) {
                    arrival_ = null;
                    onChanged();
                } else {
                    arrivalBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            public StopTimeEvent.Builder getArrivalBuilder() {
                bitField0_ |= 0x00000004;
                onChanged();
                return getArrivalFieldBuilder().getBuilder();
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            @Override
            public StopTimeEventOrBuilder getArrivalOrBuilder() {
                if (arrivalBuilder_ != null) {
                    return arrivalBuilder_.getMessageOrBuilder();
                } else {
                    return arrival_ == null ? StopTimeEvent.getDefaultInstance() : arrival_;
                }
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;</code>
             */
            private SingleFieldBuilderV3<StopTimeEvent, StopTimeEvent.Builder,
                    StopTimeEventOrBuilder> getArrivalFieldBuilder() {
                if (arrivalBuilder_ == null) {
                    arrivalBuilder_ =
                            new SingleFieldBuilderV3<>(getArrival(), getParentForChildren(),
                                    isClean());
                    arrival_ = null;
                }
                return arrivalBuilder_;
            }
            
            private StopTimeEvent departure_ = null;
            private SingleFieldBuilderV3<StopTimeEvent, StopTimeEvent.Builder,
                    StopTimeEventOrBuilder>
                    departureBuilder_;
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            @Override
            public boolean hasDeparture() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            @Override
            public StopTimeEvent getDeparture() {
                if (departureBuilder_ == null) {
                    return departure_ == null ? StopTimeEvent.getDefaultInstance() : departure_;
                } else {
                    return departureBuilder_.getMessage();
                }
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            public Builder setDeparture(final StopTimeEvent value) {
                if (departureBuilder_ == null) {
                    Objects.requireNonNull(value);
                    departure_ = value;
                    onChanged();
                } else {
                    departureBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            public Builder setDeparture(final StopTimeEvent.Builder builderForValue) {
                if (departureBuilder_ == null) {
                    departure_ = builderForValue.build();
                    onChanged();
                } else {
                    departureBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            public Builder mergeDeparture(final StopTimeEvent value) {
                if (departureBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) && departure_ != null
                            && departure_ != StopTimeEvent.getDefaultInstance()) {
                        departure_ = StopTimeEvent.newBuilder(departure_).mergeFrom(value)
                                .buildPartial();
                    } else {
                        departure_ = value;
                    }
                    onChanged();
                } else {
                    departureBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            public Builder clearDeparture() {
                if (departureBuilder_ == null) {
                    departure_ = null;
                    onChanged();
                } else {
                    departureBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            public StopTimeEvent.Builder getDepartureBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getDepartureFieldBuilder().getBuilder();
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            @Override
            public StopTimeEventOrBuilder getDepartureOrBuilder() {
                if (departureBuilder_ != null) {
                    return departureBuilder_.getMessageOrBuilder();
                } else {
                    return departure_ == null ? StopTimeEvent.getDefaultInstance() : departure_;
                }
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;</code>
             */
            private SingleFieldBuilderV3<StopTimeEvent, StopTimeEvent.Builder,
                    StopTimeEventOrBuilder> getDepartureFieldBuilder() {
                if (departureBuilder_ == null) {
                    departureBuilder_ =
                            new SingleFieldBuilderV3<>(getDeparture(), getParentForChildren(),
                                    isClean());
                    departure_ = null;
                }
                return departureBuilder_;
            }
            
            private int scheduleRelationship_ = 0;
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
             * schedule_relationship = 5 [default = SCHEDULED];</code>
             */
            @Override
            public boolean hasScheduleRelationship() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
             * schedule_relationship = 5 [default = SCHEDULED];</code>
             */
            @Override
            public ScheduleRelationship getScheduleRelationship() {
                final ScheduleRelationship result =
                        ScheduleRelationship.valueOf(scheduleRelationship_);
                return result == null ? ScheduleRelationship.SCHEDULED : result;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
             * schedule_relationship = 5 [default = SCHEDULED];</code>
             */
            public Builder setScheduleRelationship(final ScheduleRelationship value) {
                Objects.requireNonNull(value);
                bitField0_ |= 0x00000010;
                scheduleRelationship_ = value.getNumber();
                onChanged();
                return this;
            }
            
            /**
             * <code>optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
             * schedule_relationship = 5 [default = SCHEDULED];</code>
             */
            public Builder clearScheduleRelationship() {
                bitField0_ = (bitField0_ & ~0x00000010);
                scheduleRelationship_ = 0;
                onChanged();
                return this;
            }
            
            @Override
            public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }
            
            @Override
            public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }
            
            
            // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate.StopTimeUpdate)
        }
        
        // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate)
        private static final StopTimeUpdate DEFAULT_INSTANCE;
        
        static {
            DEFAULT_INSTANCE = new StopTimeUpdate();
        }
        
        public static StopTimeUpdate getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }
        
        @Deprecated public static final Parser<StopTimeUpdate> PARSER = new AbstractParser<>() {
            
            @Override
            public StopTimeUpdate parsePartialFrom(final CodedInputStream input,
                    final ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return new StopTimeUpdate(input, extensionRegistry);
            }
        };
        
        public static Parser<StopTimeUpdate> parser() {
            return PARSER;
        }
        
        @Override
        public Parser<StopTimeUpdate> getParserForType() {
            return PARSER;
        }
        
        @Override
        public StopTimeUpdate getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }
        
    }
    
    private int bitField0_;
    public static final int TRIP_FIELD_NUMBER = 1;
    private TripDescriptor trip_;
    
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     * <p>
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    @Override
    public boolean hasTrip() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     * <p>
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    @Override
    public TripDescriptor getTrip() {
        return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
    }
    
    /**
     * <pre>
     * The Trip that this message applies to. There can be at most one
     * TripUpdate entity for each actual trip instance.
     * If there is none, that means there is no prediction information available.
     * It does *not* mean that the trip is progressing according to schedule.
     * </pre>
     * <p>
     * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
     */
    @Override
    public TripDescriptorOrBuilder getTripOrBuilder() {
        return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
    }
    
    public static final int VEHICLE_FIELD_NUMBER = 3;
    private VehicleDescriptor vehicle_;
    
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    @Override
    public boolean hasVehicle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    @Override
    public VehicleDescriptor getVehicle() {
        return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
    }
    
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
     */
    @Override
    public VehicleDescriptorOrBuilder getVehicleOrBuilder() {
        return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
    }
    
    public static final int STOP_TIME_UPDATE_FIELD_NUMBER = 2;
    private List<StopTimeUpdate> stopTimeUpdate_;
    
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    @Override
    public List<StopTimeUpdate> getStopTimeUpdateList() {
        return stopTimeUpdate_;
    }
    
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    @Override
    public List<? extends StopTimeUpdateOrBuilder> getStopTimeUpdateOrBuilderList() {
        return stopTimeUpdate_;
    }
    
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    @Override
    public int getStopTimeUpdateCount() {
        return stopTimeUpdate_.size();
    }
    
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    @Override
    public StopTimeUpdate getStopTimeUpdate(final int index) {
        return stopTimeUpdate_.get(index);
    }
    
    /**
     * <pre>
     * Updates to StopTimes for the trip (both future, i.e., predictions, and in
     * some cases, past ones, i.e., those that already happened).
     * The updates must be sorted by stop_sequence, and apply for all the
     * following stops of the trip up to the next specified one.
     * Example 1:
     * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
     * delay of 0 for stop_sequence of the current stop means that the trip is
     * exactly on time.
     * Example 2:
     * For the same trip instance, 3 StopTimeUpdates are provided:
     * - delay of 5 min for stop_sequence 3
     * - delay of 1 min for stop_sequence 8
     * - delay of unspecified duration for stop_sequence 10
     * This will be interpreted as:
     * - stop_sequences 3,4,5,6,7 have delay of 5 min.
     * - stop_sequences 8,9 have delay of 1 min.
     * - stop_sequences 10,... have unknown delay.
     * </pre>
     * <p>
     * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
     */
    @Override
    public StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(final int index) {
        return stopTimeUpdate_.get(index);
    }
    
    public static final int TIMESTAMP_FIELD_NUMBER = 4;
    private long timestamp_;
    
    /**
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     * <p>
     * <code>optional uint64 timestamp = 4;</code>
     */
    @Override
    public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * Moment at which the vehicle's real-time progress was measured. In POSIX
     * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     * <p>
     * <code>optional uint64 timestamp = 4;</code>
     */
    @Override
    public long getTimestamp() {
        return timestamp_;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        if (!hasTrip()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getTrip().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (hasVehicle()) {
            if (!getVehicle().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        for (int i = 0; i < getStopTimeUpdateCount(); i++) {
            if (!getStopTimeUpdate(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (!extensionsAreInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        final ExtendableMessage<TripUpdate>.ExtensionWriter extensionWriter = newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, getTrip());
        }
        for (int i = 0; i < stopTimeUpdate_.size(); i++) {
            output.writeMessage(2, stopTimeUpdate_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(3, getVehicle());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeUInt64(4, timestamp_);
        }
        extensionWriter.writeUntil(2000, output);
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream.computeMessageSize(1, getTrip());
        }
        for (int i = 0; i < stopTimeUpdate_.size(); i++) {
            size += CodedOutputStream.computeMessageSize(2, stopTimeUpdate_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream.computeMessageSize(3, getVehicle());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream.computeUInt64Size(4, timestamp_);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof TripUpdate)) {
            return super.equals(obj);
        }
        final TripUpdate other = (TripUpdate) obj;
        
        boolean result = true;
        result = result && (hasTrip() == other.hasTrip());
        if (hasTrip()) {
            result = result && getTrip().equals(other.getTrip());
        }
        result = result && (hasVehicle() == other.hasVehicle());
        if (hasVehicle()) {
            result = result && getVehicle().equals(other.getVehicle());
        }
        result = result && getStopTimeUpdateList().equals(other.getStopTimeUpdateList());
        result = result && (hasTimestamp() == other.hasTimestamp());
        if (hasTimestamp()) {
            result = result && (getTimestamp() == other.getTimestamp());
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result && getExtensionFields().equals(other.getExtensionFields());
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTrip()) {
            hash = (37 * hash) + TRIP_FIELD_NUMBER;
            hash = (53 * hash) + getTrip().hashCode();
        }
        if (hasVehicle()) {
            hash = (37 * hash) + VEHICLE_FIELD_NUMBER;
            hash = (53 * hash) + getVehicle().hashCode();
        }
        if (getStopTimeUpdateCount() > 0) {
            hash = (37 * hash) + STOP_TIME_UPDATE_FIELD_NUMBER;
            hash = (53 * hash) + getStopTimeUpdateList().hashCode();
        }
        if (hasTimestamp()) {
            hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
            hash = (53 * hash) + Internal.hashLong(getTimestamp());
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static TripUpdate parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripUpdate parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripUpdate parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripUpdate parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripUpdate parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static TripUpdate parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static TripUpdate parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static TripUpdate parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TripUpdate parseDelimitedFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static TripUpdate parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static TripUpdate parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static TripUpdate parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final TripUpdate prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * Realtime update of the progress of a vehicle along a trip.
     * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
     * - A trip that proceeds along the schedule.
     * - A trip that proceeds along a route but has no fixed schedule.
     * - A trip that have been added or removed with regard to schedule.
     * The updates can be for future, predicted arrival/departure events, or for
     * past events that already occurred.
     * Normally, updates should get more precise and more certain (see
     * uncertainty below) as the events gets closer to current time.
     * Even if that is not possible, the information for past events should be
     * precise and certain. In particular, if an update points to time in the past
     * but its update's uncertainty is not 0, the client should conclude that the
     * update is a (wrong) prediction and that the trip has not completed yet.
     * Note that the update can describe a trip that is already completed.
     * To this end, it is enough to provide an update for the last stop of the trip.
     * If the time of that is in the past, the client will conclude from that that
     * the whole trip is in the past (it is possible, although inconsequential, to
     * also provide updates for preceding stops).
     * This option is most relevant for a trip that has completed ahead of schedule,
     * but according to the schedule, the trip is still proceeding at the current
     * time. Removing the updates for this trip could make the client assume
     * that the trip is still proceeding.
     * Note that the feed provider is allowed, but not required, to purge past
     * updates - this is one case where this would be practically useful.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.TripUpdate}
     */
    public static final class Builder extends ExtendableBuilder<TripUpdate, Builder> implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.TripUpdate)
            TripUpdateOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime.internal_static_transit_realtime_TripUpdate_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(TripUpdate.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.TripUpdate.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                getTripFieldBuilder();
                getVehicleFieldBuilder();
                getStopTimeUpdateFieldBuilder();
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            if (tripBuilder_ == null) {
                trip_ = null;
            } else {
                tripBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000001);
            if (vehicleBuilder_ == null) {
                vehicle_ = null;
            } else {
                vehicleBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            if (stopTimeUpdateBuilder_ == null) {
                stopTimeUpdate_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
            } else {
                stopTimeUpdateBuilder_.clear();
            }
            timestamp_ = 0L;
            bitField0_ = (bitField0_ & ~0x00000008);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_TripUpdate_descriptor;
        }
        
        @Override
        public TripUpdate getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public TripUpdate build() {
            final TripUpdate result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public TripUpdate buildPartial() {
            final TripUpdate result = new TripUpdate(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            if (tripBuilder_ == null) {
                result.trip_ = trip_;
            } else {
                result.trip_ = tripBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            if (vehicleBuilder_ == null) {
                result.vehicle_ = vehicle_;
            } else {
                result.vehicle_ = vehicleBuilder_.build();
            }
            if (stopTimeUpdateBuilder_ == null) {
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    stopTimeUpdate_ = Collections.unmodifiableList(stopTimeUpdate_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.stopTimeUpdate_ = stopTimeUpdate_;
            } else {
                result.stopTimeUpdate_ = stopTimeUpdateBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000004;
            }
            result.timestamp_ = timestamp_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public <Type> Builder setExtension(final GeneratedExtension<TripUpdate, Type> extension,
                final Type value) {
            return super.setExtension(extension, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final GeneratedExtension<TripUpdate, List<Type>> extension, final int index,
                final Type value) {
            return super.setExtension(extension, index, value);
        }
        
        @Override
        public <Type> Builder addExtension(
                final GeneratedExtension<TripUpdate, List<Type>> extension, final Type value) {
            return super.addExtension(extension, value);
        }
        
        @Override
        public <Type> Builder clearExtension(final GeneratedExtension<TripUpdate, ?> extension) {
            return super.clearExtension(extension);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof TripUpdate) {
                return mergeFrom((TripUpdate) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final TripUpdate other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasTrip()) {
                mergeTrip(other.getTrip());
            }
            if (other.hasVehicle()) {
                mergeVehicle(other.getVehicle());
            }
            if (stopTimeUpdateBuilder_ == null) {
                if (!other.stopTimeUpdate_.isEmpty()) {
                    if (stopTimeUpdate_.isEmpty()) {
                        stopTimeUpdate_ = other.stopTimeUpdate_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureStopTimeUpdateIsMutable();
                        stopTimeUpdate_.addAll(other.stopTimeUpdate_);
                    }
                    onChanged();
                }
            } else {
                if (!other.stopTimeUpdate_.isEmpty()) {
                    if (stopTimeUpdateBuilder_.isEmpty()) {
                        stopTimeUpdateBuilder_.dispose();
                        stopTimeUpdateBuilder_ = null;
                        stopTimeUpdate_ = other.stopTimeUpdate_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                        stopTimeUpdateBuilder_ = GeneratedMessageV3.alwaysUseFieldBuilders
                                ? getStopTimeUpdateFieldBuilder() : null;
                    } else {
                        stopTimeUpdateBuilder_.addAllMessages(other.stopTimeUpdate_);
                    }
                }
            }
            if (other.hasTimestamp()) {
                setTimestamp(other.getTimestamp());
            }
            mergeExtensionFields(other);
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            if (!hasTrip()) {
                return false;
            }
            if (!getTrip().isInitialized()) {
                return false;
            }
            if (hasVehicle()) {
                if (!getVehicle().isInitialized()) {
                    return false;
                }
            }
            for (int i = 0; i < getStopTimeUpdateCount(); i++) {
                if (!getStopTimeUpdate(i).isInitialized()) {
                    return false;
                }
            }
            return extensionsAreInitialized();
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            TripUpdate parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (TripUpdate) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private TripDescriptor trip_ = null;
        private SingleFieldBuilderV3<TripDescriptor, TripDescriptor.Builder,
                TripDescriptorOrBuilder>
                tripBuilder_;
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        @Override
        public boolean hasTrip() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        @Override
        public TripDescriptor getTrip() {
            if (tripBuilder_ == null) {
                return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
            } else {
                return tripBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder setTrip(final TripDescriptor value) {
            if (tripBuilder_ == null) {
                Objects.requireNonNull(value);
                trip_ = value;
                onChanged();
            } else {
                tripBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000001;
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder setTrip(final TripDescriptor.Builder builderForValue) {
            if (tripBuilder_ == null) {
                trip_ = builderForValue.build();
                onChanged();
            } else {
                tripBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000001;
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder mergeTrip(final TripDescriptor value) {
            if (tripBuilder_ == null) {
                if (((bitField0_ & 0x00000001) == 0x00000001) && trip_ != null
                        && trip_ != TripDescriptor.getDefaultInstance()) {
                    trip_ = TripDescriptor.newBuilder(trip_).mergeFrom(value).buildPartial();
                } else {
                    trip_ = value;
                }
                onChanged();
            } else {
                tripBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000001;
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder clearTrip() {
            if (tripBuilder_ == null) {
                trip_ = null;
                onChanged();
            } else {
                tripBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000001);
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public TripDescriptor.Builder getTripBuilder() {
            bitField0_ |= 0x00000001;
            onChanged();
            return getTripFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        @Override
        public TripDescriptorOrBuilder getTripOrBuilder() {
            if (tripBuilder_ != null) {
                return tripBuilder_.getMessageOrBuilder();
            } else {
                return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
            }
        }
        
        /**
         * <pre>
         * The Trip that this message applies to. There can be at most one
         * TripUpdate entity for each actual trip instance.
         * If there is none, that means there is no prediction information available.
         * It does *not* mean that the trip is progressing according to schedule.
         * </pre>
         * <p>
         * <code>required .transit_realtime.TripDescriptor trip = 1;</code>
         */
        private SingleFieldBuilderV3<TripDescriptor, TripDescriptor.Builder,
                TripDescriptorOrBuilder> getTripFieldBuilder() {
            if (tripBuilder_ == null) {
                tripBuilder_ =
                        new SingleFieldBuilderV3<>(getTrip(), getParentForChildren(), isClean());
                trip_ = null;
            }
            return tripBuilder_;
        }
        
        private VehicleDescriptor vehicle_ = null;
        private SingleFieldBuilderV3<VehicleDescriptor, VehicleDescriptor.Builder,
                VehicleDescriptorOrBuilder>
                vehicleBuilder_;
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        @Override
        public boolean hasVehicle() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        @Override
        public VehicleDescriptor getVehicle() {
            if (vehicleBuilder_ == null) {
                return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
            } else {
                return vehicleBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        public Builder setVehicle(final VehicleDescriptor value) {
            if (vehicleBuilder_ == null) {
                Objects.requireNonNull(value);
                vehicle_ = value;
                onChanged();
            } else {
                vehicleBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        public Builder setVehicle(final VehicleDescriptor.Builder builderForValue) {
            if (vehicleBuilder_ == null) {
                vehicle_ = builderForValue.build();
                onChanged();
            } else {
                vehicleBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        public Builder mergeVehicle(final VehicleDescriptor value) {
            if (vehicleBuilder_ == null) {
                if (((bitField0_ & 0x00000002) == 0x00000002) && vehicle_ != null
                        && vehicle_ != VehicleDescriptor.getDefaultInstance()) {
                    vehicle_ =
                            VehicleDescriptor.newBuilder(vehicle_).mergeFrom(value).buildPartial();
                } else {
                    vehicle_ = value;
                }
                onChanged();
            } else {
                vehicleBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        public Builder clearVehicle() {
            if (vehicleBuilder_ == null) {
                vehicle_ = null;
                onChanged();
            } else {
                vehicleBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        public VehicleDescriptor.Builder getVehicleBuilder() {
            bitField0_ |= 0x00000002;
            onChanged();
            return getVehicleFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        @Override
        public VehicleDescriptorOrBuilder getVehicleOrBuilder() {
            if (vehicleBuilder_ != null) {
                return vehicleBuilder_.getMessageOrBuilder();
            } else {
                return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
            }
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 3;</code>
         */
        private SingleFieldBuilderV3<VehicleDescriptor, VehicleDescriptor.Builder,
                VehicleDescriptorOrBuilder> getVehicleFieldBuilder() {
            if (vehicleBuilder_ == null) {
                vehicleBuilder_ =
                        new SingleFieldBuilderV3<>(getVehicle(), getParentForChildren(), isClean());
                vehicle_ = null;
            }
            return vehicleBuilder_;
        }
        
        private List<StopTimeUpdate> stopTimeUpdate_ = Collections.emptyList();
        
        private void ensureStopTimeUpdateIsMutable() {
            if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                stopTimeUpdate_ = new ArrayList<>(stopTimeUpdate_);
                bitField0_ |= 0x00000004;
            }
        }
        
        private RepeatedFieldBuilderV3<StopTimeUpdate, StopTimeUpdate.Builder,
                StopTimeUpdateOrBuilder>
                stopTimeUpdateBuilder_;
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        @Override
        public List<StopTimeUpdate> getStopTimeUpdateList() {
            if (stopTimeUpdateBuilder_ == null) {
                return Collections.unmodifiableList(stopTimeUpdate_);
            } else {
                return stopTimeUpdateBuilder_.getMessageList();
            }
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        @Override
        public int getStopTimeUpdateCount() {
            if (stopTimeUpdateBuilder_ == null) {
                return stopTimeUpdate_.size();
            } else {
                return stopTimeUpdateBuilder_.getCount();
            }
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        @Override
        public StopTimeUpdate getStopTimeUpdate(final int index) {
            if (stopTimeUpdateBuilder_ == null) {
                return stopTimeUpdate_.get(index);
            } else {
                return stopTimeUpdateBuilder_.getMessage(index);
            }
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder setStopTimeUpdate(final int index, final StopTimeUpdate value) {
            if (stopTimeUpdateBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.set(index, value);
                onChanged();
            } else {
                stopTimeUpdateBuilder_.setMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder setStopTimeUpdate(final int index,
                final StopTimeUpdate.Builder builderForValue) {
            if (stopTimeUpdateBuilder_ == null) {
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.set(index, builderForValue.build());
                onChanged();
            } else {
                stopTimeUpdateBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder addStopTimeUpdate(final StopTimeUpdate value) {
            if (stopTimeUpdateBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.add(value);
                onChanged();
            } else {
                stopTimeUpdateBuilder_.addMessage(value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder addStopTimeUpdate(final int index, final StopTimeUpdate value) {
            if (stopTimeUpdateBuilder_ == null) {
                Objects.requireNonNull(value);
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.add(index, value);
                onChanged();
            } else {
                stopTimeUpdateBuilder_.addMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder addStopTimeUpdate(final StopTimeUpdate.Builder builderForValue) {
            if (stopTimeUpdateBuilder_ == null) {
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.add(builderForValue.build());
                onChanged();
            } else {
                stopTimeUpdateBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder addStopTimeUpdate(final int index,
                final StopTimeUpdate.Builder builderForValue) {
            if (stopTimeUpdateBuilder_ == null) {
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.add(index, builderForValue.build());
                onChanged();
            } else {
                stopTimeUpdateBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder addAllStopTimeUpdate(final Iterable<? extends StopTimeUpdate> values) {
            if (stopTimeUpdateBuilder_ == null) {
                ensureStopTimeUpdateIsMutable();
                AbstractMessageLite.Builder.addAll(values, stopTimeUpdate_);
                onChanged();
            } else {
                stopTimeUpdateBuilder_.addAllMessages(values);
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder clearStopTimeUpdate() {
            if (stopTimeUpdateBuilder_ == null) {
                stopTimeUpdate_ = Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
            } else {
                stopTimeUpdateBuilder_.clear();
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public Builder removeStopTimeUpdate(final int index) {
            if (stopTimeUpdateBuilder_ == null) {
                ensureStopTimeUpdateIsMutable();
                stopTimeUpdate_.remove(index);
                onChanged();
            } else {
                stopTimeUpdateBuilder_.remove(index);
            }
            return this;
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public StopTimeUpdate.Builder getStopTimeUpdateBuilder(final int index) {
            return getStopTimeUpdateFieldBuilder().getBuilder(index);
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        @Override
        public StopTimeUpdateOrBuilder getStopTimeUpdateOrBuilder(final int index) {
            if (stopTimeUpdateBuilder_ == null) {
                return stopTimeUpdate_.get(index);
            } else {
                return stopTimeUpdateBuilder_.getMessageOrBuilder(index);
            }
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        @Override
        public List<? extends StopTimeUpdateOrBuilder> getStopTimeUpdateOrBuilderList() {
            if (stopTimeUpdateBuilder_ != null) {
                return stopTimeUpdateBuilder_.getMessageOrBuilderList();
            } else {
                return Collections.unmodifiableList(stopTimeUpdate_);
            }
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public StopTimeUpdate.Builder addStopTimeUpdateBuilder() {
            return getStopTimeUpdateFieldBuilder().addBuilder(StopTimeUpdate.getDefaultInstance());
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public StopTimeUpdate.Builder addStopTimeUpdateBuilder(final int index) {
            return getStopTimeUpdateFieldBuilder()
                    .addBuilder(index, StopTimeUpdate.getDefaultInstance());
        }
        
        /**
         * <pre>
         * Updates to StopTimes for the trip (both future, i.e., predictions, and in
         * some cases, past ones, i.e., those that already happened).
         * The updates must be sorted by stop_sequence, and apply for all the
         * following stops of the trip up to the next specified one.
         * Example 1:
         * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
         * delay of 0 for stop_sequence of the current stop means that the trip is
         * exactly on time.
         * Example 2:
         * For the same trip instance, 3 StopTimeUpdates are provided:
         * - delay of 5 min for stop_sequence 3
         * - delay of 1 min for stop_sequence 8
         * - delay of unspecified duration for stop_sequence 10
         * This will be interpreted as:
         * - stop_sequences 3,4,5,6,7 have delay of 5 min.
         * - stop_sequences 8,9 have delay of 1 min.
         * - stop_sequences 10,... have unknown delay.
         * </pre>
         * <p>
         * <code>repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;</code>
         */
        public List<StopTimeUpdate.Builder> getStopTimeUpdateBuilderList() {
            return getStopTimeUpdateFieldBuilder().getBuilderList();
        }
        
        private RepeatedFieldBuilderV3<StopTimeUpdate, StopTimeUpdate.Builder,
                StopTimeUpdateOrBuilder> getStopTimeUpdateFieldBuilder() {
            if (stopTimeUpdateBuilder_ == null) {
                stopTimeUpdateBuilder_ = new RepeatedFieldBuilderV3<>(stopTimeUpdate_,
                        ((bitField0_ & 0x00000004) == 0x00000004), getParentForChildren(),
                        isClean());
                stopTimeUpdate_ = null;
            }
            return stopTimeUpdateBuilder_;
        }
        
        private long timestamp_;
        
        /**
         * <pre>
         * Moment at which the vehicle's real-time progress was measured. In POSIX
         * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 4;</code>
         */
        @Override
        public boolean hasTimestamp() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        
        /**
         * <pre>
         * Moment at which the vehicle's real-time progress was measured. In POSIX
         * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 4;</code>
         */
        @Override
        public long getTimestamp() {
            return timestamp_;
        }
        
        /**
         * <pre>
         * Moment at which the vehicle's real-time progress was measured. In POSIX
         * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 4;</code>
         */
        public Builder setTimestamp(final long value) {
            bitField0_ |= 0x00000008;
            timestamp_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Moment at which the vehicle's real-time progress was measured. In POSIX
         * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 4;</code>
         */
        public Builder clearTimestamp() {
            bitField0_ = (bitField0_ & ~0x00000008);
            timestamp_ = 0L;
            onChanged();
            return this;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.TripUpdate)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate)
    private static final TripUpdate DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new TripUpdate();
    }
    
    public static TripUpdate getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<TripUpdate> PARSER = new AbstractParser<>() {
        
        @Override
        public TripUpdate parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new TripUpdate(input, extensionRegistry);
        }
    };
    
    public static Parser<TripUpdate> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<TripUpdate> getParserForType() {
        return PARSER;
    }
    
    @Override
    public TripUpdate getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}