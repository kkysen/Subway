// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.Objects;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * NYCT Subway extensions for the stop time update
 * </pre>
 * <p>
 * Protobuf type {@code NyctStopTimeUpdate}
 */
public final class NyctStopTimeUpdate extends GeneratedMessageV3
        implements NyctStopTimeUpdateOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use NyctStopTimeUpdate.newBuilder() to construct.
    private NyctStopTimeUpdate(final GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }
    
    private NyctStopTimeUpdate() {
        scheduledTrack_ = "";
        actualTrack_ = "";
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private NyctStopTimeUpdate(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        scheduledTrack_ = bs;
                        break;
                    }
                    case 18: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000002;
                        actualTrack_ = bs;
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return NyctSubway.internal_static_NyctStopTimeUpdate_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return NyctSubway.internal_static_NyctStopTimeUpdate_fieldAccessorTable
                .ensureFieldAccessorsInitialized(NyctStopTimeUpdate.class, Builder.class);
    }
    
    private int bitField0_;
    public static final int SCHEDULED_TRACK_FIELD_NUMBER = 1;
    private volatile @Setter(AccessLevel.PRIVATE) Object scheduledTrack_;
    
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     * <p>
     * <code>optional string scheduled_track = 1;</code>
     */
    @Override
    public boolean hasScheduledTrack() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     * <p>
     * <code>optional string scheduled_track = 1;</code>
     */
    @Override
    public String getScheduledTrack() {
        return ProtoUtils.asString(scheduledTrack_, this::setScheduledTrack_);
    }
    
    /**
     * <pre>
     * Provides the planned station arrival track. The following is the Manhattan
     * track configurations:
     * 1: southbound local
     * 2: southbound express
     * 3: northbound express
     * 4: northbound local
     * In the Bronx (except Dyre Ave line)
     * M: bi-directional express (in the AM express to Manhattan, in the PM
     * express away).
     * The Dyre Ave line is configured:
     * 1: southbound
     * 2: northbound
     * 3: bi-directional
     * </pre>
     * <p>
     * <code>optional string scheduled_track = 1;</code>
     */
    @Override
    public ByteString getScheduledTrackBytes() {
        return ProtoUtils.asBytes(scheduledTrack_, this::setScheduledTrack_);
    }
    
    public static final int ACTUAL_TRACK_FIELD_NUMBER = 2;
    private volatile @Setter(AccessLevel.PRIVATE) Object actualTrack_;
    
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     * <p>
     * <code>optional string actual_track = 2;</code>
     */
    @Override
    public boolean hasActualTrack() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     * <p>
     * <code>optional string actual_track = 2;</code>
     */
    @Override
    public String getActualTrack() {
        return ProtoUtils.asString(actualTrack_, this::setActualTrack_);
    }
    
    /**
     * <pre>
     * This is the actual track that the train is operating on and can be used to
     * determine if a train is operating according to its current schedule
     * (plan).
     * The actual track is known only shortly before the train reaches a station,
     * typically not before it leaves the previous station. Therefore, the NYCT
     * feed sets this field only for the first station of the remaining trip.
     * Different actual and scheduled track is the result of manually rerouting a
     * train off it scheduled path.  When this occurs, prediction data may become
     * unreliable since the train is no longer operating in accordance to its
     * schedule.  The rules engine for the 'countdown' clocks will remove this
     * train from all schedule stations.
     * </pre>
     * <p>
     * <code>optional string actual_track = 2;</code>
     */
    @Override
    public ByteString getActualTrackBytes() {
        return ProtoUtils.asBytes(actualTrack_, this::setActualTrack_);
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            GeneratedMessageV3.writeString(output, 1, scheduledTrack_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            GeneratedMessageV3.writeString(output, 2, actualTrack_);
        }
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += GeneratedMessageV3.computeStringSize(1, scheduledTrack_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += GeneratedMessageV3.computeStringSize(2, actualTrack_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof NyctStopTimeUpdate)) {
            return super.equals(obj);
        }
        final NyctStopTimeUpdate other = (NyctStopTimeUpdate) obj;
        
        boolean result = true;
        result = result && (hasScheduledTrack() == other.hasScheduledTrack());
        if (hasScheduledTrack()) {
            result = result && getScheduledTrack().equals(other.getScheduledTrack());
        }
        result = result && (hasActualTrack() == other.hasActualTrack());
        if (hasActualTrack()) {
            result = result && getActualTrack().equals(other.getActualTrack());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasScheduledTrack()) {
            hash = (37 * hash) + SCHEDULED_TRACK_FIELD_NUMBER;
            hash = (53 * hash) + getScheduledTrack().hashCode();
        }
        if (hasActualTrack()) {
            hash = (37 * hash) + ACTUAL_TRACK_FIELD_NUMBER;
            hash = (53 * hash) + getActualTrack().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static NyctStopTimeUpdate parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctStopTimeUpdate parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctStopTimeUpdate parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctStopTimeUpdate parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctStopTimeUpdate parseFrom(final byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctStopTimeUpdate parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctStopTimeUpdate parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static NyctStopTimeUpdate parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static NyctStopTimeUpdate parseDelimitedFrom(final InputStream input)
            throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static NyctStopTimeUpdate parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static NyctStopTimeUpdate parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static NyctStopTimeUpdate parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final NyctStopTimeUpdate prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * NYCT Subway extensions for the stop time update
     * </pre>
     * <p>
     * Protobuf type {@code NyctStopTimeUpdate}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:NyctStopTimeUpdate)
            NyctStopTimeUpdateOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return NyctSubway.internal_static_NyctStopTimeUpdate_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return NyctSubway.internal_static_NyctStopTimeUpdate_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(NyctStopTimeUpdate.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.NyctStopTimeUpdate.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            scheduledTrack_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            actualTrack_ = "";
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return NyctSubway.internal_static_NyctStopTimeUpdate_descriptor;
        }
        
        @Override
        public NyctStopTimeUpdate getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public NyctStopTimeUpdate build() {
            final NyctStopTimeUpdate result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public NyctStopTimeUpdate buildPartial() {
            final NyctStopTimeUpdate result = new NyctStopTimeUpdate(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.scheduledTrack_ = scheduledTrack_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.actualTrack_ = actualTrack_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof NyctStopTimeUpdate) {
                return mergeFrom((NyctStopTimeUpdate) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final NyctStopTimeUpdate other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasScheduledTrack()) {
                bitField0_ |= 0x00000001;
                scheduledTrack_ = other.scheduledTrack_;
                onChanged();
            }
            if (other.hasActualTrack()) {
                bitField0_ |= 0x00000002;
                actualTrack_ = other.actualTrack_;
                onChanged();
            }
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            return true;
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            NyctStopTimeUpdate parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (NyctStopTimeUpdate) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private @Setter(AccessLevel.PRIVATE) Object scheduledTrack_ = "";
        
        /**
         * <pre>
         * Provides the planned station arrival track. The following is the Manhattan
         * track configurations:
         * 1: southbound local
         * 2: southbound express
         * 3: northbound express
         * 4: northbound local
         * In the Bronx (except Dyre Ave line)
         * M: bi-directional express (in the AM express to Manhattan, in the PM
         * express away).
         * The Dyre Ave line is configured:
         * 1: southbound
         * 2: northbound
         * 3: bi-directional
         * </pre>
         * <p>
         * <code>optional string scheduled_track = 1;</code>
         */
        @Override
        public boolean hasScheduledTrack() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * Provides the planned station arrival track. The following is the Manhattan
         * track configurations:
         * 1: southbound local
         * 2: southbound express
         * 3: northbound express
         * 4: northbound local
         * In the Bronx (except Dyre Ave line)
         * M: bi-directional express (in the AM express to Manhattan, in the PM
         * express away).
         * The Dyre Ave line is configured:
         * 1: southbound
         * 2: northbound
         * 3: bi-directional
         * </pre>
         * <p>
         * <code>optional string scheduled_track = 1;</code>
         */
        @Override
        public String getScheduledTrack() {
            return ProtoUtils.asString(scheduledTrack_, this::setScheduledTrack_);
        }
        
        /**
         * <pre>
         * Provides the planned station arrival track. The following is the Manhattan
         * track configurations:
         * 1: southbound local
         * 2: southbound express
         * 3: northbound express
         * 4: northbound local
         * In the Bronx (except Dyre Ave line)
         * M: bi-directional express (in the AM express to Manhattan, in the PM
         * express away).
         * The Dyre Ave line is configured:
         * 1: southbound
         * 2: northbound
         * 3: bi-directional
         * </pre>
         * <p>
         * <code>optional string scheduled_track = 1;</code>
         */
        @Override
        public ByteString getScheduledTrackBytes() {
            return ProtoUtils.asBytes(scheduledTrack_, this::setScheduledTrack_);
        }
        
        /**
         * <pre>
         * Provides the planned station arrival track. The following is the Manhattan
         * track configurations:
         * 1: southbound local
         * 2: southbound express
         * 3: northbound express
         * 4: northbound local
         * In the Bronx (except Dyre Ave line)
         * M: bi-directional express (in the AM express to Manhattan, in the PM
         * express away).
         * The Dyre Ave line is configured:
         * 1: southbound
         * 2: northbound
         * 3: bi-directional
         * </pre>
         * <p>
         * <code>optional string scheduled_track = 1;</code>
         */
        public Builder setScheduledTrack(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            scheduledTrack_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Provides the planned station arrival track. The following is the Manhattan
         * track configurations:
         * 1: southbound local
         * 2: southbound express
         * 3: northbound express
         * 4: northbound local
         * In the Bronx (except Dyre Ave line)
         * M: bi-directional express (in the AM express to Manhattan, in the PM
         * express away).
         * The Dyre Ave line is configured:
         * 1: southbound
         * 2: northbound
         * 3: bi-directional
         * </pre>
         * <p>
         * <code>optional string scheduled_track = 1;</code>
         */
        public Builder clearScheduledTrack() {
            bitField0_ = (bitField0_ & ~0x00000001);
            scheduledTrack_ = getDefaultInstance().getScheduledTrack();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Provides the planned station arrival track. The following is the Manhattan
         * track configurations:
         * 1: southbound local
         * 2: southbound express
         * 3: northbound express
         * 4: northbound local
         * In the Bronx (except Dyre Ave line)
         * M: bi-directional express (in the AM express to Manhattan, in the PM
         * express away).
         * The Dyre Ave line is configured:
         * 1: southbound
         * 2: northbound
         * 3: bi-directional
         * </pre>
         * <p>
         * <code>optional string scheduled_track = 1;</code>
         */
        public Builder setScheduledTrackBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            scheduledTrack_ = value;
            onChanged();
            return this;
        }
        
        private @Setter(AccessLevel.PRIVATE) Object actualTrack_ = "";
        
        /**
         * <pre>
         * This is the actual track that the train is operating on and can be used to
         * determine if a train is operating according to its current schedule
         * (plan).
         * The actual track is known only shortly before the train reaches a station,
         * typically not before it leaves the previous station. Therefore, the NYCT
         * feed sets this field only for the first station of the remaining trip.
         * Different actual and scheduled track is the result of manually rerouting a
         * train off it scheduled path.  When this occurs, prediction data may become
         * unreliable since the train is no longer operating in accordance to its
         * schedule.  The rules engine for the 'countdown' clocks will remove this
         * train from all schedule stations.
         * </pre>
         * <p>
         * <code>optional string actual_track = 2;</code>
         */
        @Override
        public boolean hasActualTrack() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * This is the actual track that the train is operating on and can be used to
         * determine if a train is operating according to its current schedule
         * (plan).
         * The actual track is known only shortly before the train reaches a station,
         * typically not before it leaves the previous station. Therefore, the NYCT
         * feed sets this field only for the first station of the remaining trip.
         * Different actual and scheduled track is the result of manually rerouting a
         * train off it scheduled path.  When this occurs, prediction data may become
         * unreliable since the train is no longer operating in accordance to its
         * schedule.  The rules engine for the 'countdown' clocks will remove this
         * train from all schedule stations.
         * </pre>
         * <p>
         * <code>optional string actual_track = 2;</code>
         */
        @Override
        public String getActualTrack() {
            return ProtoUtils.asString(actualTrack_, this::setActualTrack_);
        }
        
        /**
         * <pre>
         * This is the actual track that the train is operating on and can be used to
         * determine if a train is operating according to its current schedule
         * (plan).
         * The actual track is known only shortly before the train reaches a station,
         * typically not before it leaves the previous station. Therefore, the NYCT
         * feed sets this field only for the first station of the remaining trip.
         * Different actual and scheduled track is the result of manually rerouting a
         * train off it scheduled path.  When this occurs, prediction data may become
         * unreliable since the train is no longer operating in accordance to its
         * schedule.  The rules engine for the 'countdown' clocks will remove this
         * train from all schedule stations.
         * </pre>
         * <p>
         * <code>optional string actual_track = 2;</code>
         */
        @Override
        public ByteString getActualTrackBytes() {
            return ProtoUtils.asBytes(actualTrack_, this::setActualTrack_);
        }
        
        /**
         * <pre>
         * This is the actual track that the train is operating on and can be used to
         * determine if a train is operating according to its current schedule
         * (plan).
         * The actual track is known only shortly before the train reaches a station,
         * typically not before it leaves the previous station. Therefore, the NYCT
         * feed sets this field only for the first station of the remaining trip.
         * Different actual and scheduled track is the result of manually rerouting a
         * train off it scheduled path.  When this occurs, prediction data may become
         * unreliable since the train is no longer operating in accordance to its
         * schedule.  The rules engine for the 'countdown' clocks will remove this
         * train from all schedule stations.
         * </pre>
         * <p>
         * <code>optional string actual_track = 2;</code>
         */
        public Builder setActualTrack(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000002;
            actualTrack_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * This is the actual track that the train is operating on and can be used to
         * determine if a train is operating according to its current schedule
         * (plan).
         * The actual track is known only shortly before the train reaches a station,
         * typically not before it leaves the previous station. Therefore, the NYCT
         * feed sets this field only for the first station of the remaining trip.
         * Different actual and scheduled track is the result of manually rerouting a
         * train off it scheduled path.  When this occurs, prediction data may become
         * unreliable since the train is no longer operating in accordance to its
         * schedule.  The rules engine for the 'countdown' clocks will remove this
         * train from all schedule stations.
         * </pre>
         * <p>
         * <code>optional string actual_track = 2;</code>
         */
        public Builder clearActualTrack() {
            bitField0_ = (bitField0_ & ~0x00000002);
            actualTrack_ = getDefaultInstance().getActualTrack();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * This is the actual track that the train is operating on and can be used to
         * determine if a train is operating according to its current schedule
         * (plan).
         * The actual track is known only shortly before the train reaches a station,
         * typically not before it leaves the previous station. Therefore, the NYCT
         * feed sets this field only for the first station of the remaining trip.
         * Different actual and scheduled track is the result of manually rerouting a
         * train off it scheduled path.  When this occurs, prediction data may become
         * unreliable since the train is no longer operating in accordance to its
         * schedule.  The rules engine for the 'countdown' clocks will remove this
         * train from all schedule stations.
         * </pre>
         * <p>
         * <code>optional string actual_track = 2;</code>
         */
        public Builder setActualTrackBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000002;
            actualTrack_ = value;
            onChanged();
            return this;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:NyctStopTimeUpdate)
    }
    
    // @@protoc_insertion_point(class_scope:NyctStopTimeUpdate)
    private static final NyctStopTimeUpdate DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new NyctStopTimeUpdate();
    }
    
    public static NyctStopTimeUpdate getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<NyctStopTimeUpdate> PARSER = new AbstractParser<>() {
        
        @Override
        public NyctStopTimeUpdate parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new NyctStopTimeUpdate(input, extensionRegistry);
        }
    };
    
    public static Parser<NyctStopTimeUpdate> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<NyctStopTimeUpdate> getParserForType() {
        return PARSER;
    }
    
    @Override
    public NyctStopTimeUpdate getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}