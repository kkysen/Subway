// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Objects;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.EnumDescriptor;
import com.google.protobuf.Descriptors.EnumValueDescriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage.GeneratedExtension;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.GeneratedMessageV3.ExtendableMessage;
import com.google.protobuf.Internal;
import com.google.protobuf.Internal.EnumLiteMap;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.SingleFieldBuilderV3;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * Realtime positioning information for a given vehicle.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.VehiclePosition}
 */
public final class VehiclePosition extends ExtendableMessage<VehiclePosition>
        implements VehiclePositionOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use VehiclePosition.newBuilder() to construct.
    private VehiclePosition(final ExtendableBuilder<VehiclePosition, ?> builder) {
        super(builder);
    }
    
    private VehiclePosition() {
        currentStopSequence_ = 0;
        stopId_ = "";
        currentStatus_ = 2;
        timestamp_ = 0L;
        congestionLevel_ = 0;
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private VehiclePosition(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        TripDescriptor.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = trip_.toBuilder();
                        }
                        trip_ = input.readMessage(TripDescriptor.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(trip_);
                            trip_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 18: {
                        Position.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000004) == 0x00000004)) {
                            subBuilder = position_.toBuilder();
                        }
                        position_ = input.readMessage(Position.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(position_);
                            position_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000004;
                        break;
                    }
                    case 24: {
                        bitField0_ |= 0x00000008;
                        currentStopSequence_ = input.readUInt32();
                        break;
                    }
                    case 32: {
                        final int rawValue = input.readEnum();
                        final VehicleStopStatus value = VehicleStopStatus.valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(4, rawValue);
                        } else {
                            bitField0_ |= 0x00000020;
                            currentStatus_ = rawValue;
                        }
                        break;
                    }
                    case 40: {
                        bitField0_ |= 0x00000040;
                        timestamp_ = input.readUInt64();
                        break;
                    }
                    case 48: {
                        final int rawValue = input.readEnum();
                        final CongestionLevel value = CongestionLevel.valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(6, rawValue);
                        } else {
                            bitField0_ |= 0x00000080;
                            congestionLevel_ = rawValue;
                        }
                        break;
                    }
                    case 58: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000010;
                        stopId_ = bs;
                        break;
                    }
                    case 66: {
                        VehicleDescriptor.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            subBuilder = vehicle_.toBuilder();
                        }
                        vehicle_ = input.readMessage(VehicleDescriptor.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(vehicle_);
                            vehicle_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000002;
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_VehiclePosition_fieldAccessorTable
                .ensureFieldAccessorsInitialized(VehiclePosition.class, Builder.class);
    }
    
    /**
     * Protobuf enum {@code transit_realtime.VehiclePosition.VehicleStopStatus}
     */
    public enum VehicleStopStatus implements ProtocolMessageEnum {
        /**
         * <pre>
         * The vehicle is just about to arrive at the stop (on a stop
         * display, the vehicle symbol typically flashes).
         * </pre>
         * <p>
         * <code>INCOMING_AT = 0;</code>
         */
        INCOMING_AT(0),
        /**
         * <pre>
         * The vehicle is standing at the stop.
         * </pre>
         * <p>
         * <code>STOPPED_AT = 1;</code>
         */
        STOPPED_AT(1),
        /**
         * <pre>
         * The vehicle contains departed and is in transit to the next stop.
         * </pre>
         * <p>
         * <code>IN_TRANSIT_TO = 2;</code>
         */
        IN_TRANSIT_TO(2),;
        
        /**
         * <pre>
         * The vehicle is just about to arrive at the stop (on a stop
         * display, the vehicle symbol typically flashes).
         * </pre>
         * <p>
         * <code>INCOMING_AT = 0;</code>
         */
        public static final int INCOMING_AT_VALUE = 0;
        /**
         * <pre>
         * The vehicle is standing at the stop.
         * </pre>
         * <p>
         * <code>STOPPED_AT = 1;</code>
         */
        public static final int STOPPED_AT_VALUE = 1;
        /**
         * <pre>
         * The vehicle contains departed and is in transit to the next stop.
         * </pre>
         * <p>
         * <code>IN_TRANSIT_TO = 2;</code>
         */
        public static final int IN_TRANSIT_TO_VALUE = 2;
        
        
        @Override
        public final int getNumber() {
            return value;
        }
        
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static VehicleStopStatus valueOf(final int value) {
            return forNumber(value);
        }
        
        public static VehicleStopStatus forNumber(final int value) {
            switch (value) {
                case 0:
                    return INCOMING_AT;
                case 1:
                    return STOPPED_AT;
                case 2:
                    return IN_TRANSIT_TO;
                default:
                    return null;
            }
        }
        
        public static EnumLiteMap<VehicleStopStatus> internalGetValueMap() {
            return internalValueMap;
        }
        
        private static final EnumLiteMap<VehicleStopStatus> internalValueMap =
                VehicleStopStatus::forNumber;
        
        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        
        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }
        
        public static final EnumDescriptor getDescriptor() {
            return VehiclePosition.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final VehicleStopStatus[] VALUES = values();
        
        public static VehicleStopStatus valueOf(final EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }
        
        private final int value;
        
        VehicleStopStatus(final int value) {
            this.value = value;
        }
        
        // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.VehicleStopStatus)
    }
    
    /**
     * <pre>
     * Congestion level that is affecting this vehicle.
     * </pre>
     * <p>
     * Protobuf enum {@code transit_realtime.VehiclePosition.CongestionLevel}
     */
    public enum CongestionLevel implements ProtocolMessageEnum {
        /**
         * <code>UNKNOWN_CONGESTION_LEVEL = 0;</code>
         */
        UNKNOWN_CONGESTION_LEVEL(0),
        /**
         * <code>RUNNING_SMOOTHLY = 1;</code>
         */
        RUNNING_SMOOTHLY(1),
        /**
         * <code>STOP_AND_GO = 2;</code>
         */
        STOP_AND_GO(2),
        /**
         * <code>CONGESTION = 3;</code>
         */
        CONGESTION(3),
        /**
         * <pre>
         * People leaving their cars.
         * </pre>
         * <p>
         * <code>SEVERE_CONGESTION = 4;</code>
         */
        SEVERE_CONGESTION(4),;
        
        /**
         * <code>UNKNOWN_CONGESTION_LEVEL = 0;</code>
         */
        public static final int UNKNOWN_CONGESTION_LEVEL_VALUE = 0;
        /**
         * <code>RUNNING_SMOOTHLY = 1;</code>
         */
        public static final int RUNNING_SMOOTHLY_VALUE = 1;
        /**
         * <code>STOP_AND_GO = 2;</code>
         */
        public static final int STOP_AND_GO_VALUE = 2;
        /**
         * <code>CONGESTION = 3;</code>
         */
        public static final int CONGESTION_VALUE = 3;
        /**
         * <pre>
         * People leaving their cars.
         * </pre>
         * <p>
         * <code>SEVERE_CONGESTION = 4;</code>
         */
        public static final int SEVERE_CONGESTION_VALUE = 4;
        
        
        @Override
        public final int getNumber() {
            return value;
        }
        
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static CongestionLevel valueOf(final int value) {
            return forNumber(value);
        }
        
        public static CongestionLevel forNumber(final int value) {
            switch (value) {
                case 0:
                    return UNKNOWN_CONGESTION_LEVEL;
                case 1:
                    return RUNNING_SMOOTHLY;
                case 2:
                    return STOP_AND_GO;
                case 3:
                    return CONGESTION;
                case 4:
                    return SEVERE_CONGESTION;
                default:
                    return null;
            }
        }
        
        public static EnumLiteMap<CongestionLevel> internalGetValueMap() {
            return internalValueMap;
        }
        
        private static final EnumLiteMap<CongestionLevel> internalValueMap =
                CongestionLevel::forNumber;
        
        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        
        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }
        
        public static final EnumDescriptor getDescriptor() {
            return VehiclePosition.getDescriptor().getEnumTypes().get(1);
        }
        
        private static final CongestionLevel[] VALUES = values();
        
        public static CongestionLevel valueOf(final EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }
        
        private final int value;
        
        CongestionLevel(final int value) {
            this.value = value;
        }
        
        // @@protoc_insertion_point(enum_scope:transit_realtime.VehiclePosition.CongestionLevel)
    }
    
    private int bitField0_;
    public static final int TRIP_FIELD_NUMBER = 1;
    private TripDescriptor trip_;
    
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    @Override
    public boolean hasTrip() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    @Override
    public TripDescriptor getTrip() {
        return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
    }
    
    /**
     * <pre>
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    @Override
    public TripDescriptorOrBuilder getTripOrBuilder() {
        return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
    }
    
    public static final int VEHICLE_FIELD_NUMBER = 8;
    private VehicleDescriptor vehicle_;
    
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    @Override
    public boolean hasVehicle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    @Override
    public VehicleDescriptor getVehicle() {
        return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
    }
    
    /**
     * <pre>
     * Additional information on the vehicle that is serving this trip.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    @Override
    public VehicleDescriptorOrBuilder getVehicleOrBuilder() {
        return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
    }
    
    public static final int POSITION_FIELD_NUMBER = 2;
    private Position position_;
    
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    @Override
    public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    @Override
    public Position getPosition() {
        return position_ == null ? Position.getDefaultInstance() : position_;
    }
    
    /**
     * <pre>
     * Current position of this vehicle.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.Position position = 2;</code>
     */
    @Override
    public PositionOrBuilder getPositionOrBuilder() {
        return position_ == null ? Position.getDefaultInstance() : position_;
    }
    
    public static final int CURRENT_STOP_SEQUENCE_FIELD_NUMBER = 3;
    private int currentStopSequence_;
    
    /**
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     * <p>
     * <code>optional uint32 current_stop_sequence = 3;</code>
     */
    @Override
    public boolean hasCurrentStopSequence() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    
    /**
     * <pre>
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     * </pre>
     * <p>
     * <code>optional uint32 current_stop_sequence = 3;</code>
     */
    @Override
    public int getCurrentStopSequence() {
        return currentStopSequence_;
    }
    
    public static final int STOP_ID_FIELD_NUMBER = 7;
    private volatile @Setter(AccessLevel.PRIVATE) Object stopId_;
    
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     * <p>
     * <code>optional string stop_id = 7;</code>
     */
    @Override
    public boolean hasStopId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     * <p>
     * <code>optional string stop_id = 7;</code>
     */
    @Override
    public String getStopId() {
        return ProtoUtils.asString(stopId_, this::setStopId_);
    }
    
    /**
     * <pre>
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     * </pre>
     * <p>
     * <code>optional string stop_id = 7;</code>
     */
    @Override
    public ByteString getStopIdBytes() {
        return ProtoUtils.asBytes(stopId_, this::setStopId_);
    }
    
    public static final int CURRENT_STATUS_FIELD_NUMBER = 4;
    private int currentStatus_;
    
    /**
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4
     * [default = IN_TRANSIT_TO];</code>
     */
    @Override
    public boolean hasCurrentStatus() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    
    /**
     * <pre>
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     * </pre>
     * <p>
     * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4
     * [default = IN_TRANSIT_TO];</code>
     */
    @Override
    public VehicleStopStatus getCurrentStatus() {
        final VehicleStopStatus result = VehicleStopStatus.valueOf(currentStatus_);
        return result == null ? VehicleStopStatus.IN_TRANSIT_TO : result;
    }
    
    public static final int TIMESTAMP_FIELD_NUMBER = 5;
    private long timestamp_;
    
    /**
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     * <p>
     * <code>optional uint64 timestamp = 5;</code>
     */
    @Override
    public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    
    /**
     * <pre>
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     * </pre>
     * <p>
     * <code>optional uint64 timestamp = 5;</code>
     */
    @Override
    public long getTimestamp() {
        return timestamp_;
    }
    
    public static final int CONGESTION_LEVEL_FIELD_NUMBER = 6;
    private int congestionLevel_;
    
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     */
    @Override
    public boolean hasCongestionLevel() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    
    /**
     * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     */
    @Override
    public CongestionLevel getCongestionLevel() {
        final CongestionLevel result = CongestionLevel.valueOf(congestionLevel_);
        return result == null ? CongestionLevel.UNKNOWN_CONGESTION_LEVEL : result;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        if (hasTrip()) {
            if (!getTrip().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasVehicle()) {
            if (!getVehicle().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasPosition()) {
            if (!getPosition().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (!extensionsAreInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        final ExtendableMessage<VehiclePosition>.ExtensionWriter extensionWriter =
                newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, getTrip());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeMessage(2, getPosition());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeUInt32(3, currentStopSequence_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            output.writeEnum(4, currentStatus_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
            output.writeUInt64(5, timestamp_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
            output.writeEnum(6, congestionLevel_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            GeneratedMessageV3.writeString(output, 7, stopId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(8, getVehicle());
        }
        extensionWriter.writeUntil(2000, output);
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream.computeMessageSize(1, getTrip());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream.computeMessageSize(2, getPosition());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += CodedOutputStream.computeUInt32Size(3, currentStopSequence_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            size += CodedOutputStream.computeEnumSize(4, currentStatus_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
            size += CodedOutputStream.computeUInt64Size(5, timestamp_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
            size += CodedOutputStream.computeEnumSize(6, congestionLevel_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += GeneratedMessageV3.computeStringSize(7, stopId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream.computeMessageSize(8, getVehicle());
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof VehiclePosition)) {
            return super.equals(obj);
        }
        final VehiclePosition other = (VehiclePosition) obj;
        
        boolean result = true;
        result = result && (hasTrip() == other.hasTrip());
        if (hasTrip()) {
            result = result && getTrip().equals(other.getTrip());
        }
        result = result && (hasVehicle() == other.hasVehicle());
        if (hasVehicle()) {
            result = result && getVehicle().equals(other.getVehicle());
        }
        result = result && (hasPosition() == other.hasPosition());
        if (hasPosition()) {
            result = result && getPosition().equals(other.getPosition());
        }
        result = result && (hasCurrentStopSequence() == other.hasCurrentStopSequence());
        if (hasCurrentStopSequence()) {
            result = result && (getCurrentStopSequence() == other.getCurrentStopSequence());
        }
        result = result && (hasStopId() == other.hasStopId());
        if (hasStopId()) {
            result = result && getStopId().equals(other.getStopId());
        }
        result = result && (hasCurrentStatus() == other.hasCurrentStatus());
        if (hasCurrentStatus()) {
            result = result && currentStatus_ == other.currentStatus_;
        }
        result = result && (hasTimestamp() == other.hasTimestamp());
        if (hasTimestamp()) {
            result = result && (getTimestamp() == other.getTimestamp());
        }
        result = result && (hasCongestionLevel() == other.hasCongestionLevel());
        if (hasCongestionLevel()) {
            result = result && congestionLevel_ == other.congestionLevel_;
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result && getExtensionFields().equals(other.getExtensionFields());
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTrip()) {
            hash = (37 * hash) + TRIP_FIELD_NUMBER;
            hash = (53 * hash) + getTrip().hashCode();
        }
        if (hasVehicle()) {
            hash = (37 * hash) + VEHICLE_FIELD_NUMBER;
            hash = (53 * hash) + getVehicle().hashCode();
        }
        if (hasPosition()) {
            hash = (37 * hash) + POSITION_FIELD_NUMBER;
            hash = (53 * hash) + getPosition().hashCode();
        }
        if (hasCurrentStopSequence()) {
            hash = (37 * hash) + CURRENT_STOP_SEQUENCE_FIELD_NUMBER;
            hash = (53 * hash) + getCurrentStopSequence();
        }
        if (hasStopId()) {
            hash = (37 * hash) + STOP_ID_FIELD_NUMBER;
            hash = (53 * hash) + getStopId().hashCode();
        }
        if (hasCurrentStatus()) {
            hash = (37 * hash) + CURRENT_STATUS_FIELD_NUMBER;
            hash = (53 * hash) + currentStatus_;
        }
        if (hasTimestamp()) {
            hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
            hash = (53 * hash) + Internal.hashLong(getTimestamp());
        }
        if (hasCongestionLevel()) {
            hash = (37 * hash) + CONGESTION_LEVEL_FIELD_NUMBER;
            hash = (53 * hash) + congestionLevel_;
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static VehiclePosition parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static VehiclePosition parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static VehiclePosition parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static VehiclePosition parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static VehiclePosition parseFrom(final byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static VehiclePosition parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static VehiclePosition parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static VehiclePosition parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static VehiclePosition parseDelimitedFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static VehiclePosition parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static VehiclePosition parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static VehiclePosition parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final VehiclePosition prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * Realtime positioning information for a given vehicle.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.VehiclePosition}
     */
    public static final class Builder extends ExtendableBuilder<VehiclePosition, Builder> implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.VehiclePosition)
            VehiclePositionOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime.internal_static_transit_realtime_VehiclePosition_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(VehiclePosition.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.VehiclePosition.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                getTripFieldBuilder();
                getVehicleFieldBuilder();
                getPositionFieldBuilder();
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            if (tripBuilder_ == null) {
                trip_ = null;
            } else {
                tripBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000001);
            if (vehicleBuilder_ == null) {
                vehicle_ = null;
            } else {
                vehicleBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            if (positionBuilder_ == null) {
                position_ = null;
            } else {
                positionBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000004);
            currentStopSequence_ = 0;
            bitField0_ = (bitField0_ & ~0x00000008);
            stopId_ = "";
            bitField0_ = (bitField0_ & ~0x00000010);
            currentStatus_ = 2;
            bitField0_ = (bitField0_ & ~0x00000020);
            timestamp_ = 0L;
            bitField0_ = (bitField0_ & ~0x00000040);
            congestionLevel_ = 0;
            bitField0_ = (bitField0_ & ~0x00000080);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_VehiclePosition_descriptor;
        }
        
        @Override
        public VehiclePosition getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public VehiclePosition build() {
            final VehiclePosition result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public VehiclePosition buildPartial() {
            final VehiclePosition result = new VehiclePosition(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            if (tripBuilder_ == null) {
                result.trip_ = trip_;
            } else {
                result.trip_ = tripBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            if (vehicleBuilder_ == null) {
                result.vehicle_ = vehicle_;
            } else {
                result.vehicle_ = vehicleBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            if (positionBuilder_ == null) {
                result.position_ = position_;
            } else {
                result.position_ = positionBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000008;
            }
            result.currentStopSequence_ = currentStopSequence_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                to_bitField0_ |= 0x00000010;
            }
            result.stopId_ = stopId_;
            if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                to_bitField0_ |= 0x00000020;
            }
            result.currentStatus_ = currentStatus_;
            if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                to_bitField0_ |= 0x00000040;
            }
            result.timestamp_ = timestamp_;
            if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                to_bitField0_ |= 0x00000080;
            }
            result.congestionLevel_ = congestionLevel_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final GeneratedExtension<VehiclePosition, Type> extension, final Type value) {
            return super.setExtension(extension, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final GeneratedExtension<VehiclePosition, List<Type>> extension, final int index,
                final Type value) {
            return super.setExtension(extension, index, value);
        }
        
        @Override
        public <Type> Builder addExtension(
                final GeneratedExtension<VehiclePosition, List<Type>> extension, final Type value) {
            return super.addExtension(extension, value);
        }
        
        @Override
        public <Type> Builder clearExtension(
                final GeneratedExtension<VehiclePosition, ?> extension) {
            return super.clearExtension(extension);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof VehiclePosition) {
                return mergeFrom((VehiclePosition) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final VehiclePosition other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasTrip()) {
                mergeTrip(other.getTrip());
            }
            if (other.hasVehicle()) {
                mergeVehicle(other.getVehicle());
            }
            if (other.hasPosition()) {
                mergePosition(other.getPosition());
            }
            if (other.hasCurrentStopSequence()) {
                setCurrentStopSequence(other.getCurrentStopSequence());
            }
            if (other.hasStopId()) {
                bitField0_ |= 0x00000010;
                stopId_ = other.stopId_;
                onChanged();
            }
            if (other.hasCurrentStatus()) {
                setCurrentStatus(other.getCurrentStatus());
            }
            if (other.hasTimestamp()) {
                setTimestamp(other.getTimestamp());
            }
            if (other.hasCongestionLevel()) {
                setCongestionLevel(other.getCongestionLevel());
            }
            mergeExtensionFields(other);
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            if (hasTrip()) {
                if (!getTrip().isInitialized()) {
                    return false;
                }
            }
            if (hasVehicle()) {
                if (!getVehicle().isInitialized()) {
                    return false;
                }
            }
            if (hasPosition()) {
                if (!getPosition().isInitialized()) {
                    return false;
                }
            }
            return extensionsAreInitialized();
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            VehiclePosition parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (VehiclePosition) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private TripDescriptor trip_ = null;
        private SingleFieldBuilderV3<TripDescriptor, TripDescriptor.Builder,
                TripDescriptorOrBuilder>
                tripBuilder_;
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        @Override
        public boolean hasTrip() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        @Override
        public TripDescriptor getTrip() {
            if (tripBuilder_ == null) {
                return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
            } else {
                return tripBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder setTrip(final TripDescriptor value) {
            if (tripBuilder_ == null) {
                Objects.requireNonNull(value);
                trip_ = value;
                onChanged();
            } else {
                tripBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000001;
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder setTrip(final TripDescriptor.Builder builderForValue) {
            if (tripBuilder_ == null) {
                trip_ = builderForValue.build();
                onChanged();
            } else {
                tripBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000001;
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder mergeTrip(final TripDescriptor value) {
            if (tripBuilder_ == null) {
                if (((bitField0_ & 0x00000001) == 0x00000001) && trip_ != null
                        && trip_ != TripDescriptor.getDefaultInstance()) {
                    trip_ = TripDescriptor.newBuilder(trip_).mergeFrom(value).buildPartial();
                } else {
                    trip_ = value;
                }
                onChanged();
            } else {
                tripBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000001;
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public Builder clearTrip() {
            if (tripBuilder_ == null) {
                trip_ = null;
                onChanged();
            } else {
                tripBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000001);
            return this;
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        public TripDescriptor.Builder getTripBuilder() {
            bitField0_ |= 0x00000001;
            onChanged();
            return getTripFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        @Override
        public TripDescriptorOrBuilder getTripOrBuilder() {
            if (tripBuilder_ != null) {
                return tripBuilder_.getMessageOrBuilder();
            } else {
                return trip_ == null ? TripDescriptor.getDefaultInstance() : trip_;
            }
        }
        
        /**
         * <pre>
         * The Trip that this vehicle is serving.
         * Can be empty or partial if the vehicle can not be identified with a given
         * trip instance.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
         */
        private SingleFieldBuilderV3<TripDescriptor, TripDescriptor.Builder,
                TripDescriptorOrBuilder> getTripFieldBuilder() {
            if (tripBuilder_ == null) {
                tripBuilder_ =
                        new SingleFieldBuilderV3<>(getTrip(), getParentForChildren(), isClean());
                trip_ = null;
            }
            return tripBuilder_;
        }
        
        private VehicleDescriptor vehicle_ = null;
        private SingleFieldBuilderV3<VehicleDescriptor, VehicleDescriptor.Builder,
                VehicleDescriptorOrBuilder>
                vehicleBuilder_;
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        @Override
        public boolean hasVehicle() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        @Override
        public VehicleDescriptor getVehicle() {
            if (vehicleBuilder_ == null) {
                return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
            } else {
                return vehicleBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        public Builder setVehicle(final VehicleDescriptor value) {
            if (vehicleBuilder_ == null) {
                Objects.requireNonNull(value);
                vehicle_ = value;
                onChanged();
            } else {
                vehicleBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        public Builder setVehicle(final VehicleDescriptor.Builder builderForValue) {
            if (vehicleBuilder_ == null) {
                vehicle_ = builderForValue.build();
                onChanged();
            } else {
                vehicleBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        public Builder mergeVehicle(final VehicleDescriptor value) {
            if (vehicleBuilder_ == null) {
                if (((bitField0_ & 0x00000002) == 0x00000002) && vehicle_ != null
                        && vehicle_ != VehicleDescriptor.getDefaultInstance()) {
                    vehicle_ =
                            VehicleDescriptor.newBuilder(vehicle_).mergeFrom(value).buildPartial();
                } else {
                    vehicle_ = value;
                }
                onChanged();
            } else {
                vehicleBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000002;
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        public Builder clearVehicle() {
            if (vehicleBuilder_ == null) {
                vehicle_ = null;
                onChanged();
            } else {
                vehicleBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        public VehicleDescriptor.Builder getVehicleBuilder() {
            bitField0_ |= 0x00000002;
            onChanged();
            return getVehicleFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        @Override
        public VehicleDescriptorOrBuilder getVehicleOrBuilder() {
            if (vehicleBuilder_ != null) {
                return vehicleBuilder_.getMessageOrBuilder();
            } else {
                return vehicle_ == null ? VehicleDescriptor.getDefaultInstance() : vehicle_;
            }
        }
        
        /**
         * <pre>
         * Additional information on the vehicle that is serving this trip.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
         */
        private SingleFieldBuilderV3<VehicleDescriptor, VehicleDescriptor.Builder,
                VehicleDescriptorOrBuilder> getVehicleFieldBuilder() {
            if (vehicleBuilder_ == null) {
                vehicleBuilder_ =
                        new SingleFieldBuilderV3<>(getVehicle(), getParentForChildren(), isClean());
                vehicle_ = null;
            }
            return vehicleBuilder_;
        }
        
        private Position position_ = null;
        private SingleFieldBuilderV3<Position, Position.Builder, PositionOrBuilder>
                positionBuilder_;
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        @Override
        public boolean hasPosition() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        @Override
        public Position getPosition() {
            if (positionBuilder_ == null) {
                return position_ == null ? Position.getDefaultInstance() : position_;
            } else {
                return positionBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        public Builder setPosition(final Position value) {
            if (positionBuilder_ == null) {
                Objects.requireNonNull(value);
                position_ = value;
                onChanged();
            } else {
                positionBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000004;
            return this;
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        public Builder setPosition(final Position.Builder builderForValue) {
            if (positionBuilder_ == null) {
                position_ = builderForValue.build();
                onChanged();
            } else {
                positionBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000004;
            return this;
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        public Builder mergePosition(final Position value) {
            if (positionBuilder_ == null) {
                if (((bitField0_ & 0x00000004) == 0x00000004) && position_ != null
                        && position_ != Position.getDefaultInstance()) {
                    position_ = Position.newBuilder(position_).mergeFrom(value).buildPartial();
                } else {
                    position_ = value;
                }
                onChanged();
            } else {
                positionBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000004;
            return this;
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        public Builder clearPosition() {
            if (positionBuilder_ == null) {
                position_ = null;
                onChanged();
            } else {
                positionBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000004);
            return this;
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        public Position.Builder getPositionBuilder() {
            bitField0_ |= 0x00000004;
            onChanged();
            return getPositionFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        @Override
        public PositionOrBuilder getPositionOrBuilder() {
            if (positionBuilder_ != null) {
                return positionBuilder_.getMessageOrBuilder();
            } else {
                return position_ == null ? Position.getDefaultInstance() : position_;
            }
        }
        
        /**
         * <pre>
         * Current position of this vehicle.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.Position position = 2;</code>
         */
        private SingleFieldBuilderV3<Position, Position.Builder, PositionOrBuilder>
        getPositionFieldBuilder() {
            if (positionBuilder_ == null) {
                positionBuilder_ = new SingleFieldBuilderV3<>(getPosition(), getParentForChildren(),
                        isClean());
                position_ = null;
            }
            return positionBuilder_;
        }
        
        private int currentStopSequence_;
        
        /**
         * <pre>
         * The stop sequence index of the current stop. The meaning of
         * current_stop_sequence (i.e., the stop that it refers to) is determined by
         * current_status.
         * If current_status is missing IN_TRANSIT_TO is assumed.
         * </pre>
         * <p>
         * <code>optional uint32 current_stop_sequence = 3;</code>
         */
        @Override
        public boolean hasCurrentStopSequence() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        
        /**
         * <pre>
         * The stop sequence index of the current stop. The meaning of
         * current_stop_sequence (i.e., the stop that it refers to) is determined by
         * current_status.
         * If current_status is missing IN_TRANSIT_TO is assumed.
         * </pre>
         * <p>
         * <code>optional uint32 current_stop_sequence = 3;</code>
         */
        @Override
        public int getCurrentStopSequence() {
            return currentStopSequence_;
        }
        
        /**
         * <pre>
         * The stop sequence index of the current stop. The meaning of
         * current_stop_sequence (i.e., the stop that it refers to) is determined by
         * current_status.
         * If current_status is missing IN_TRANSIT_TO is assumed.
         * </pre>
         * <p>
         * <code>optional uint32 current_stop_sequence = 3;</code>
         */
        public Builder setCurrentStopSequence(final int value) {
            bitField0_ |= 0x00000008;
            currentStopSequence_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The stop sequence index of the current stop. The meaning of
         * current_stop_sequence (i.e., the stop that it refers to) is determined by
         * current_status.
         * If current_status is missing IN_TRANSIT_TO is assumed.
         * </pre>
         * <p>
         * <code>optional uint32 current_stop_sequence = 3;</code>
         */
        public Builder clearCurrentStopSequence() {
            bitField0_ = (bitField0_ & ~0x00000008);
            currentStopSequence_ = 0;
            onChanged();
            return this;
        }
        
        @Setter(AccessLevel.PRIVATE) private Object stopId_ = "";
        
        /**
         * <pre>
         * Identifies the current stop. The value must be the same as in stops.txt in
         * the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 7;</code>
         */
        @Override
        public boolean hasStopId() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        
        /**
         * <pre>
         * Identifies the current stop. The value must be the same as in stops.txt in
         * the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 7;</code>
         */
        @Override
        public String getStopId() {
            return ProtoUtils.asString(stopId_, this::setStopId_);
        }
        
        /**
         * <pre>
         * Identifies the current stop. The value must be the same as in stops.txt in
         * the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 7;</code>
         */
        @Override
        public ByteString getStopIdBytes() {
            return ProtoUtils.asBytes(stopId_, this::setStopId_);
        }
        
        /**
         * <pre>
         * Identifies the current stop. The value must be the same as in stops.txt in
         * the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 7;</code>
         */
        public Builder setStopId(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000010;
            stopId_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Identifies the current stop. The value must be the same as in stops.txt in
         * the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 7;</code>
         */
        public Builder clearStopId() {
            bitField0_ = (bitField0_ & ~0x00000010);
            stopId_ = getDefaultInstance().getStopId();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Identifies the current stop. The value must be the same as in stops.txt in
         * the corresponding GTFS feed.
         * </pre>
         * <p>
         * <code>optional string stop_id = 7;</code>
         */
        public Builder setStopIdBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000010;
            stopId_ = value;
            onChanged();
            return this;
        }
        
        private int currentStatus_ = 2;
        
        /**
         * <pre>
         * The exact status of the vehicle with respect to the current stop.
         * Ignored if current_stop_sequence is missing.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4
         * [default = IN_TRANSIT_TO];</code>
         */
        @Override
        public boolean hasCurrentStatus() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        
        /**
         * <pre>
         * The exact status of the vehicle with respect to the current stop.
         * Ignored if current_stop_sequence is missing.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4
         * [default = IN_TRANSIT_TO];</code>
         */
        @Override
        public VehicleStopStatus getCurrentStatus() {
            final VehicleStopStatus result = VehicleStopStatus.valueOf(currentStatus_);
            return result == null ? VehicleStopStatus.IN_TRANSIT_TO : result;
        }
        
        /**
         * <pre>
         * The exact status of the vehicle with respect to the current stop.
         * Ignored if current_stop_sequence is missing.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4
         * [default = IN_TRANSIT_TO];</code>
         */
        public Builder setCurrentStatus(final VehicleStopStatus value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000020;
            currentStatus_ = value.getNumber();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The exact status of the vehicle with respect to the current stop.
         * Ignored if current_stop_sequence is missing.
         * </pre>
         * <p>
         * <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4
         * [default = IN_TRANSIT_TO];</code>
         */
        public Builder clearCurrentStatus() {
            bitField0_ = (bitField0_ & ~0x00000020);
            currentStatus_ = 2;
            onChanged();
            return this;
        }
        
        private long timestamp_;
        
        /**
         * <pre>
         * Moment at which the vehicle's position was measured. In POSIX time
         * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 5;</code>
         */
        @Override
        public boolean hasTimestamp() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        
        /**
         * <pre>
         * Moment at which the vehicle's position was measured. In POSIX time
         * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 5;</code>
         */
        @Override
        public long getTimestamp() {
            return timestamp_;
        }
        
        /**
         * <pre>
         * Moment at which the vehicle's position was measured. In POSIX time
         * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 5;</code>
         */
        public Builder setTimestamp(final long value) {
            bitField0_ |= 0x00000040;
            timestamp_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Moment at which the vehicle's position was measured. In POSIX time
         * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 5;</code>
         */
        public Builder clearTimestamp() {
            bitField0_ = (bitField0_ & ~0x00000040);
            timestamp_ = 0L;
            onChanged();
            return this;
        }
        
        private int congestionLevel_ = 0;
        
        /**
         * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
         * </code>
         */
        @Override
        public boolean hasCongestionLevel() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
         * </code>
         */
        @Override
        public CongestionLevel getCongestionLevel() {
            final CongestionLevel result = CongestionLevel.valueOf(congestionLevel_);
            return result == null ? CongestionLevel.UNKNOWN_CONGESTION_LEVEL : result;
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
         * </code>
         */
        public Builder setCongestionLevel(final CongestionLevel value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000080;
            congestionLevel_ = value.getNumber();
            onChanged();
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
         * </code>
         */
        public Builder clearCongestionLevel() {
            bitField0_ = (bitField0_ & ~0x00000080);
            congestionLevel_ = 0;
            onChanged();
            return this;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.VehiclePosition)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.VehiclePosition)
    private static final VehiclePosition DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new VehiclePosition();
    }
    
    public static VehiclePosition getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<VehiclePosition> PARSER = new AbstractParser<>() {
        
        @Override
        public VehiclePosition parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new VehiclePosition(input, extensionRegistry);
        }
    };
    
    public static Parser<VehiclePosition> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<VehiclePosition> getParserForType() {
        return PARSER;
    }
    
    @Override
    public VehiclePosition getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}