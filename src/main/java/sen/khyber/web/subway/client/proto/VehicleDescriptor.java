// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Objects;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage.GeneratedExtension;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.GeneratedMessageV3.ExtendableMessage;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * Identification information for the vehicle performing the trip.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.VehicleDescriptor}
 */
public final class VehicleDescriptor extends ExtendableMessage<VehicleDescriptor>
        implements VehicleDescriptorOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use VehicleDescriptor.newBuilder() to construct.
    private VehicleDescriptor(final ExtendableBuilder<VehicleDescriptor, ?> builder) {
        super(builder);
    }
    
    private VehicleDescriptor() {
        id_ = "";
        label_ = "";
        licensePlate_ = "";
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private VehicleDescriptor(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        id_ = bs;
                        break;
                    }
                    case 18: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000002;
                        label_ = bs;
                        break;
                    }
                    case 26: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000004;
                        licensePlate_ = bs;
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_fieldAccessorTable
                .ensureFieldAccessorsInitialized(VehicleDescriptor.class, Builder.class);
    }
    
    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private volatile @Setter(AccessLevel.PRIVATE) Object id_;
    
    /**
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     * <p>
     * <code>optional string id = 1;</code>
     */
    @Override
    public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     * <p>
     * <code>optional string id = 1;</code>
     */
    @Override
    public String getId() {
        return ProtoUtils.asString(id_, this::setId_);
    }
    
    /**
     * <pre>
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     * </pre>
     * <p>
     * <code>optional string id = 1;</code>
     */
    @Override
    public ByteString getIdBytes() {
        return ProtoUtils.asBytes(id_, this::setId_);
    }
    
    public static final int LABEL_FIELD_NUMBER = 2;
    @Setter(AccessLevel.PRIVATE) private volatile Object label_;
    
    /**
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     * <p>
     * <code>optional string label = 2;</code>
     */
    @Override
    public boolean hasLabel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     * <p>
     * <code>optional string label = 2;</code>
     */
    @Override
    public String getLabel() {
        return ProtoUtils.asString(label_, this::setLabel_);
    }
    
    /**
     * <pre>
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     * </pre>
     * <p>
     * <code>optional string label = 2;</code>
     */
    @Override
    public ByteString getLabelBytes() {
        return ProtoUtils.asBytes(label_, this::setLabel_);
    }
    
    public static final int LICENSE_PLATE_FIELD_NUMBER = 3;
    @Setter(AccessLevel.PRIVATE) private volatile Object licensePlate_;
    
    /**
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     * <p>
     * <code>optional string license_plate = 3;</code>
     */
    @Override
    public boolean hasLicensePlate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     * <p>
     * <code>optional string license_plate = 3;</code>
     */
    @Override
    public String getLicensePlate() {
        return ProtoUtils.asString(licensePlate_, this::setLicensePlate_);
    }
    
    /**
     * <pre>
     * The license plate of the vehicle.
     * </pre>
     * <p>
     * <code>optional string license_plate = 3;</code>
     */
    @Override
    public ByteString getLicensePlateBytes() {
        return ProtoUtils.asBytes(licensePlate_, this::setLicensePlate_);
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        if (!extensionsAreInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        final ExtendableMessage<VehicleDescriptor>.ExtensionWriter extensionWriter =
                newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            GeneratedMessageV3.writeString(output, 2, label_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            GeneratedMessageV3.writeString(output, 3, licensePlate_);
        }
        extensionWriter.writeUntil(2000, output);
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += GeneratedMessageV3.computeStringSize(2, label_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += GeneratedMessageV3.computeStringSize(3, licensePlate_);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof VehicleDescriptor)) {
            return super.equals(obj);
        }
        final VehicleDescriptor other = (VehicleDescriptor) obj;
        
        boolean result = true;
        result = result && (hasId() == other.hasId());
        if (hasId()) {
            result = result && getId().equals(other.getId());
        }
        result = result && (hasLabel() == other.hasLabel());
        if (hasLabel()) {
            result = result && getLabel().equals(other.getLabel());
        }
        result = result && (hasLicensePlate() == other.hasLicensePlate());
        if (hasLicensePlate()) {
            result = result && getLicensePlate().equals(other.getLicensePlate());
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result && getExtensionFields().equals(other.getExtensionFields());
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasId()) {
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getId().hashCode();
        }
        if (hasLabel()) {
            hash = (37 * hash) + LABEL_FIELD_NUMBER;
            hash = (53 * hash) + getLabel().hashCode();
        }
        if (hasLicensePlate()) {
            hash = (37 * hash) + LICENSE_PLATE_FIELD_NUMBER;
            hash = (53 * hash) + getLicensePlate().hashCode();
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static VehicleDescriptor parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static VehicleDescriptor parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static VehicleDescriptor parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static VehicleDescriptor parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static VehicleDescriptor parseFrom(final byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static VehicleDescriptor parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static VehicleDescriptor parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static VehicleDescriptor parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static VehicleDescriptor parseDelimitedFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static VehicleDescriptor parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static VehicleDescriptor parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static VehicleDescriptor parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final VehicleDescriptor prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * Identification information for the vehicle performing the trip.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.VehicleDescriptor}
     */
    public static final class Builder extends ExtendableBuilder<VehicleDescriptor, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.VehicleDescriptor)
            VehicleDescriptorOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime
                    .internal_static_transit_realtime_VehicleDescriptor_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(VehicleDescriptor.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.VehicleDescriptor.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            id_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            label_ = "";
            bitField0_ = (bitField0_ & ~0x00000002);
            licensePlate_ = "";
            bitField0_ = (bitField0_ & ~0x00000004);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_VehicleDescriptor_descriptor;
        }
        
        @Override
        public VehicleDescriptor getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public VehicleDescriptor build() {
            final VehicleDescriptor result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public VehicleDescriptor buildPartial() {
            final VehicleDescriptor result = new VehicleDescriptor(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.id_ = id_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.label_ = label_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            result.licensePlate_ = licensePlate_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final GeneratedExtension<VehicleDescriptor, Type> extension, final Type value) {
            return super.setExtension(extension, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final GeneratedExtension<VehicleDescriptor, List<Type>> extension, final int index,
                final Type value) {
            return super.setExtension(extension, index, value);
        }
        
        @Override
        public <Type> Builder addExtension(
                final GeneratedExtension<VehicleDescriptor, List<Type>> extension,
                final Type value) {
            return super.addExtension(extension, value);
        }
        
        @Override
        public <Type> Builder clearExtension(
                final GeneratedExtension<VehicleDescriptor, ?> extension) {
            return super.clearExtension(extension);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof VehicleDescriptor) {
                return mergeFrom((VehicleDescriptor) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final VehicleDescriptor other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasId()) {
                bitField0_ |= 0x00000001;
                id_ = other.id_;
                onChanged();
            }
            if (other.hasLabel()) {
                bitField0_ |= 0x00000002;
                label_ = other.label_;
                onChanged();
            }
            if (other.hasLicensePlate()) {
                bitField0_ |= 0x00000004;
                licensePlate_ = other.licensePlate_;
                onChanged();
            }
            mergeExtensionFields(other);
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            return extensionsAreInitialized();
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            VehicleDescriptor parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (VehicleDescriptor) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        @Setter(AccessLevel.PRIVATE) private Object id_ = "";
        
        /**
         * <pre>
         * Internal system identification of the vehicle. Should be unique per
         * vehicle, and can be used for tracking the vehicle as it proceeds through
         * the system.
         * </pre>
         * <p>
         * <code>optional string id = 1;</code>
         */
        @Override
        public boolean hasId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * Internal system identification of the vehicle. Should be unique per
         * vehicle, and can be used for tracking the vehicle as it proceeds through
         * the system.
         * </pre>
         * <p>
         * <code>optional string id = 1;</code>
         */
        @Override
        public String getId() {
            return ProtoUtils.asString(id_, this::setId_);
        }
        
        /**
         * <pre>
         * Internal system identification of the vehicle. Should be unique per
         * vehicle, and can be used for tracking the vehicle as it proceeds through
         * the system.
         * </pre>
         * <p>
         * <code>optional string id = 1;</code>
         */
        @Override
        public ByteString getIdBytes() {
            return ProtoUtils.asBytes(id_, this::setId_);
        }
        
        /**
         * <pre>
         * Internal system identification of the vehicle. Should be unique per
         * vehicle, and can be used for tracking the vehicle as it proceeds through
         * the system.
         * </pre>
         * <p>
         * <code>optional string id = 1;</code>
         */
        public Builder setId(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            id_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Internal system identification of the vehicle. Should be unique per
         * vehicle, and can be used for tracking the vehicle as it proceeds through
         * the system.
         * </pre>
         * <p>
         * <code>optional string id = 1;</code>
         */
        public Builder clearId() {
            bitField0_ = (bitField0_ & ~0x00000001);
            id_ = getDefaultInstance().getId();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Internal system identification of the vehicle. Should be unique per
         * vehicle, and can be used for tracking the vehicle as it proceeds through
         * the system.
         * </pre>
         * <p>
         * <code>optional string id = 1;</code>
         */
        public Builder setIdBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            id_ = value;
            onChanged();
            return this;
        }
        
        @Setter(AccessLevel.PRIVATE) private Object label_ = "";
        
        /**
         * <pre>
         * User visible label, i.e., something that must be shown to the passenger to
         * help identify the correct vehicle.
         * </pre>
         * <p>
         * <code>optional string label = 2;</code>
         */
        @Override
        public boolean hasLabel() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * User visible label, i.e., something that must be shown to the passenger to
         * help identify the correct vehicle.
         * </pre>
         * <p>
         * <code>optional string label = 2;</code>
         */
        @Override
        public String getLabel() {
            return ProtoUtils.asString(label_, this::setLabel_);
        }
        
        /**
         * <pre>
         * User visible label, i.e., something that must be shown to the passenger to
         * help identify the correct vehicle.
         * </pre>
         * <p>
         * <code>optional string label = 2;</code>
         */
        @Override
        public ByteString getLabelBytes() {
            return ProtoUtils.asBytes(label_, this::setLabel_);
        }
        
        /**
         * <pre>
         * User visible label, i.e., something that must be shown to the passenger to
         * help identify the correct vehicle.
         * </pre>
         * <p>
         * <code>optional string label = 2;</code>
         */
        public Builder setLabel(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000002;
            label_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * User visible label, i.e., something that must be shown to the passenger to
         * help identify the correct vehicle.
         * </pre>
         * <p>
         * <code>optional string label = 2;</code>
         */
        public Builder clearLabel() {
            bitField0_ = (bitField0_ & ~0x00000002);
            label_ = getDefaultInstance().getLabel();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * User visible label, i.e., something that must be shown to the passenger to
         * help identify the correct vehicle.
         * </pre>
         * <p>
         * <code>optional string label = 2;</code>
         */
        public Builder setLabelBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000002;
            label_ = value;
            onChanged();
            return this;
        }
        
        @Setter(AccessLevel.PRIVATE) private Object licensePlate_ = "";
        
        /**
         * <pre>
         * The license plate of the vehicle.
         * </pre>
         * <p>
         * <code>optional string license_plate = 3;</code>
         */
        @Override
        public boolean hasLicensePlate() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <pre>
         * The license plate of the vehicle.
         * </pre>
         * <p>
         * <code>optional string license_plate = 3;</code>
         */
        @Override
        public String getLicensePlate() {
            return ProtoUtils.asString(licensePlate_, this::setLicensePlate_);
        }
        
        /**
         * <pre>
         * The license plate of the vehicle.
         * </pre>
         * <p>
         * <code>optional string license_plate = 3;</code>
         */
        @Override
        public ByteString getLicensePlateBytes() {
            return ProtoUtils.asBytes(licensePlate_, this::setLicensePlate_);
        }
        
        /**
         * <pre>
         * The license plate of the vehicle.
         * </pre>
         * <p>
         * <code>optional string license_plate = 3;</code>
         */
        public Builder setLicensePlate(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000004;
            licensePlate_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The license plate of the vehicle.
         * </pre>
         * <p>
         * <code>optional string license_plate = 3;</code>
         */
        public Builder clearLicensePlate() {
            bitField0_ = (bitField0_ & ~0x00000004);
            licensePlate_ = getDefaultInstance().getLicensePlate();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The license plate of the vehicle.
         * </pre>
         * <p>
         * <code>optional string license_plate = 3;</code>
         */
        public Builder setLicensePlateBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000004;
            licensePlate_ = value;
            onChanged();
            return this;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.VehicleDescriptor)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.VehicleDescriptor)
    private static final VehicleDescriptor DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new VehicleDescriptor();
    }
    
    public static VehicleDescriptor getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<VehicleDescriptor> PARSER = new AbstractParser<>() {
        
        @Override
        public VehicleDescriptor parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new VehicleDescriptor(input, extensionRegistry);
        }
    };
    
    public static Parser<VehicleDescriptor> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<VehicleDescriptor> getParserForType() {
        return PARSER;
    }
    
    @Override
    public VehicleDescriptor getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}