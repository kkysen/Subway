// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.Objects;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.SingleFieldBuilderV3;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * A definition (or update) of an entity in the transit feed.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.FeedEntity}
 */
public final class FeedEntity extends GeneratedMessageV3 implements FeedEntityOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use FeedEntity.newBuilder() to construct.
    private FeedEntity(final GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }
    
    private FeedEntity() {
        id_ = "";
        isDeleted_ = false;
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private FeedEntity(final CodedInputStream input, final ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        id_ = bs;
                        break;
                    }
                    case 16: {
                        bitField0_ |= 0x00000002;
                        isDeleted_ = input.readBool();
                        break;
                    }
                    case 26: {
                        TripUpdate.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000004) == 0x00000004)) {
                            subBuilder = tripUpdate_.toBuilder();
                        }
                        tripUpdate_ = input.readMessage(TripUpdate.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(tripUpdate_);
                            tripUpdate_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000004;
                        break;
                    }
                    case 34: {
                        VehiclePosition.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000008) == 0x00000008)) {
                            subBuilder = vehicle_.toBuilder();
                        }
                        vehicle_ = input.readMessage(VehiclePosition.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(vehicle_);
                            vehicle_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000008;
                        break;
                    }
                    case 42: {
                        Alert.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000010) == 0x00000010)) {
                            subBuilder = alert_.toBuilder();
                        }
                        alert_ = input.readMessage(Alert.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(alert_);
                            alert_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000010;
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_FeedEntity_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_FeedEntity_fieldAccessorTable
                .ensureFieldAccessorsInitialized(FeedEntity.class, Builder.class);
    }
    
    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private volatile @Setter(AccessLevel.PRIVATE) Object id_;
    
    /**
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     * <p>
     * <code>required string id = 1;</code>
     */
    @Override
    public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     * <p>
     * <code>required string id = 1;</code>
     */
    @Override
    public String getId() {
        return ProtoUtils.asString(id_, this::setId_);
    }
    
    /**
     * <pre>
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     * </pre>
     * <p>
     * <code>required string id = 1;</code>
     */
    @Override
    public ByteString getIdBytes() {
        return ProtoUtils.asBytes(id_, this::setId_);
    }
    
    public static final int IS_DELETED_FIELD_NUMBER = 2;
    private boolean isDeleted_;
    
    /**
     * <pre>
     * Whether this entity is to be deleted. Relevant only for incremental
     * fetches.
     * </pre>
     * <p>
     * <code>optional bool is_deleted = 2 [default = false];</code>
     */
    @Override
    public boolean hasIsDeleted() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <pre>
     * Whether this entity is to be deleted. Relevant only for incremental
     * fetches.
     * </pre>
     * <p>
     * <code>optional bool is_deleted = 2 [default = false];</code>
     */
    @Override
    public boolean getIsDeleted() {
        return isDeleted_;
    }
    
    public static final int TRIP_UPDATE_FIELD_NUMBER = 3;
    private TripUpdate tripUpdate_;
    
    /**
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     */
    @Override
    public boolean hasTripUpdate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     */
    @Override
    public TripUpdate getTripUpdate() {
        return tripUpdate_ == null ? TripUpdate.getDefaultInstance() : tripUpdate_;
    }
    
    /**
     * <pre>
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     * </pre>
     * <p>
     * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
     */
    @Override
    public TripUpdateOrBuilder getTripUpdateOrBuilder() {
        return tripUpdate_ == null ? TripUpdate.getDefaultInstance() : tripUpdate_;
    }
    
    public static final int VEHICLE_FIELD_NUMBER = 4;
    private VehiclePosition vehicle_;
    
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    @Override
    public boolean hasVehicle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    @Override
    public VehiclePosition getVehicle() {
        return vehicle_ == null ? VehiclePosition.getDefaultInstance() : vehicle_;
    }
    
    /**
     * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
     */
    @Override
    public VehiclePositionOrBuilder getVehicleOrBuilder() {
        return vehicle_ == null ? VehiclePosition.getDefaultInstance() : vehicle_;
    }
    
    public static final int ALERT_FIELD_NUMBER = 5;
    private Alert alert_;
    
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    @Override
    public boolean hasAlert() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    @Override
    public Alert getAlert() {
        return alert_ == null ? Alert.getDefaultInstance() : alert_;
    }
    
    /**
     * <code>optional .transit_realtime.Alert alert = 5;</code>
     */
    @Override
    public AlertOrBuilder getAlertOrBuilder() {
        return alert_ == null ? Alert.getDefaultInstance() : alert_;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        if (!hasId()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (hasTripUpdate()) {
            if (!getTripUpdate().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasVehicle()) {
            if (!getVehicle().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasAlert()) {
            if (!getAlert().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeBool(2, isDeleted_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeMessage(3, getTripUpdate());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeMessage(4, getVehicle());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeMessage(5, getAlert());
        }
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream.computeBoolSize(2, isDeleted_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream.computeMessageSize(3, getTripUpdate());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += CodedOutputStream.computeMessageSize(4, getVehicle());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += CodedOutputStream.computeMessageSize(5, getAlert());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FeedEntity)) {
            return super.equals(obj);
        }
        final FeedEntity other = (FeedEntity) obj;
        
        boolean result = true;
        result = result && (hasId() == other.hasId());
        if (hasId()) {
            result = result && getId().equals(other.getId());
        }
        result = result && (hasIsDeleted() == other.hasIsDeleted());
        if (hasIsDeleted()) {
            result = result && (getIsDeleted() == other.getIsDeleted());
        }
        result = result && (hasTripUpdate() == other.hasTripUpdate());
        if (hasTripUpdate()) {
            result = result && getTripUpdate().equals(other.getTripUpdate());
        }
        result = result && (hasVehicle() == other.hasVehicle());
        if (hasVehicle()) {
            result = result && getVehicle().equals(other.getVehicle());
        }
        result = result && (hasAlert() == other.hasAlert());
        if (hasAlert()) {
            result = result && getAlert().equals(other.getAlert());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasId()) {
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getId().hashCode();
        }
        if (hasIsDeleted()) {
            hash = (37 * hash) + IS_DELETED_FIELD_NUMBER;
            hash = (53 * hash) + Internal.hashBoolean(getIsDeleted());
        }
        if (hasTripUpdate()) {
            hash = (37 * hash) + TRIP_UPDATE_FIELD_NUMBER;
            hash = (53 * hash) + getTripUpdate().hashCode();
        }
        if (hasVehicle()) {
            hash = (37 * hash) + VEHICLE_FIELD_NUMBER;
            hash = (53 * hash) + getVehicle().hashCode();
        }
        if (hasAlert()) {
            hash = (37 * hash) + ALERT_FIELD_NUMBER;
            hash = (53 * hash) + getAlert().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static FeedEntity parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static FeedEntity parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static FeedEntity parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static FeedEntity parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static FeedEntity parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static FeedEntity parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static FeedEntity parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static FeedEntity parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static FeedEntity parseDelimitedFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static FeedEntity parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static FeedEntity parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static FeedEntity parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final FeedEntity prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * A definition (or update) of an entity in the transit feed.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.FeedEntity}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.FeedEntity)
            FeedEntityOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_FeedEntity_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime.internal_static_transit_realtime_FeedEntity_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(FeedEntity.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.FeedEntity.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
                getTripUpdateFieldBuilder();
                getVehicleFieldBuilder();
                getAlertFieldBuilder();
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            id_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            isDeleted_ = false;
            bitField0_ = (bitField0_ & ~0x00000002);
            if (tripUpdateBuilder_ == null) {
                tripUpdate_ = null;
            } else {
                tripUpdateBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000004);
            if (vehicleBuilder_ == null) {
                vehicle_ = null;
            } else {
                vehicleBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000008);
            if (alertBuilder_ == null) {
                alert_ = null;
            } else {
                alertBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000010);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_FeedEntity_descriptor;
        }
        
        @Override
        public FeedEntity getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public FeedEntity build() {
            final FeedEntity result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public FeedEntity buildPartial() {
            final FeedEntity result = new FeedEntity(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.id_ = id_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.isDeleted_ = isDeleted_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            if (tripUpdateBuilder_ == null) {
                result.tripUpdate_ = tripUpdate_;
            } else {
                result.tripUpdate_ = tripUpdateBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000008;
            }
            if (vehicleBuilder_ == null) {
                result.vehicle_ = vehicle_;
            } else {
                result.vehicle_ = vehicleBuilder_.build();
            }
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                to_bitField0_ |= 0x00000010;
            }
            if (alertBuilder_ == null) {
                result.alert_ = alert_;
            } else {
                result.alert_ = alertBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof FeedEntity) {
                return mergeFrom((FeedEntity) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final FeedEntity other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasId()) {
                bitField0_ |= 0x00000001;
                id_ = other.id_;
                onChanged();
            }
            if (other.hasIsDeleted()) {
                setIsDeleted(other.getIsDeleted());
            }
            if (other.hasTripUpdate()) {
                mergeTripUpdate(other.getTripUpdate());
            }
            if (other.hasVehicle()) {
                mergeVehicle(other.getVehicle());
            }
            if (other.hasAlert()) {
                mergeAlert(other.getAlert());
            }
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            if (!hasId()) {
                return false;
            }
            if (hasTripUpdate()) {
                if (!getTripUpdate().isInitialized()) {
                    return false;
                }
            }
            if (hasVehicle()) {
                if (!getVehicle().isInitialized()) {
                    return false;
                }
            }
            if (hasAlert()) {
                return getAlert().isInitialized();
            }
            return true;
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            FeedEntity parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (FeedEntity) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        @Setter(AccessLevel.PRIVATE) private Object id_ = "";
        
        /**
         * <pre>
         * The ids are used only to provide incrementality support. The id should be
         * unique within a FeedMessage. Consequent FeedMessages may contain
         * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
         * FeedEntity with some id will replace the old FeedEntity with the same id
         * (or delete it - see is_deleted below).
         * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
         * feed must be specified by explicit selectors (see EntitySelector below for
         * more info).
         * </pre>
         * <p>
         * <code>required string id = 1;</code>
         */
        @Override
        public boolean hasId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * The ids are used only to provide incrementality support. The id should be
         * unique within a FeedMessage. Consequent FeedMessages may contain
         * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
         * FeedEntity with some id will replace the old FeedEntity with the same id
         * (or delete it - see is_deleted below).
         * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
         * feed must be specified by explicit selectors (see EntitySelector below for
         * more info).
         * </pre>
         * <p>
         * <code>required string id = 1;</code>
         */
        @Override
        public String getId() {
            return ProtoUtils.asString(id_, this::setId_);
        }
        
        /**
         * <pre>
         * The ids are used only to provide incrementality support. The id should be
         * unique within a FeedMessage. Consequent FeedMessages may contain
         * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
         * FeedEntity with some id will replace the old FeedEntity with the same id
         * (or delete it - see is_deleted below).
         * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
         * feed must be specified by explicit selectors (see EntitySelector below for
         * more info).
         * </pre>
         * <p>
         * <code>required string id = 1;</code>
         */
        @Override
        public ByteString getIdBytes() {
            return ProtoUtils.asBytes(id_, this::setId_);
        }
        
        /**
         * <pre>
         * The ids are used only to provide incrementality support. The id should be
         * unique within a FeedMessage. Consequent FeedMessages may contain
         * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
         * FeedEntity with some id will replace the old FeedEntity with the same id
         * (or delete it - see is_deleted below).
         * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
         * feed must be specified by explicit selectors (see EntitySelector below for
         * more info).
         * </pre>
         * <p>
         * <code>required string id = 1;</code>
         */
        public Builder setId(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            id_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The ids are used only to provide incrementality support. The id should be
         * unique within a FeedMessage. Consequent FeedMessages may contain
         * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
         * FeedEntity with some id will replace the old FeedEntity with the same id
         * (or delete it - see is_deleted below).
         * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
         * feed must be specified by explicit selectors (see EntitySelector below for
         * more info).
         * </pre>
         * <p>
         * <code>required string id = 1;</code>
         */
        public Builder clearId() {
            bitField0_ = (bitField0_ & ~0x00000001);
            id_ = getDefaultInstance().getId();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * The ids are used only to provide incrementality support. The id should be
         * unique within a FeedMessage. Consequent FeedMessages may contain
         * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
         * FeedEntity with some id will replace the old FeedEntity with the same id
         * (or delete it - see is_deleted below).
         * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
         * feed must be specified by explicit selectors (see EntitySelector below for
         * more info).
         * </pre>
         * <p>
         * <code>required string id = 1;</code>
         */
        public Builder setIdBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            id_ = value;
            onChanged();
            return this;
        }
        
        private boolean isDeleted_;
        
        /**
         * <pre>
         * Whether this entity is to be deleted. Relevant only for incremental
         * fetches.
         * </pre>
         * <p>
         * <code>optional bool is_deleted = 2 [default = false];</code>
         */
        @Override
        public boolean hasIsDeleted() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <pre>
         * Whether this entity is to be deleted. Relevant only for incremental
         * fetches.
         * </pre>
         * <p>
         * <code>optional bool is_deleted = 2 [default = false];</code>
         */
        @Override
        public boolean getIsDeleted() {
            return isDeleted_;
        }
        
        /**
         * <pre>
         * Whether this entity is to be deleted. Relevant only for incremental
         * fetches.
         * </pre>
         * <p>
         * <code>optional bool is_deleted = 2 [default = false];</code>
         */
        public Builder setIsDeleted(final boolean value) {
            bitField0_ |= 0x00000002;
            isDeleted_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Whether this entity is to be deleted. Relevant only for incremental
         * fetches.
         * </pre>
         * <p>
         * <code>optional bool is_deleted = 2 [default = false];</code>
         */
        public Builder clearIsDeleted() {
            bitField0_ = (bitField0_ & ~0x00000002);
            isDeleted_ = false;
            onChanged();
            return this;
        }
        
        private TripUpdate tripUpdate_ = null;
        private SingleFieldBuilderV3<TripUpdate, TripUpdate.Builder, TripUpdateOrBuilder>
                tripUpdateBuilder_;
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        @Override
        public boolean hasTripUpdate() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        @Override
        public TripUpdate getTripUpdate() {
            if (tripUpdateBuilder_ == null) {
                return tripUpdate_ == null ? TripUpdate.getDefaultInstance() : tripUpdate_;
            } else {
                return tripUpdateBuilder_.getMessage();
            }
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        public Builder setTripUpdate(final TripUpdate value) {
            if (tripUpdateBuilder_ == null) {
                Objects.requireNonNull(value);
                tripUpdate_ = value;
                onChanged();
            } else {
                tripUpdateBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000004;
            return this;
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        public Builder setTripUpdate(final TripUpdate.Builder builderForValue) {
            if (tripUpdateBuilder_ == null) {
                tripUpdate_ = builderForValue.build();
                onChanged();
            } else {
                tripUpdateBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000004;
            return this;
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        public Builder mergeTripUpdate(final TripUpdate value) {
            if (tripUpdateBuilder_ == null) {
                if (((bitField0_ & 0x00000004) == 0x00000004) && tripUpdate_ != null
                        && tripUpdate_ != TripUpdate.getDefaultInstance()) {
                    tripUpdate_ =
                            TripUpdate.newBuilder(tripUpdate_).mergeFrom(value).buildPartial();
                } else {
                    tripUpdate_ = value;
                }
                onChanged();
            } else {
                tripUpdateBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000004;
            return this;
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        public Builder clearTripUpdate() {
            if (tripUpdateBuilder_ == null) {
                tripUpdate_ = null;
                onChanged();
            } else {
                tripUpdateBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000004);
            return this;
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        public TripUpdate.Builder getTripUpdateBuilder() {
            bitField0_ |= 0x00000004;
            onChanged();
            return getTripUpdateFieldBuilder().getBuilder();
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        @Override
        public TripUpdateOrBuilder getTripUpdateOrBuilder() {
            if (tripUpdateBuilder_ != null) {
                return tripUpdateBuilder_.getMessageOrBuilder();
            } else {
                return tripUpdate_ == null ? TripUpdate.getDefaultInstance() : tripUpdate_;
            }
        }
        
        /**
         * <pre>
         * Data about the entity itself. Exactly one of the following fields must be
         * present (unless the entity is being deleted).
         * </pre>
         * <p>
         * <code>optional .transit_realtime.TripUpdate trip_update = 3;</code>
         */
        private SingleFieldBuilderV3<TripUpdate, TripUpdate.Builder, TripUpdateOrBuilder>
        getTripUpdateFieldBuilder() {
            if (tripUpdateBuilder_ == null) {
                tripUpdateBuilder_ =
                        new SingleFieldBuilderV3<>(getTripUpdate(), getParentForChildren(),
                                isClean());
                tripUpdate_ = null;
            }
            return tripUpdateBuilder_;
        }
        
        private VehiclePosition vehicle_ = null;
        private SingleFieldBuilderV3<VehiclePosition, VehiclePosition.Builder,
                VehiclePositionOrBuilder>
                vehicleBuilder_;
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        @Override
        public boolean hasVehicle() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        @Override
        public VehiclePosition getVehicle() {
            if (vehicleBuilder_ == null) {
                return vehicle_ == null ? VehiclePosition.getDefaultInstance() : vehicle_;
            } else {
                return vehicleBuilder_.getMessage();
            }
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        public Builder setVehicle(final VehiclePosition value) {
            if (vehicleBuilder_ == null) {
                Objects.requireNonNull(value);
                vehicle_ = value;
                onChanged();
            } else {
                vehicleBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000008;
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        public Builder setVehicle(final VehiclePosition.Builder builderForValue) {
            if (vehicleBuilder_ == null) {
                vehicle_ = builderForValue.build();
                onChanged();
            } else {
                vehicleBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000008;
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        public Builder mergeVehicle(final VehiclePosition value) {
            if (vehicleBuilder_ == null) {
                if (((bitField0_ & 0x00000008) == 0x00000008) && vehicle_ != null
                        && vehicle_ != VehiclePosition.getDefaultInstance()) {
                    vehicle_ = VehiclePosition.newBuilder(vehicle_).mergeFrom(value).buildPartial();
                } else {
                    vehicle_ = value;
                }
                onChanged();
            } else {
                vehicleBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000008;
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        public Builder clearVehicle() {
            if (vehicleBuilder_ == null) {
                vehicle_ = null;
                onChanged();
            } else {
                vehicleBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000008);
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        public VehiclePosition.Builder getVehicleBuilder() {
            bitField0_ |= 0x00000008;
            onChanged();
            return getVehicleFieldBuilder().getBuilder();
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        @Override
        public VehiclePositionOrBuilder getVehicleOrBuilder() {
            if (vehicleBuilder_ != null) {
                return vehicleBuilder_.getMessageOrBuilder();
            } else {
                return vehicle_ == null ? VehiclePosition.getDefaultInstance() : vehicle_;
            }
        }
        
        /**
         * <code>optional .transit_realtime.VehiclePosition vehicle = 4;</code>
         */
        private SingleFieldBuilderV3<VehiclePosition, VehiclePosition.Builder,
                VehiclePositionOrBuilder> getVehicleFieldBuilder() {
            if (vehicleBuilder_ == null) {
                vehicleBuilder_ =
                        new SingleFieldBuilderV3<>(getVehicle(), getParentForChildren(), isClean());
                vehicle_ = null;
            }
            return vehicleBuilder_;
        }
        
        private Alert alert_ = null;
        private SingleFieldBuilderV3<Alert, Alert.Builder, AlertOrBuilder> alertBuilder_;
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        @Override
        public boolean hasAlert() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        @Override
        public Alert getAlert() {
            if (alertBuilder_ == null) {
                return alert_ == null ? Alert.getDefaultInstance() : alert_;
            } else {
                return alertBuilder_.getMessage();
            }
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        public Builder setAlert(final Alert value) {
            if (alertBuilder_ == null) {
                Objects.requireNonNull(value);
                alert_ = value;
                onChanged();
            } else {
                alertBuilder_.setMessage(value);
            }
            bitField0_ |= 0x00000010;
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        public Builder setAlert(final Alert.Builder builderForValue) {
            if (alertBuilder_ == null) {
                alert_ = builderForValue.build();
                onChanged();
            } else {
                alertBuilder_.setMessage(builderForValue.build());
            }
            bitField0_ |= 0x00000010;
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        public Builder mergeAlert(final Alert value) {
            if (alertBuilder_ == null) {
                if (((bitField0_ & 0x00000010) == 0x00000010) && alert_ != null && alert_ != Alert
                        .getDefaultInstance()) {
                    alert_ = Alert.newBuilder(alert_).mergeFrom(value).buildPartial();
                } else {
                    alert_ = value;
                }
                onChanged();
            } else {
                alertBuilder_.mergeFrom(value);
            }
            bitField0_ |= 0x00000010;
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        public Builder clearAlert() {
            if (alertBuilder_ == null) {
                alert_ = null;
                onChanged();
            } else {
                alertBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000010);
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        public Alert.Builder getAlertBuilder() {
            bitField0_ |= 0x00000010;
            onChanged();
            return getAlertFieldBuilder().getBuilder();
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        @Override
        public AlertOrBuilder getAlertOrBuilder() {
            if (alertBuilder_ != null) {
                return alertBuilder_.getMessageOrBuilder();
            } else {
                return alert_ == null ? Alert.getDefaultInstance() : alert_;
            }
        }
        
        /**
         * <code>optional .transit_realtime.Alert alert = 5;</code>
         */
        private SingleFieldBuilderV3<Alert, Alert.Builder, AlertOrBuilder> getAlertFieldBuilder() {
            if (alertBuilder_ == null) {
                alertBuilder_ =
                        new SingleFieldBuilderV3<>(getAlert(), getParentForChildren(), isClean());
                alert_ = null;
            }
            return alertBuilder_;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.FeedEntity)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.FeedEntity)
    private static final FeedEntity DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new FeedEntity();
    }
    
    public static FeedEntity getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<FeedEntity> PARSER = new AbstractParser<>() {
        
        @Override
        public FeedEntity parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new FeedEntity(input, extensionRegistry);
        }
    };
    
    public static Parser<FeedEntity> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<FeedEntity> getParserForType() {
        return PARSER;
    }
    
    @Override
    public FeedEntity getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}