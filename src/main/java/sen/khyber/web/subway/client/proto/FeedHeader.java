// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.proto.ProtoUtils;

import lombok.AccessLevel;
import lombok.Setter;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Objects;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.EnumDescriptor;
import com.google.protobuf.Descriptors.EnumValueDescriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage.GeneratedExtension;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.GeneratedMessageV3.ExtendableMessage;
import com.google.protobuf.Internal;
import com.google.protobuf.Internal.EnumLiteMap;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.UnknownFieldSet;

/**
 * <pre>
 * Metadata about a feed, included in feed messages.
 * </pre>
 * <p>
 * Protobuf type {@code transit_realtime.FeedHeader}
 */
public final class FeedHeader extends ExtendableMessage<FeedHeader> implements FeedHeaderOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use FeedHeader.newBuilder() to construct.
    private FeedHeader(final ExtendableBuilder<FeedHeader, ?> builder) {
        super(builder);
    }
    
    private FeedHeader() {
        gtfsRealtimeVersion_ = "";
        incrementality_ = 0;
        timestamp_ = 0L;
    }
    
    @Override
    public final UnknownFieldSet getUnknownFields() {
        return unknownFields;
    }
    
    private FeedHeader(final CodedInputStream input, final ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        this();
        final int mutable_bitField0_ = 0;
        final UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        gtfsRealtimeVersion_ = bs;
                        break;
                    }
                    case 16: {
                        final int rawValue = input.readEnum();
                        final Incrementality value = Incrementality.valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(2, rawValue);
                        } else {
                            bitField0_ |= 0x00000002;
                            incrementality_ = rawValue;
                        }
                        break;
                    }
                    case 24: {
                        bitField0_ |= 0x00000004;
                        timestamp_ = input.readUInt64();
                        break;
                    }
                }
            }
        } catch (final InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final Descriptor getDescriptor() {
        return GtfsRealtime.internal_static_transit_realtime_FeedHeader_descriptor;
    }
    
    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
        return GtfsRealtime.internal_static_transit_realtime_FeedHeader_fieldAccessorTable
                .ensureFieldAccessorsInitialized(FeedHeader.class, Builder.class);
    }
    
    /**
     * <pre>
     * Determines whether the current fetch is incremental.  Currently,
     * DIFFERENTIAL mode is unsupported and behavior is unspecified for feeds
     * that use this mode.  There are discussions on the GTFS-realtime mailing
     * list around fully specifying the behavior of DIFFERENTIAL mode and the
     * documentation will be updated when those discussions are finalized.
     * </pre>
     * <p>
     * Protobuf enum {@code transit_realtime.FeedHeader.Incrementality}
     */
    public enum Incrementality implements ProtocolMessageEnum {
        /**
         * <code>FULL_DATASET = 0;</code>
         */
        FULL_DATASET(0),
        /**
         * <code>DIFFERENTIAL = 1;</code>
         */
        DIFFERENTIAL(1),;
        
        /**
         * <code>FULL_DATASET = 0;</code>
         */
        public static final int FULL_DATASET_VALUE = 0;
        /**
         * <code>DIFFERENTIAL = 1;</code>
         */
        public static final int DIFFERENTIAL_VALUE = 1;
        
        
        @Override
        public final int getNumber() {
            return value;
        }
        
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static Incrementality valueOf(final int value) {
            return forNumber(value);
        }
        
        public static Incrementality forNumber(final int value) {
            switch (value) {
                case 0:
                    return FULL_DATASET;
                case 1:
                    return DIFFERENTIAL;
                default:
                    return null;
            }
        }
        
        public static EnumLiteMap<Incrementality> internalGetValueMap() {
            return internalValueMap;
        }
        
        private static final EnumLiteMap<Incrementality> internalValueMap =
                Incrementality::forNumber;
        
        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        
        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }
        
        public static final EnumDescriptor getDescriptor() {
            return FeedHeader.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final Incrementality[] VALUES = values();
        
        public static Incrementality valueOf(final EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }
        
        private final int value;
        
        Incrementality(final int value) {
            this.value = value;
        }
        
        // @@protoc_insertion_point(enum_scope:transit_realtime.FeedHeader.Incrementality)
    }
    
    private int bitField0_;
    public static final int GTFS_REALTIME_VERSION_FIELD_NUMBER = 1;
    private volatile @Setter(AccessLevel.PRIVATE) Object gtfsRealtimeVersion_;
    
    /**
     * <pre>
     * Version of the feed specification.
     * The current version is 1.0.
     * </pre>
     * <p>
     * <code>required string gtfs_realtime_version = 1;</code>
     */
    @Override
    public boolean hasGtfsRealtimeVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * Version of the feed specification.
     * The current version is 1.0.
     * </pre>
     * <p>
     * <code>required string gtfs_realtime_version = 1;</code>
     */
    @Override
    public String getGtfsRealtimeVersion() {
        return ProtoUtils.asString(gtfsRealtimeVersion_, this::setGtfsRealtimeVersion_);
    }
    
    /**
     * <pre>
     * Version of the feed specification.
     * The current version is 1.0.
     * </pre>
     * <p>
     * <code>required string gtfs_realtime_version = 1;</code>
     */
    @Override
    public ByteString getGtfsRealtimeVersionBytes() {
        return ProtoUtils.asBytes(gtfsRealtimeVersion_, this::setGtfsRealtimeVersion_);
    }
    
    public static final int INCREMENTALITY_FIELD_NUMBER = 2;
    private int incrementality_;
    
    /**
     * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default =
     * FULL_DATASET];</code>
     */
    @Override
    public boolean hasIncrementality() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    
    /**
     * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default =
     * FULL_DATASET];</code>
     */
    @Override
    public Incrementality getIncrementality() {
        final Incrementality result = Incrementality.valueOf(incrementality_);
        return result == null ? Incrementality.FULL_DATASET : result;
    }
    
    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_;
    
    /**
     * <pre>
     * This timestamp identifies the moment when the content of this feed has been
     * created (in server time). In POSIX time (i.e., number of seconds since
     * January 1st 1970 00:00:00 UTC).
     * </pre>
     * <p>
     * <code>optional uint64 timestamp = 3;</code>
     */
    @Override
    public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    
    /**
     * <pre>
     * This timestamp identifies the moment when the content of this feed has been
     * created (in server time). In POSIX time (i.e., number of seconds since
     * January 1st 1970 00:00:00 UTC).
     * </pre>
     * <p>
     * <code>optional uint64 timestamp = 3;</code>
     */
    @Override
    public long getTimestamp() {
        return timestamp_;
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        if (!hasGtfsRealtimeVersion()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!extensionsAreInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final CodedOutputStream output) throws IOException {
        final ExtendableMessage<FeedHeader>.ExtensionWriter extensionWriter = newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            GeneratedMessageV3.writeString(output, 1, gtfsRealtimeVersion_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeEnum(2, incrementality_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeUInt64(3, timestamp_);
        }
        extensionWriter.writeUntil(2000, output);
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += GeneratedMessageV3.computeStringSize(1, gtfsRealtimeVersion_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream.computeEnumSize(2, incrementality_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream.computeUInt64Size(3, timestamp_);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FeedHeader)) {
            return super.equals(obj);
        }
        final FeedHeader other = (FeedHeader) obj;
        
        boolean result = true;
        result = result && (hasGtfsRealtimeVersion() == other.hasGtfsRealtimeVersion());
        if (hasGtfsRealtimeVersion()) {
            result = result && getGtfsRealtimeVersion().equals(other.getGtfsRealtimeVersion());
        }
        result = result && (hasIncrementality() == other.hasIncrementality());
        if (hasIncrementality()) {
            result = result && incrementality_ == other.incrementality_;
        }
        result = result && (hasTimestamp() == other.hasTimestamp());
        if (hasTimestamp()) {
            result = result && (getTimestamp() == other.getTimestamp());
        }
        result = result && unknownFields.equals(other.unknownFields);
        result = result && getExtensionFields().equals(other.getExtensionFields());
        return result;
    }
    
    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasGtfsRealtimeVersion()) {
            hash = (37 * hash) + GTFS_REALTIME_VERSION_FIELD_NUMBER;
            hash = (53 * hash) + getGtfsRealtimeVersion().hashCode();
        }
        if (hasIncrementality()) {
            hash = (37 * hash) + INCREMENTALITY_FIELD_NUMBER;
            hash = (53 * hash) + incrementality_;
        }
        if (hasTimestamp()) {
            hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
            hash = (53 * hash) + Internal.hashLong(getTimestamp());
        }
        hash = hashFields(hash, getExtensionFields());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static FeedHeader parseFrom(final ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static FeedHeader parseFrom(final ByteBuffer data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static FeedHeader parseFrom(final ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static FeedHeader parseFrom(final ByteString data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static FeedHeader parseFrom(final byte[] data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static FeedHeader parseFrom(final byte[] data,
            final ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static FeedHeader parseFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static FeedHeader parseFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static FeedHeader parseDelimitedFrom(final InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }
    
    public static FeedHeader parseDelimitedFrom(final InputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static FeedHeader parseFrom(final CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }
    
    public static FeedHeader parseFrom(final CodedInputStream input,
            final ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final FeedHeader prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @Override
    protected Builder newBuilderForType(final BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * Metadata about a feed, included in feed messages.
     * </pre>
     * <p>
     * Protobuf type {@code transit_realtime.FeedHeader}
     */
    public static final class Builder extends ExtendableBuilder<FeedHeader, Builder> implements
            // @@protoc_insertion_point(builder_implements:transit_realtime.FeedHeader)
            FeedHeaderOrBuilder {
        
        public static final Descriptor getDescriptor() {
            return GtfsRealtime.internal_static_transit_realtime_FeedHeader_descriptor;
        }
        
        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return GtfsRealtime.internal_static_transit_realtime_FeedHeader_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(FeedHeader.class, Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.FeedHeader.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(final BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            gtfsRealtimeVersion_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            incrementality_ = 0;
            bitField0_ = (bitField0_ & ~0x00000002);
            timestamp_ = 0L;
            bitField0_ = (bitField0_ & ~0x00000004);
            return this;
        }
        
        @Override
        public Descriptor getDescriptorForType() {
            return GtfsRealtime.internal_static_transit_realtime_FeedHeader_descriptor;
        }
        
        @Override
        public FeedHeader getDefaultInstanceForType() {
            return getDefaultInstance();
        }
        
        @Override
        public FeedHeader build() {
            final FeedHeader result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public FeedHeader buildPartial() {
            final FeedHeader result = new FeedHeader(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.gtfsRealtimeVersion_ = gtfsRealtimeVersion_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.incrementality_ = incrementality_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            result.timestamp_ = timestamp_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return super.clone();
        }
        
        @Override
        public Builder setField(final FieldDescriptor field, final Object value) {
            return super.setField(field, value);
        }
        
        @Override
        public Builder clearField(final FieldDescriptor field) {
            return super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(final OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(final FieldDescriptor field, final int index,
                final Object value) {
            return super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(final FieldDescriptor field, final Object value) {
            return super.addRepeatedField(field, value);
        }
        
        @Override
        public <Type> Builder setExtension(final GeneratedExtension<FeedHeader, Type> extension,
                final Type value) {
            return super.setExtension(extension, value);
        }
        
        @Override
        public <Type> Builder setExtension(
                final GeneratedExtension<FeedHeader, List<Type>> extension, final int index,
                final Type value) {
            return super.setExtension(extension, index, value);
        }
        
        @Override
        public <Type> Builder addExtension(
                final GeneratedExtension<FeedHeader, List<Type>> extension, final Type value) {
            return super.addExtension(extension, value);
        }
        
        @Override
        public <Type> Builder clearExtension(final GeneratedExtension<FeedHeader, ?> extension) {
            return super.clearExtension(extension);
        }
        
        @Override
        public Builder mergeFrom(final Message other) {
            if (other instanceof FeedHeader) {
                return mergeFrom((FeedHeader) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final FeedHeader other) {
            if (other == getDefaultInstance()) {return this;}
            if (other.hasGtfsRealtimeVersion()) {
                bitField0_ |= 0x00000001;
                gtfsRealtimeVersion_ = other.gtfsRealtimeVersion_;
                onChanged();
            }
            if (other.hasIncrementality()) {
                setIncrementality(other.getIncrementality());
            }
            if (other.hasTimestamp()) {
                setTimestamp(other.getTimestamp());
            }
            mergeExtensionFields(other);
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            if (!hasGtfsRealtimeVersion()) {
                return false;
            }
            return extensionsAreInitialized();
        }
        
        @Override
        public Builder mergeFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry) throws IOException {
            FeedHeader parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final InvalidProtocolBufferException e) {
                parsedMessage = (FeedHeader) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private @Setter(AccessLevel.PRIVATE) Object gtfsRealtimeVersion_ = "";
        
        /**
         * <pre>
         * Version of the feed specification.
         * The current version is 1.0.
         * </pre>
         * <p>
         * <code>required string gtfs_realtime_version = 1;</code>
         */
        @Override
        public boolean hasGtfsRealtimeVersion() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * Version of the feed specification.
         * The current version is 1.0.
         * </pre>
         * <p>
         * <code>required string gtfs_realtime_version = 1;</code>
         */
        @Override
        public String getGtfsRealtimeVersion() {
            return ProtoUtils.asString(gtfsRealtimeVersion_, this::setGtfsRealtimeVersion_);
        }
        
        /**
         * <pre>
         * Version of the feed specification.
         * The current version is 1.0.
         * </pre>
         * <p>
         * <code>required string gtfs_realtime_version = 1;</code>
         */
        @Override
        public ByteString getGtfsRealtimeVersionBytes() {
            return ProtoUtils.asBytes(gtfsRealtimeVersion_, this::setGtfsRealtimeVersion_);
        }
        
        /**
         * <pre>
         * Version of the feed specification.
         * The current version is 1.0.
         * </pre>
         * <p>
         * <code>required string gtfs_realtime_version = 1;</code>
         */
        public Builder setGtfsRealtimeVersion(final String value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            gtfsRealtimeVersion_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Version of the feed specification.
         * The current version is 1.0.
         * </pre>
         * <p>
         * <code>required string gtfs_realtime_version = 1;</code>
         */
        public Builder clearGtfsRealtimeVersion() {
            bitField0_ = (bitField0_ & ~0x00000001);
            gtfsRealtimeVersion_ = getDefaultInstance().getGtfsRealtimeVersion();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Version of the feed specification.
         * The current version is 1.0.
         * </pre>
         * <p>
         * <code>required string gtfs_realtime_version = 1;</code>
         */
        public Builder setGtfsRealtimeVersionBytes(final ByteString value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000001;
            gtfsRealtimeVersion_ = value;
            onChanged();
            return this;
        }
        
        private int incrementality_ = 0;
        
        /**
         * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default
         * = FULL_DATASET];</code>
         */
        @Override
        public boolean hasIncrementality() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        
        /**
         * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default =
         * FULL_DATASET];</code>
         */
        @Override
        public Incrementality getIncrementality() {
            final Incrementality result = Incrementality.valueOf(incrementality_);
            return result == null ? Incrementality.FULL_DATASET : result;
        }
        
        /**
         * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default
         * = FULL_DATASET];</code>
         */
        public Builder setIncrementality(final Incrementality value) {
            Objects.requireNonNull(value);
            bitField0_ |= 0x00000002;
            incrementality_ = value.getNumber();
            onChanged();
            return this;
        }
        
        /**
         * <code>optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default
         * = FULL_DATASET];</code>
         */
        public Builder clearIncrementality() {
            bitField0_ = (bitField0_ & ~0x00000002);
            incrementality_ = 0;
            onChanged();
            return this;
        }
        
        private long timestamp_;
        
        /**
         * <pre>
         * This timestamp identifies the moment when the content of this feed has been
         * created (in server time). In POSIX time (i.e., number of seconds since
         * January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 3;</code>
         */
        @Override
        public boolean hasTimestamp() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        
        /**
         * <pre>
         * This timestamp identifies the moment when the content of this feed has been
         * created (in server time). In POSIX time (i.e., number of seconds since
         * January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 3;</code>
         */
        @Override
        public long getTimestamp() {
            return timestamp_;
        }
        
        /**
         * <pre>
         * This timestamp identifies the moment when the content of this feed has been
         * created (in server time). In POSIX time (i.e., number of seconds since
         * January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 3;</code>
         */
        public Builder setTimestamp(final long value) {
            bitField0_ |= 0x00000004;
            timestamp_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * This timestamp identifies the moment when the content of this feed has been
         * created (in server time). In POSIX time (i.e., number of seconds since
         * January 1st 1970 00:00:00 UTC).
         * </pre>
         * <p>
         * <code>optional uint64 timestamp = 3;</code>
         */
        public Builder clearTimestamp() {
            bitField0_ = (bitField0_ & ~0x00000004);
            timestamp_ = 0L;
            onChanged();
            return this;
        }
        
        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:transit_realtime.FeedHeader)
    }
    
    // @@protoc_insertion_point(class_scope:transit_realtime.FeedHeader)
    private static final FeedHeader DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new FeedHeader();
    }
    
    public static FeedHeader getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @Deprecated public static final Parser<FeedHeader> PARSER = new AbstractParser<>() {
        
        @Override
        public FeedHeader parsePartialFrom(final CodedInputStream input,
                final ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return new FeedHeader(input, extensionRegistry);
        }
    };
    
    public static Parser<FeedHeader> parser() {
        return PARSER;
    }
    
    @Override
    public Parser<FeedHeader> getParserForType() {
        return PARSER;
    }
    
    @Override
    public FeedHeader getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}