// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

package sen.khyber.web.subway.client.proto;

import sen.khyber.web.subway.client.proto.TripDescriptor.ScheduleRelationship;

import com.google.protobuf.ByteString;
import com.google.protobuf.GeneratedMessageV3.ExtendableMessageOrBuilder;

public interface TripDescriptorOrBuilder extends ExtendableMessageOrBuilder<TripDescriptor> {
    
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency expanded trips, this field is enough to uniquely identify
     * the trip. For frequency expanded, start_time and start_date might also be
     * necessary.
     * </pre>
     * <p>
     * <code>optional string trip_id = 1;</code>
     */
    boolean hasTripId();
    
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency expanded trips, this field is enough to uniquely identify
     * the trip. For frequency expanded, start_time and start_date might also be
     * necessary.
     * </pre>
     * <p>
     * <code>optional string trip_id = 1;</code>
     */
    String getTripId();
    
    /**
     * <pre>
     * The trip_id from the GTFS feed that this selector refers to.
     * For non frequency expanded trips, this field is enough to uniquely identify
     * the trip. For frequency expanded, start_time and start_date might also be
     * necessary.
     * </pre>
     * <p>
     * <code>optional string trip_id = 1;</code>
     */
    ByteString getTripIdBytes();
    
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     * <p>
     * <code>optional string route_id = 5;</code>
     */
    boolean hasRouteId();
    
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     * <p>
     * <code>optional string route_id = 5;</code>
     */
    String getRouteId();
    
    /**
     * <pre>
     * The route_id from the GTFS that this selector refers to.
     * </pre>
     * <p>
     * <code>optional string route_id = 5;</code>
     */
    ByteString getRouteIdBytes();
    
    /**
     * <pre>
     * The scheduled start time of this trip instance.
     * This field should be given only if the trip is frequency-expanded in the
     * GTFS feed. The value must precisely correspond to start_time specified for
     * the route in the GTFS feed plus some multiple of headway_secs.
     * Format of the field is same as that of GTFS/frequencies.txt/start_time,
     * e.g., 11:15:35 or 25:15:35.
     * </pre>
     * <p>
     * <code>optional string start_time = 2;</code>
     */
    boolean hasStartTime();
    
    /**
     * <pre>
     * The scheduled start time of this trip instance.
     * This field should be given only if the trip is frequency-expanded in the
     * GTFS feed. The value must precisely correspond to start_time specified for
     * the route in the GTFS feed plus some multiple of headway_secs.
     * Format of the field is same as that of GTFS/frequencies.txt/start_time,
     * e.g., 11:15:35 or 25:15:35.
     * </pre>
     * <p>
     * <code>optional string start_time = 2;</code>
     */
    String getStartTime();
    
    /**
     * <pre>
     * The scheduled start time of this trip instance.
     * This field should be given only if the trip is frequency-expanded in the
     * GTFS feed. The value must precisely correspond to start_time specified for
     * the route in the GTFS feed plus some multiple of headway_secs.
     * Format of the field is same as that of GTFS/frequencies.txt/start_time,
     * e.g., 11:15:35 or 25:15:35.
     * </pre>
     * <p>
     * <code>optional string start_time = 2;</code>
     */
    ByteString getStartTimeBytes();
    
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     * <p>
     * <code>optional string start_date = 3;</code>
     */
    boolean hasStartDate();
    
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     * <p>
     * <code>optional string start_date = 3;</code>
     */
    String getStartDate();
    
    /**
     * <pre>
     * The scheduled start date of this trip instance.
     * Must be provided to disambiguate trips that are so late as to collide with
     * a scheduled trip on a next day. For example, for a train that departs 8:00
     * and 20:00 every day, and is 12 hours late, there would be two distinct
     * trips on the same time.
     * This field can be provided but is not mandatory for schedules in which such
     * collisions are impossible - for example, a service running on hourly
     * schedule where a vehicle that is one hour late is not considered to be
     * related to schedule anymore.
     * In YYYYMMDD format.
     * </pre>
     * <p>
     * <code>optional string start_date = 3;</code>
     */
    ByteString getStartDateBytes();
    
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship =
     * 4;</code>
     */
    boolean hasScheduleRelationship();
    
    /**
     * <code>optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship =
     * 4;</code>
     */
    ScheduleRelationship getScheduleRelationship();
    
}