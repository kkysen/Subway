// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

package sen.khyber.web.subway.client.proto;

/**
 * <pre>
 * NYCT Subway extensions for the feed header
 * </pre>
 * <p>
 * Protobuf type {@code NyctFeedHeader}
 */
public final class NyctFeedHeader extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:NyctFeedHeader)
        NyctFeedHeaderOrBuilder {
    
    private static final long serialVersionUID = 0L;
    
    // Use NyctFeedHeader.newBuilder() to construct.
    private NyctFeedHeader(final com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }
    
    private NyctFeedHeader() {
        nyctSubwayVersion_ = "";
        tripReplacementPeriod_ = java.util.Collections.emptyList();
    }
    
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return unknownFields;
    }
    
    private NyctFeedHeader(
            final com.google.protobuf.CodedInputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        final com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                final int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(
                                input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        final com.google.protobuf.ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        nyctSubwayVersion_ = bs;
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            tripReplacementPeriod_ = new java.util.ArrayList<>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        tripReplacementPeriod_.add(
                                input.readMessage(TripReplacementPeriod.PARSER, extensionRegistry));
                        break;
                    }
                }
            }
        } catch (final com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (final java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                tripReplacementPeriod_ =
                        java.util.Collections.unmodifiableList(tripReplacementPeriod_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return NyctSubway.internal_static_NyctFeedHeader_descriptor;
    }
    
    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return NyctSubway.internal_static_NyctFeedHeader_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        NyctFeedHeader.class, NyctFeedHeader.Builder.class);
    }
    
    private int bitField0_;
    public static final int NYCT_SUBWAY_VERSION_FIELD_NUMBER = 1;
    private volatile java.lang.Object nyctSubwayVersion_;
    
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     * <p>
     * <code>required string nyct_subway_version = 1;</code>
     */
    @Override
    public boolean hasNyctSubwayVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     * <p>
     * <code>required string nyct_subway_version = 1;</code>
     */
    @Override
    public java.lang.String getNyctSubwayVersion() {
        final java.lang.Object ref = nyctSubwayVersion_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            final com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            final java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                nyctSubwayVersion_ = s;
            }
            return s;
        }
    }
    
    /**
     * <pre>
     * Version of the NYCT Subway extensions
     * The current version is 1.0
     * </pre>
     * <p>
     * <code>required string nyct_subway_version = 1;</code>
     */
    @Override
    public com.google.protobuf.ByteString
    getNyctSubwayVersionBytes() {
        final java.lang.Object ref = nyctSubwayVersion_;
        if (ref instanceof java.lang.String) {
            final com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            nyctSubwayVersion_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }
    
    public static final int TRIP_REPLACEMENT_PERIOD_FIELD_NUMBER = 2;
    private java.util.List<TripReplacementPeriod> tripReplacementPeriod_;
    
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     * <p>
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    @Override
    public java.util.List<TripReplacementPeriod> getTripReplacementPeriodList() {
        return tripReplacementPeriod_;
    }
    
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     * <p>
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    @Override
    public java.util.List<? extends TripReplacementPeriodOrBuilder>
    getTripReplacementPeriodOrBuilderList() {
        return tripReplacementPeriod_;
    }
    
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     * <p>
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    @Override
    public int getTripReplacementPeriodCount() {
        return tripReplacementPeriod_.size();
    }
    
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     * <p>
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    @Override
    public TripReplacementPeriod getTripReplacementPeriod(final int index) {
        return tripReplacementPeriod_.get(index);
    }
    
    /**
     * <pre>
     * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
     * trip within the trip_replacement_period.
     * This feed is a full dataset, it contains all trips starting
     * in the trip_replacement_period. If a trip from the static GTFS is not
     * found in the GTFS-realtime feed, it should be considered as cancelled.
     * The replacement period can be different for each route, so here is
     * a list of the routes where the trips in the feed replace all
     * scheduled trips within the replacement period.
     * </pre>
     * <p>
     * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
     */
    @Override
    public TripReplacementPeriodOrBuilder getTripReplacementPeriodOrBuilder(
            final int index) {
        return tripReplacementPeriod_.get(index);
    }
    
    private byte memoizedIsInitialized = -1;
    
    @Override
    public final boolean isInitialized() {
        final byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) {return true;}
        if (isInitialized == 0) {return false;}
        
        if (!hasNyctSubwayVersion()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }
    
    @Override
    public void writeTo(final com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nyctSubwayVersion_);
        }
        for (int i = 0; i < tripReplacementPeriod_.size(); i++) {
            output.writeMessage(2, tripReplacementPeriod_.get(i));
        }
        unknownFields.writeTo(output);
    }
    
    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) {return size;}
        
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, nyctSubwayVersion_);
        }
        for (int i = 0; i < tripReplacementPeriod_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(2, tripReplacementPeriod_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }
    
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof NyctFeedHeader)) {
            return super.equals(obj);
        }
        final NyctFeedHeader other = (NyctFeedHeader) obj;
        
        boolean result = true;
        result = result && (hasNyctSubwayVersion() == other.hasNyctSubwayVersion());
        if (hasNyctSubwayVersion()) {
            result = result && getNyctSubwayVersion()
                    .equals(other.getNyctSubwayVersion());
        }
        result = result && getTripReplacementPeriodList()
                .equals(other.getTripReplacementPeriodList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
    }
    
    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasNyctSubwayVersion()) {
            hash = (37 * hash) + NYCT_SUBWAY_VERSION_FIELD_NUMBER;
            hash = (53 * hash) + getNyctSubwayVersion().hashCode();
        }
        if (getTripReplacementPeriodCount() > 0) {
            hash = (37 * hash) + TRIP_REPLACEMENT_PERIOD_FIELD_NUMBER;
            hash = (53 * hash) + getTripReplacementPeriodList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }
    
    public static NyctFeedHeader parseFrom(
            final java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctFeedHeader parseFrom(
            final java.nio.ByteBuffer data,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctFeedHeader parseFrom(
            final com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctFeedHeader parseFrom(
            final com.google.protobuf.ByteString data,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctFeedHeader parseFrom(final byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }
    
    public static NyctFeedHeader parseFrom(
            final byte[] data,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }
    
    public static NyctFeedHeader parseFrom(final java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }
    
    public static NyctFeedHeader parseFrom(
            final java.io.InputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static NyctFeedHeader parseDelimitedFrom(final java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }
    
    public static NyctFeedHeader parseDelimitedFrom(
            final java.io.InputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    
    public static NyctFeedHeader parseFrom(
            final com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }
    
    public static NyctFeedHeader parseFrom(
            final com.google.protobuf.CodedInputStream input,
            final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }
    
    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }
    
    public static Builder newBuilder(final NyctFeedHeader prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    
    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }
    
    @java.lang.Override
    protected Builder newBuilderForType(
            final com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        final Builder builder = new Builder(parent);
        return builder;
    }
    
    /**
     * <pre>
     * NYCT Subway extensions for the feed header
     * </pre>
     * <p>
     * Protobuf type {@code NyctFeedHeader}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:NyctFeedHeader)
            NyctFeedHeaderOrBuilder {
        
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return NyctSubway.internal_static_NyctFeedHeader_descriptor;
        }
        
        @Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return NyctSubway.internal_static_NyctFeedHeader_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            NyctFeedHeader.class, NyctFeedHeader.Builder.class);
        }
        
        // Construct using sen.khyber.subway.client.proto.NyctFeedHeader.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }
        
        private Builder(
                final com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
                getTripReplacementPeriodFieldBuilder();
            }
        }
        
        @Override
        public Builder clear() {
            super.clear();
            nyctSubwayVersion_ = "";
            bitField0_ = (bitField0_ & ~0x00000001);
            if (tripReplacementPeriodBuilder_ == null) {
                tripReplacementPeriod_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
            } else {
                tripReplacementPeriodBuilder_.clear();
            }
            return this;
        }
        
        @Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return NyctSubway.internal_static_NyctFeedHeader_descriptor;
        }
        
        @Override
        public NyctFeedHeader getDefaultInstanceForType() {
            return NyctFeedHeader.getDefaultInstance();
        }
        
        @Override
        public NyctFeedHeader build() {
            final NyctFeedHeader result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }
        
        @Override
        public NyctFeedHeader buildPartial() {
            final NyctFeedHeader result = new NyctFeedHeader(this);
            final int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.nyctSubwayVersion_ = nyctSubwayVersion_;
            if (tripReplacementPeriodBuilder_ == null) {
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    tripReplacementPeriod_ =
                            java.util.Collections.unmodifiableList(tripReplacementPeriod_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.tripReplacementPeriod_ = tripReplacementPeriod_;
            } else {
                result.tripReplacementPeriod_ = tripReplacementPeriodBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }
        
        @Override
        public Builder clone() {
            return (Builder) super.clone();
        }
        
        @Override
        public Builder setField(
                final com.google.protobuf.Descriptors.FieldDescriptor field,
                final java.lang.Object value) {
            return (Builder) super.setField(field, value);
        }
        
        @Override
        public Builder clearField(
                final com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }
        
        @Override
        public Builder clearOneof(
                final com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }
        
        @Override
        public Builder setRepeatedField(
                final com.google.protobuf.Descriptors.FieldDescriptor field,
                final int index, final java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }
        
        @Override
        public Builder addRepeatedField(
                final com.google.protobuf.Descriptors.FieldDescriptor field,
                final java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }
        
        @Override
        public Builder mergeFrom(final com.google.protobuf.Message other) {
            if (other instanceof NyctFeedHeader) {
                return mergeFrom((NyctFeedHeader) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }
        
        public Builder mergeFrom(final NyctFeedHeader other) {
            if (other == NyctFeedHeader.getDefaultInstance()) {return this;}
            if (other.hasNyctSubwayVersion()) {
                bitField0_ |= 0x00000001;
                nyctSubwayVersion_ = other.nyctSubwayVersion_;
                onChanged();
            }
            if (tripReplacementPeriodBuilder_ == null) {
                if (!other.tripReplacementPeriod_.isEmpty()) {
                    if (tripReplacementPeriod_.isEmpty()) {
                        tripReplacementPeriod_ = other.tripReplacementPeriod_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureTripReplacementPeriodIsMutable();
                        tripReplacementPeriod_.addAll(other.tripReplacementPeriod_);
                    }
                    onChanged();
                }
            } else {
                if (!other.tripReplacementPeriod_.isEmpty()) {
                    if (tripReplacementPeriodBuilder_.isEmpty()) {
                        tripReplacementPeriodBuilder_.dispose();
                        tripReplacementPeriodBuilder_ = null;
                        tripReplacementPeriod_ = other.tripReplacementPeriod_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                        tripReplacementPeriodBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getTripReplacementPeriodFieldBuilder() : null;
                    } else {
                        tripReplacementPeriodBuilder_.addAllMessages(other.tripReplacementPeriod_);
                    }
                }
            }
            mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }
        
        @Override
        public final boolean isInitialized() {
            if (!hasNyctSubwayVersion()) {
                return false;
            }
            return true;
        }
        
        @Override
        public Builder mergeFrom(
                final com.google.protobuf.CodedInputStream input,
                final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            NyctFeedHeader parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (final com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (NyctFeedHeader) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }
        
        private int bitField0_;
        
        private java.lang.Object nyctSubwayVersion_ = "";
        
        /**
         * <pre>
         * Version of the NYCT Subway extensions
         * The current version is 1.0
         * </pre>
         * <p>
         * <code>required string nyct_subway_version = 1;</code>
         */
        @Override
        public boolean hasNyctSubwayVersion() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        
        /**
         * <pre>
         * Version of the NYCT Subway extensions
         * The current version is 1.0
         * </pre>
         * <p>
         * <code>required string nyct_subway_version = 1;</code>
         */
        @Override
        public java.lang.String getNyctSubwayVersion() {
            final java.lang.Object ref = nyctSubwayVersion_;
            if (!(ref instanceof java.lang.String)) {
                final com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                final java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    nyctSubwayVersion_ = s;
                }
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }
        
        /**
         * <pre>
         * Version of the NYCT Subway extensions
         * The current version is 1.0
         * </pre>
         * <p>
         * <code>required string nyct_subway_version = 1;</code>
         */
        @Override
        public com.google.protobuf.ByteString
        getNyctSubwayVersionBytes() {
            final java.lang.Object ref = nyctSubwayVersion_;
            if (ref instanceof String) {
                final com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                nyctSubwayVersion_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }
        
        /**
         * <pre>
         * Version of the NYCT Subway extensions
         * The current version is 1.0
         * </pre>
         * <p>
         * <code>required string nyct_subway_version = 1;</code>
         */
        public Builder setNyctSubwayVersion(
                final java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            nyctSubwayVersion_ = value;
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Version of the NYCT Subway extensions
         * The current version is 1.0
         * </pre>
         * <p>
         * <code>required string nyct_subway_version = 1;</code>
         */
        public Builder clearNyctSubwayVersion() {
            bitField0_ = (bitField0_ & ~0x00000001);
            nyctSubwayVersion_ = getDefaultInstance().getNyctSubwayVersion();
            onChanged();
            return this;
        }
        
        /**
         * <pre>
         * Version of the NYCT Subway extensions
         * The current version is 1.0
         * </pre>
         * <p>
         * <code>required string nyct_subway_version = 1;</code>
         */
        public Builder setNyctSubwayVersionBytes(
                final com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            nyctSubwayVersion_ = value;
            onChanged();
            return this;
        }
        
        private java.util.List<TripReplacementPeriod> tripReplacementPeriod_ =
                java.util.Collections.emptyList();
        
        private void ensureTripReplacementPeriodIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                tripReplacementPeriod_ = new java.util.ArrayList<>(tripReplacementPeriod_);
                bitField0_ |= 0x00000002;
            }
        }
        
        private com.google.protobuf.RepeatedFieldBuilderV3<
                TripReplacementPeriod, TripReplacementPeriod.Builder,
                TripReplacementPeriodOrBuilder>
                tripReplacementPeriodBuilder_;
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        @Override
        public java.util.List<TripReplacementPeriod> getTripReplacementPeriodList() {
            if (tripReplacementPeriodBuilder_ == null) {
                return java.util.Collections.unmodifiableList(tripReplacementPeriod_);
            } else {
                return tripReplacementPeriodBuilder_.getMessageList();
            }
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        @Override
        public int getTripReplacementPeriodCount() {
            if (tripReplacementPeriodBuilder_ == null) {
                return tripReplacementPeriod_.size();
            } else {
                return tripReplacementPeriodBuilder_.getCount();
            }
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        @Override
        public TripReplacementPeriod getTripReplacementPeriod(final int index) {
            if (tripReplacementPeriodBuilder_ == null) {
                return tripReplacementPeriod_.get(index);
            } else {
                return tripReplacementPeriodBuilder_.getMessage(index);
            }
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder setTripReplacementPeriod(
                final int index, final TripReplacementPeriod value) {
            if (tripReplacementPeriodBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureTripReplacementPeriodIsMutable();
                tripReplacementPeriod_.set(index, value);
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.setMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder setTripReplacementPeriod(
                final int index, final TripReplacementPeriod.Builder builderForValue) {
            if (tripReplacementPeriodBuilder_ == null) {
                ensureTripReplacementPeriodIsMutable();
                tripReplacementPeriod_.set(index, builderForValue.build());
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder addTripReplacementPeriod(final TripReplacementPeriod value) {
            if (tripReplacementPeriodBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureTripReplacementPeriodIsMutable();
                tripReplacementPeriod_.add(value);
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.addMessage(value);
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder addTripReplacementPeriod(
                final int index, final TripReplacementPeriod value) {
            if (tripReplacementPeriodBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureTripReplacementPeriodIsMutable();
                tripReplacementPeriod_.add(index, value);
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.addMessage(index, value);
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder addTripReplacementPeriod(
                final TripReplacementPeriod.Builder builderForValue) {
            if (tripReplacementPeriodBuilder_ == null) {
                ensureTripReplacementPeriodIsMutable();
                tripReplacementPeriod_.add(builderForValue.build());
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder addTripReplacementPeriod(
                final int index, final TripReplacementPeriod.Builder builderForValue) {
            if (tripReplacementPeriodBuilder_ == null) {
                ensureTripReplacementPeriodIsMutable();
                tripReplacementPeriod_.add(index, builderForValue.build());
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder addAllTripReplacementPeriod(
                final java.lang.Iterable<? extends TripReplacementPeriod> values) {
            if (tripReplacementPeriodBuilder_ == null) {
                ensureTripReplacementPeriodIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, tripReplacementPeriod_);
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.addAllMessages(values);
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder clearTripReplacementPeriod() {
            if (tripReplacementPeriodBuilder_ == null) {
                tripReplacementPeriod_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.clear();
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public Builder removeTripReplacementPeriod(final int index) {
            if (tripReplacementPeriodBuilder_ == null) {
                ensureTripReplacementPeriodIsMutable();
                tripReplacementPeriod_.remove(index);
                onChanged();
            } else {
                tripReplacementPeriodBuilder_.remove(index);
            }
            return this;
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public TripReplacementPeriod.Builder getTripReplacementPeriodBuilder(
                final int index) {
            return getTripReplacementPeriodFieldBuilder().getBuilder(index);
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        @Override
        public TripReplacementPeriodOrBuilder getTripReplacementPeriodOrBuilder(
                final int index) {
            if (tripReplacementPeriodBuilder_ == null) {
                return tripReplacementPeriod_.get(index);
            } else {
                return tripReplacementPeriodBuilder_.getMessageOrBuilder(index);
            }
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        @Override
        public java.util.List<? extends TripReplacementPeriodOrBuilder>
        getTripReplacementPeriodOrBuilderList() {
            if (tripReplacementPeriodBuilder_ != null) {
                return tripReplacementPeriodBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(tripReplacementPeriod_);
            }
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public TripReplacementPeriod.Builder addTripReplacementPeriodBuilder() {
            return getTripReplacementPeriodFieldBuilder().addBuilder(
                    TripReplacementPeriod.getDefaultInstance());
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public TripReplacementPeriod.Builder addTripReplacementPeriodBuilder(
                final int index) {
            return getTripReplacementPeriodFieldBuilder().addBuilder(
                    index, TripReplacementPeriod.getDefaultInstance());
        }
        
        /**
         * <pre>
         * For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
         * trip within the trip_replacement_period.
         * This feed is a full dataset, it contains all trips starting
         * in the trip_replacement_period. If a trip from the static GTFS is not
         * found in the GTFS-realtime feed, it should be considered as cancelled.
         * The replacement period can be different for each route, so here is
         * a list of the routes where the trips in the feed replace all
         * scheduled trips within the replacement period.
         * </pre>
         * <p>
         * <code>repeated .TripReplacementPeriod trip_replacement_period = 2;</code>
         */
        public java.util.List<TripReplacementPeriod.Builder>
        getTripReplacementPeriodBuilderList() {
            return getTripReplacementPeriodFieldBuilder().getBuilderList();
        }
        
        private com.google.protobuf.RepeatedFieldBuilderV3<
                TripReplacementPeriod, TripReplacementPeriod.Builder,
                TripReplacementPeriodOrBuilder>
        getTripReplacementPeriodFieldBuilder() {
            if (tripReplacementPeriodBuilder_ == null) {
                tripReplacementPeriodBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<>(
                        tripReplacementPeriod_,
                        ((bitField0_ & 0x00000002) == 0x00000002),
                        getParentForChildren(),
                        isClean());
                tripReplacementPeriod_ = null;
            }
            return tripReplacementPeriodBuilder_;
        }
        
        @Override
        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }
        
        @Override
        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }
        
        
        // @@protoc_insertion_point(builder_scope:NyctFeedHeader)
    }
    
    // @@protoc_insertion_point(class_scope:NyctFeedHeader)
    private static final NyctFeedHeader DEFAULT_INSTANCE;
    
    static {
        DEFAULT_INSTANCE = new NyctFeedHeader();
    }
    
    public static NyctFeedHeader getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }
    
    @java.lang.Deprecated public static final com.google.protobuf.Parser<NyctFeedHeader>
            PARSER = new com.google.protobuf.AbstractParser<>() {
        
        @Override
        public NyctFeedHeader parsePartialFrom(
                final com.google.protobuf.CodedInputStream input,
                final com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new NyctFeedHeader(input, extensionRegistry);
        }
    };
    
    public static com.google.protobuf.Parser<NyctFeedHeader> parser() {
        return PARSER;
    }
    
    @java.lang.Override
    public com.google.protobuf.Parser<NyctFeedHeader> getParserForType() {
        return PARSER;
    }
    
    @Override
    public NyctFeedHeader getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }
    
}

